Search.setIndex({docurls:["context.html","driver/array/index.html","driver/cast/index.html","driver/downsample/index.html","driver/image/avif/index.html","driver/image/bmp/index.html","driver/image/jpeg/index.html","driver/image/png/index.html","driver/image/tiff/index.html","driver/image/webp/index.html","driver/index.html","driver/json/index.html","driver/n5/index.html","driver/neuroglancer_precomputed/index.html","driver/stack/index.html","driver/zarr/index.html","environment.html","index.html","index_space.html","installation.html","kvstore/file/index.html","kvstore/gcs/index.html","kvstore/http/index.html","kvstore/index.html","kvstore/memory/index.html","kvstore/neuroglancer_uint64_sharded/index.html","python/api/index.html","python/api/tensorstore.ChunkLayout.html","python/api/tensorstore.ChunkLayout.Grid.html","python/api/tensorstore.ChunkLayout.Grid.__eq__.html","python/api/tensorstore.ChunkLayout.Grid.__init__-components.html","python/api/tensorstore.ChunkLayout.Grid.__init__-json.html","python/api/tensorstore.ChunkLayout.Grid.aspect_ratio.html","python/api/tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.elements.html","python/api/tensorstore.ChunkLayout.Grid.elements_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.ndim.html","python/api/tensorstore.ChunkLayout.Grid.rank.html","python/api/tensorstore.ChunkLayout.Grid.shape.html","python/api/tensorstore.ChunkLayout.Grid.shape_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.to_json.html","python/api/tensorstore.ChunkLayout.Grid.update.html","python/api/tensorstore.ChunkLayout.__eq__.html","python/api/tensorstore.ChunkLayout.__init__-components.html","python/api/tensorstore.ChunkLayout.__init__-json.html","python/api/tensorstore.ChunkLayout.codec_chunk.html","python/api/tensorstore.ChunkLayout.grid_origin.html","python/api/tensorstore.ChunkLayout.grid_origin_soft_constraint.html","python/api/tensorstore.ChunkLayout.inner_order.html","python/api/tensorstore.ChunkLayout.inner_order_soft_constraint.html","python/api/tensorstore.ChunkLayout.ndim.html","python/api/tensorstore.ChunkLayout.rank.html","python/api/tensorstore.ChunkLayout.read_chunk.html","python/api/tensorstore.ChunkLayout.read_chunk_template.html","python/api/tensorstore.ChunkLayout.to_json.html","python/api/tensorstore.ChunkLayout.update.html","python/api/tensorstore.ChunkLayout.write_chunk.html","python/api/tensorstore.ChunkLayout.write_chunk_template.html","python/api/tensorstore.CodecSpec.html","python/api/tensorstore.CodecSpec.__init__.html","python/api/tensorstore.CodecSpec.to_json.html","python/api/tensorstore.Context.html","python/api/tensorstore.Context.Resource.html","python/api/tensorstore.Context.Resource.to_json.html","python/api/tensorstore.Context.Spec.html","python/api/tensorstore.Context.Spec.__init__.html","python/api/tensorstore.Context.Spec.to_json.html","python/api/tensorstore.Context.__getitem__.html","python/api/tensorstore.Context.__init__-default.html","python/api/tensorstore.Context.__init__-json.html","python/api/tensorstore.Context.__init__-spec.html","python/api/tensorstore.Context.parent.html","python/api/tensorstore.Context.spec.html","python/api/tensorstore.Dim.html","python/api/tensorstore.Dim.__contains__-dim.html","python/api/tensorstore.Dim.__contains__-index.html","python/api/tensorstore.Dim.__eq__.html","python/api/tensorstore.Dim.__init__-exclusive_max.html","python/api/tensorstore.Dim.__init__-inclusive_max.html","python/api/tensorstore.Dim.__init__-size.html","python/api/tensorstore.Dim.__init__-unbounded.html","python/api/tensorstore.Dim.__iter__.html","python/api/tensorstore.Dim.__len__.html","python/api/tensorstore.Dim.__repr__.html","python/api/tensorstore.Dim.__str__.html","python/api/tensorstore.Dim.empty.html","python/api/tensorstore.Dim.exclusive_max.html","python/api/tensorstore.Dim.exclusive_min.html","python/api/tensorstore.Dim.finite.html","python/api/tensorstore.Dim.hull.html","python/api/tensorstore.Dim.implicit_lower.html","python/api/tensorstore.Dim.implicit_upper.html","python/api/tensorstore.Dim.inclusive_max.html","python/api/tensorstore.Dim.inclusive_min.html","python/api/tensorstore.Dim.intersect.html","python/api/tensorstore.Dim.label.html","python/api/tensorstore.Dim.size.html","python/api/tensorstore.DimExpression.html","python/api/tensorstore.DimExpression.__getitem__.html","python/api/tensorstore.DimExpression.diagonal.html","python/api/tensorstore.DimExpression.label.html","python/api/tensorstore.DimExpression.oindex.html","python/api/tensorstore.DimExpression.stride.html","python/api/tensorstore.DimExpression.translate_backward_by.html","python/api/tensorstore.DimExpression.translate_by.html","python/api/tensorstore.DimExpression.translate_to.html","python/api/tensorstore.DimExpression.transpose.html","python/api/tensorstore.DimExpression.vindex.html","python/api/tensorstore.Future.html","python/api/tensorstore.Future.__new__.html","python/api/tensorstore.Future.add_done_callback.html","python/api/tensorstore.Future.cancel.html","python/api/tensorstore.Future.cancelled.html","python/api/tensorstore.Future.done.html","python/api/tensorstore.Future.exception.html","python/api/tensorstore.Future.force.html","python/api/tensorstore.Future.remove_done_callback.html","python/api/tensorstore.Future.result.html","python/api/tensorstore.FutureLike.html","python/api/tensorstore.IndexDomain.html","python/api/tensorstore.IndexDomain.__getitem__-domain.html","python/api/tensorstore.IndexDomain.__getitem__-expr.html","python/api/tensorstore.IndexDomain.__getitem__-identifier.html","python/api/tensorstore.IndexDomain.__getitem__-selection.html","python/api/tensorstore.IndexDomain.__getitem__-transform.html","python/api/tensorstore.IndexDomain.__init__-components.html","python/api/tensorstore.IndexDomain.__init__-dimensions.html","python/api/tensorstore.IndexDomain.__init__-json.html","python/api/tensorstore.IndexDomain.__len__.html","python/api/tensorstore.IndexDomain.__repr__.html","python/api/tensorstore.IndexDomain.exclusive_max.html","python/api/tensorstore.IndexDomain.hull.html","python/api/tensorstore.IndexDomain.implicit_lower_bounds.html","python/api/tensorstore.IndexDomain.implicit_upper_bounds.html","python/api/tensorstore.IndexDomain.inclusive_max.html","python/api/tensorstore.IndexDomain.inclusive_min.html","python/api/tensorstore.IndexDomain.index_exp.html","python/api/tensorstore.IndexDomain.intersect.html","python/api/tensorstore.IndexDomain.labels.html","python/api/tensorstore.IndexDomain.ndim.html","python/api/tensorstore.IndexDomain.origin.html","python/api/tensorstore.IndexDomain.rank.html","python/api/tensorstore.IndexDomain.shape.html","python/api/tensorstore.IndexDomain.size.html","python/api/tensorstore.IndexDomain.to_json.html","python/api/tensorstore.IndexTransform.html","python/api/tensorstore.IndexTransform.T.html","python/api/tensorstore.IndexTransform.__call__.html","python/api/tensorstore.IndexTransform.__getitem__-domain.html","python/api/tensorstore.IndexTransform.__getitem__-expr.html","python/api/tensorstore.IndexTransform.__getitem__-indices.html","python/api/tensorstore.IndexTransform.__getitem__-transform.html","python/api/tensorstore.IndexTransform.__init__-components.html","python/api/tensorstore.IndexTransform.__init__-domain.html","python/api/tensorstore.IndexTransform.__init__-json.html","python/api/tensorstore.IndexTransform.__repr__.html","python/api/tensorstore.IndexTransform.domain.html","python/api/tensorstore.IndexTransform.implicit_lower_bounds.html","python/api/tensorstore.IndexTransform.implicit_upper_bounds.html","python/api/tensorstore.IndexTransform.input_exclusive_max.html","python/api/tensorstore.IndexTransform.input_inclusive_max.html","python/api/tensorstore.IndexTransform.input_inclusive_min.html","python/api/tensorstore.IndexTransform.input_labels.html","python/api/tensorstore.IndexTransform.input_origin.html","python/api/tensorstore.IndexTransform.input_rank.html","python/api/tensorstore.IndexTransform.input_shape.html","python/api/tensorstore.IndexTransform.ndim.html","python/api/tensorstore.IndexTransform.oindex.html","python/api/tensorstore.IndexTransform.origin.html","python/api/tensorstore.IndexTransform.output.html","python/api/tensorstore.IndexTransform.output_rank.html","python/api/tensorstore.IndexTransform.shape.html","python/api/tensorstore.IndexTransform.size.html","python/api/tensorstore.IndexTransform.to_json.html","python/api/tensorstore.IndexTransform.vindex.html","python/api/tensorstore.Indexable.html","python/api/tensorstore.KvStore.html","python/api/tensorstore.KvStore.KeyRange.html","python/api/tensorstore.KvStore.KeyRange.__eq__.html","python/api/tensorstore.KvStore.KeyRange.__init__.html","python/api/tensorstore.KvStore.KeyRange.copy.html","python/api/tensorstore.KvStore.KeyRange.empty.html","python/api/tensorstore.KvStore.KeyRange.exclusive_max.html","python/api/tensorstore.KvStore.KeyRange.inclusive_min.html","python/api/tensorstore.KvStore.ReadResult.html","python/api/tensorstore.KvStore.ReadResult.__init__.html","python/api/tensorstore.KvStore.ReadResult.stamp.html","python/api/tensorstore.KvStore.ReadResult.state.html","python/api/tensorstore.KvStore.ReadResult.value.html","python/api/tensorstore.KvStore.Spec.html","python/api/tensorstore.KvStore.Spec.__add__.html","python/api/tensorstore.KvStore.Spec.__new__.html","python/api/tensorstore.KvStore.Spec.__repr__.html","python/api/tensorstore.KvStore.Spec.__truediv__.html","python/api/tensorstore.KvStore.Spec.copy.html","python/api/tensorstore.KvStore.Spec.path.html","python/api/tensorstore.KvStore.Spec.to_json.html","python/api/tensorstore.KvStore.Spec.update.html","python/api/tensorstore.KvStore.Spec.url.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.__eq__.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.__init__.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.generation.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.time.html","python/api/tensorstore.KvStore.__delitem__.html","python/api/tensorstore.KvStore.__getitem__.html","python/api/tensorstore.KvStore.__repr__.html","python/api/tensorstore.KvStore.__setitem__.html","python/api/tensorstore.KvStore.copy.html","python/api/tensorstore.KvStore.delete_range.html","python/api/tensorstore.KvStore.list.html","python/api/tensorstore.KvStore.open.html","python/api/tensorstore.KvStore.path.html","python/api/tensorstore.KvStore.read.html","python/api/tensorstore.KvStore.spec.html","python/api/tensorstore.KvStore.transaction.html","python/api/tensorstore.KvStore.url.html","python/api/tensorstore.KvStore.with_transaction.html","python/api/tensorstore.KvStore.write.html","python/api/tensorstore.OutputIndexMap.html","python/api/tensorstore.OutputIndexMap.__init__-constant.html","python/api/tensorstore.OutputIndexMap.__init__-index_array.html","python/api/tensorstore.OutputIndexMap.__init__-input_dimension.html","python/api/tensorstore.OutputIndexMap.index_array.html","python/api/tensorstore.OutputIndexMap.index_range.html","python/api/tensorstore.OutputIndexMap.input_dimension.html","python/api/tensorstore.OutputIndexMap.method.html","python/api/tensorstore.OutputIndexMap.offset.html","python/api/tensorstore.OutputIndexMap.stride.html","python/api/tensorstore.OutputIndexMaps.html","python/api/tensorstore.OutputIndexMaps.__getitem__.html","python/api/tensorstore.OutputIndexMaps.__len__.html","python/api/tensorstore.OutputIndexMaps.rank.html","python/api/tensorstore.OutputIndexMethod.html","python/api/tensorstore.OutputIndexMethod.__init__.html","python/api/tensorstore.OutputIndexMethod.__str__.html","python/api/tensorstore.OutputIndexMethod.array.html","python/api/tensorstore.OutputIndexMethod.constant.html","python/api/tensorstore.OutputIndexMethod.name.html","python/api/tensorstore.OutputIndexMethod.single_input_dimension.html","python/api/tensorstore.OutputIndexMethod.value.html","python/api/tensorstore.Promise.html","python/api/tensorstore.Promise.new.html","python/api/tensorstore.Promise.set_exception.html","python/api/tensorstore.Promise.set_result.html","python/api/tensorstore.Schema.html","python/api/tensorstore.Schema.T.html","python/api/tensorstore.Schema.__eq__.html","python/api/tensorstore.Schema.__getitem__-domain.html","python/api/tensorstore.Schema.__getitem__-expr.html","python/api/tensorstore.Schema.__getitem__-indices.html","python/api/tensorstore.Schema.__getitem__-transform.html","python/api/tensorstore.Schema.__init__-components.html","python/api/tensorstore.Schema.__init__-json.html","python/api/tensorstore.Schema.__repr__.html","python/api/tensorstore.Schema.chunk_layout.html","python/api/tensorstore.Schema.codec.html","python/api/tensorstore.Schema.copy.html","python/api/tensorstore.Schema.dimension_units.html","python/api/tensorstore.Schema.domain.html","python/api/tensorstore.Schema.dtype.html","python/api/tensorstore.Schema.fill_value.html","python/api/tensorstore.Schema.ndim.html","python/api/tensorstore.Schema.oindex.html","python/api/tensorstore.Schema.origin.html","python/api/tensorstore.Schema.rank.html","python/api/tensorstore.Schema.shape.html","python/api/tensorstore.Schema.size.html","python/api/tensorstore.Schema.to_json.html","python/api/tensorstore.Schema.update.html","python/api/tensorstore.Schema.vindex.html","python/api/tensorstore.Spec.html","python/api/tensorstore.Spec.T.html","python/api/tensorstore.Spec.__eq__.html","python/api/tensorstore.Spec.__getitem__-domain.html","python/api/tensorstore.Spec.__getitem__-expr.html","python/api/tensorstore.Spec.__getitem__-indices.html","python/api/tensorstore.Spec.__getitem__-transform.html","python/api/tensorstore.Spec.__new__.html","python/api/tensorstore.Spec.__repr__.html","python/api/tensorstore.Spec.chunk_layout.html","python/api/tensorstore.Spec.codec.html","python/api/tensorstore.Spec.copy.html","python/api/tensorstore.Spec.dimension_units.html","python/api/tensorstore.Spec.domain.html","python/api/tensorstore.Spec.dtype.html","python/api/tensorstore.Spec.fill_value.html","python/api/tensorstore.Spec.kvstore.html","python/api/tensorstore.Spec.ndim.html","python/api/tensorstore.Spec.oindex.html","python/api/tensorstore.Spec.origin.html","python/api/tensorstore.Spec.rank.html","python/api/tensorstore.Spec.schema.html","python/api/tensorstore.Spec.shape.html","python/api/tensorstore.Spec.size.html","python/api/tensorstore.Spec.to_json.html","python/api/tensorstore.Spec.transform.html","python/api/tensorstore.Spec.update.html","python/api/tensorstore.Spec.vindex.html","python/api/tensorstore.TensorStore.html","python/api/tensorstore.TensorStore.T.html","python/api/tensorstore.TensorStore.__array__.html","python/api/tensorstore.TensorStore.__getitem__-domain.html","python/api/tensorstore.TensorStore.__getitem__-expr.html","python/api/tensorstore.TensorStore.__getitem__-indices.html","python/api/tensorstore.TensorStore.__getitem__-transform.html","python/api/tensorstore.TensorStore.__setitem__-domain.html","python/api/tensorstore.TensorStore.__setitem__-expr.html","python/api/tensorstore.TensorStore.__setitem__-indices.html","python/api/tensorstore.TensorStore.__setitem__-transform.html","python/api/tensorstore.TensorStore.astype.html","python/api/tensorstore.TensorStore.chunk_layout.html","python/api/tensorstore.TensorStore.codec.html","python/api/tensorstore.TensorStore.dimension_units.html","python/api/tensorstore.TensorStore.domain.html","python/api/tensorstore.TensorStore.dtype.html","python/api/tensorstore.TensorStore.fill_value.html","python/api/tensorstore.TensorStore.kvstore.html","python/api/tensorstore.TensorStore.mode.html","python/api/tensorstore.TensorStore.ndim.html","python/api/tensorstore.TensorStore.oindex.html","python/api/tensorstore.TensorStore.oindex.__setitem__.html","python/api/tensorstore.TensorStore.origin.html","python/api/tensorstore.TensorStore.rank.html","python/api/tensorstore.TensorStore.read.html","python/api/tensorstore.TensorStore.readable.html","python/api/tensorstore.TensorStore.resolve.html","python/api/tensorstore.TensorStore.schema.html","python/api/tensorstore.TensorStore.shape.html","python/api/tensorstore.TensorStore.size.html","python/api/tensorstore.TensorStore.spec.html","python/api/tensorstore.TensorStore.transaction.html","python/api/tensorstore.TensorStore.vindex.html","python/api/tensorstore.TensorStore.vindex.__setitem__.html","python/api/tensorstore.TensorStore.with_transaction.html","python/api/tensorstore.TensorStore.writable.html","python/api/tensorstore.TensorStore.write.html","python/api/tensorstore.Transaction.html","python/api/tensorstore.Transaction.__init__.html","python/api/tensorstore.Transaction.abort.html","python/api/tensorstore.Transaction.aborted.html","python/api/tensorstore.Transaction.atomic.html","python/api/tensorstore.Transaction.commit_async.html","python/api/tensorstore.Transaction.commit_started.html","python/api/tensorstore.Transaction.commit_sync.html","python/api/tensorstore.Transaction.future.html","python/api/tensorstore.Transaction.open.html","python/api/tensorstore.Unit.html","python/api/tensorstore.Unit.__eq__.html","python/api/tensorstore.Unit.__init__-components.html","python/api/tensorstore.Unit.__init__-json.html","python/api/tensorstore.Unit.__init__-multiplier.html","python/api/tensorstore.Unit.__init__-pair.html","python/api/tensorstore.Unit.__init__-unit.html","python/api/tensorstore.Unit.__mul__.html","python/api/tensorstore.Unit.__truediv__.html","python/api/tensorstore.Unit.base_unit.html","python/api/tensorstore.Unit.multiplier.html","python/api/tensorstore.Unit.to_json.html","python/api/tensorstore.VirtualChunkedReadParameters.html","python/api/tensorstore.VirtualChunkedReadParameters.if_not_equal.html","python/api/tensorstore.VirtualChunkedReadParameters.staleness_bound.html","python/api/tensorstore.VirtualChunkedWriteParameters.html","python/api/tensorstore.VirtualChunkedWriteParameters.if_equal.html","python/api/tensorstore.WriteFutures.html","python/api/tensorstore.WriteFutures.add_done_callback.html","python/api/tensorstore.WriteFutures.cancel.html","python/api/tensorstore.WriteFutures.cancelled.html","python/api/tensorstore.WriteFutures.commit.html","python/api/tensorstore.WriteFutures.copy.html","python/api/tensorstore.WriteFutures.done.html","python/api/tensorstore.WriteFutures.exception.html","python/api/tensorstore.WriteFutures.remove_done_callback.html","python/api/tensorstore.WriteFutures.result.html","python/api/tensorstore.array.html","python/api/tensorstore.bfloat16.html","python/api/tensorstore.bool.html","python/api/tensorstore.cast.html","python/api/tensorstore.complex128.html","python/api/tensorstore.complex64.html","python/api/tensorstore.d.html","python/api/tensorstore.d.__class_getitem__.html","python/api/tensorstore.downsample-spec.html","python/api/tensorstore.downsample-store.html","python/api/tensorstore.dtype.html","python/api/tensorstore.dtype.__call__.html","python/api/tensorstore.dtype.__init__-dtype.html","python/api/tensorstore.dtype.__init__-name.html","python/api/tensorstore.dtype.name.html","python/api/tensorstore.dtype.numpy_dtype.html","python/api/tensorstore.dtype.to_json.html","python/api/tensorstore.dtype.type.html","python/api/tensorstore.float16.html","python/api/tensorstore.float32.html","python/api/tensorstore.float64.html","python/api/tensorstore.inf.html","python/api/tensorstore.int16.html","python/api/tensorstore.int32.html","python/api/tensorstore.int64.html","python/api/tensorstore.int8.html","python/api/tensorstore.json.html","python/api/tensorstore.newaxis.html","python/api/tensorstore.open.html","python/api/tensorstore.string.html","python/api/tensorstore.uint16.html","python/api/tensorstore.uint32.html","python/api/tensorstore.uint64.html","python/api/tensorstore.uint8.html","python/api/tensorstore.ustring.html","python/api/tensorstore.virtual_chunked.html","python/indexing.html","python/tutorial.html","schema.html","spec.html"],envversion:{"sphinx.domains.c":2,"sphinx.domains.changeset":1,"sphinx.domains.citation":1,"sphinx.domains.cpp":4,"sphinx.domains.index":1,"sphinx.domains.javascript":2,"sphinx.domains.math":2,"sphinx.domains.python":3,"sphinx.domains.rst":2,"sphinx.domains.std":2,"sphinx.ext.intersphinx":1,sphinx:56},objects:{"":{"ChunkLayout/Grid":[412,0,1,"json-ChunkLayout/Grid","Constraints on the write/read/codec chunk grids."],"KvStoreUrl/file":[20,0,1,"json-KvStoreUrl/file","file:// KvStore URL scheme"],"KvStoreUrl/gs":[21,0,1,"json-KvStoreUrl/gs","gs:// KvStore URL scheme"],"KvStoreUrl/http":[22,0,1,"json-KvStoreUrl/http","http:// and https:// KvStore URL scheme"],"KvStoreUrl/memory":[24,0,1,"json-KvStoreUrl/memory","memory:// KvStore URL scheme"],"driver/array":[1,0,1,"json-driver/array",""],"driver/avif":[4,0,1,"json-driver/avif",""],"driver/bmp":[5,0,1,"json-driver/bmp",""],"driver/cast":[2,0,1,"json-driver/cast",""],"driver/downsample":[3,0,1,"json-driver/downsample",""],"driver/jpeg":[6,0,1,"json-driver/jpeg",""],"driver/json":[11,0,1,"json-driver/json",""],"driver/n5":[12,0,1,"json-driver/n5",""],"driver/n5/Codec":[12,0,1,"json-driver/n5/Codec",""],"driver/n5/Compression":[12,0,1,"json-driver/n5/Compression",""],"driver/n5/Compression/blosc":[12,0,1,"json-driver/n5/Compression/blosc",""],"driver/n5/Compression/bzip2":[12,0,1,"json-driver/n5/Compression/bzip2",""],"driver/n5/Compression/gzip":[12,0,1,"json-driver/n5/Compression/gzip",""],"driver/n5/Compression/raw":[12,0,1,"json-driver/n5/Compression/raw",""],"driver/n5/Compression/xz":[12,0,1,"json-driver/n5/Compression/xz",""],"driver/neuroglancer_precomputed":[13,0,1,"json-driver/neuroglancer_precomputed",""],"driver/neuroglancer_precomputed/Codec":[13,0,1,"json-driver/neuroglancer_precomputed/Codec","Neuroglancer Precomputed Codec"],"driver/png":[7,0,1,"json-driver/png",""],"driver/stack":[14,0,1,"json-driver/stack",""],"driver/tiff":[8,0,1,"json-driver/tiff",""],"driver/webp":[9,0,1,"json-driver/webp",""],"driver/zarr":[15,0,1,"json-driver/zarr",""],"driver/zarr/Codec":[15,0,1,"json-driver/zarr/Codec",""],"driver/zarr/Compressor":[15,0,1,"json-driver/zarr/Compressor","Compressor"],"driver/zarr/Compressor/blosc":[15,0,1,"json-driver/zarr/Compressor/blosc",""],"driver/zarr/Compressor/bz2":[15,0,1,"json-driver/zarr/Compressor/bz2",""],"driver/zarr/Compressor/zlib":[15,0,1,"json-driver/zarr/Compressor/zlib",""],"kvstore/file":[20,0,1,"json-kvstore/file","JSON specification of file-backed key-value store."],"kvstore/gcs":[21,0,1,"json-kvstore/gcs",""],"kvstore/http":[22,0,1,"json-kvstore/http",""],"kvstore/memory":[24,0,1,"json-kvstore/memory",""],"kvstore/neuroglancer_uint64_sharded":[25,0,1,"json-kvstore/neuroglancer_uint64_sharded","JSON specification of neuroglancer_uint64_sharded key-value store."],"kvstore/neuroglancer_uint64_sharded/ShardingSpec":[25,0,1,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec","Sharding metadata"],ARCHFLAGS:[19,9,1,"-",""],BAZELISK_HOME:[19,9,1,"-",""],CacheRevalidationBound:[10,0,1,"json-CacheRevalidationBound",""],ChunkLayout:[412,0,1,"json-ChunkLayout",""],Codec:[412,0,1,"json-Codec",""],Context:[0,0,1,"json-Context",""],ContextResource:[0,0,1,"json-ContextResource",""],DownsampleMethod:[3,0,1,"json-DownsampleMethod","Downsample method"],GOOGLE_APPLICATION_CREDENTIALS:[16,9,1,"-",""],IndexDomain:[18,0,1,"json-IndexDomain",""],IndexInterval:[18,0,1,"json-IndexInterval","Specifies a closed interval of integer index values."],IndexTransform:[18,0,1,"json-IndexTransform",""],KeyValueStoreBackedChunkDriver:[10,0,1,"json-KeyValueStoreBackedChunkDriver",""],KvStore:[23,0,1,"json-KvStore","Key-value store specification."],KvStoreUrl:[23,0,1,"json-KvStoreUrl","URL representation of a key-value store."],MACOSX_DEPLOYMENT_TARGET:[19,9,1,"-",""],OutputIndexMap:[18,0,1,"json-OutputIndexMap","Specifies a transform from an input space to a single output index."],SSLKEYLOGFILE:[16,9,1,"-",""],Schema:[412,0,1,"json-Schema",""],TENSORSTORE_BAZELISK:[19,9,1,"-",""],TENSORSTORE_BAZEL_BUILD_OPTIONS:[19,9,1,"-",""],TENSORSTORE_BAZEL_COMPILATION_MODE:[19,9,1,"-",""],TENSORSTORE_BAZEL_STARTUP_OPTIONS:[19,9,1,"-",""],TENSORSTORE_CA_BUNDLE:[16,9,1,"-",""],TENSORSTORE_CA_PATH:[16,9,1,"-",""],TENSORSTORE_CURL_VERBOSE:[16,9,1,"-",""],TENSORSTORE_GCS_HTTP_URL:[16,9,1,"-",""],TENSORSTORE_GCS_REQUEST_CONCURRENCY:[16,9,1,"-",""],TENSORSTORE_PREBUILT_DIR:[19,9,1,"-",""],TENSORSTORE_SYSTEM_LIBS:[19,9,1,"-",""],TensorStore:[413,0,1,"json-TensorStore","Specifies a TensorStore to open/create."],Unit:[412,0,1,"json-Unit","Specifies a physical quantity/unit."],all_proxy:[16,9,1,"-",""],dtype:[413,0,1,"json-dtype","Specifies a TensorStore data type."],http_proxy:[16,9,1,"-",""],https_proxy:[16,9,1,"-",""],no_proxy:[16,9,1,"-",""]},"ChunkLayout/Grid":{aspect_ratio:[412,1,2,"json-ChunkLayout/Grid.aspect_ratio","Aspect ratio of the chunk shape."],aspect_ratio_soft_constraint:[412,1,2,"json-ChunkLayout/Grid.aspect_ratio_soft_constraint","Soft constraint on aspect ratio, lower precedence than aspect_ratio."],elements:[412,1,2,"json-ChunkLayout/Grid.elements","Preferred number of elements per chunk."],elements_soft_constraint:[412,1,2,"json-ChunkLayout/Grid.elements_soft_constraint","Preferred number of elements per chunk, lower precedence than\nelements."],shape:[412,1,2,"json-ChunkLayout/Grid.shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[412,1,2,"json-ChunkLayout/Grid.shape_soft_constraint","Preferred chunk sizes for each dimension."]},"Context.cache_pool":{queued_for_writeback_bytes_limit:[0,1,2,"json-Context.cache_pool.queued_for_writeback_bytes_limit",""],total_bytes_limit:[0,1,2,"json-Context.cache_pool.total_bytes_limit",""]},"Context.data_copy_concurrency":{limit:[0,1,2,"json-Context.data_copy_concurrency.limit",""]},"Context.file_io_concurrency":{limit:[0,1,2,"json-Context.file_io_concurrency.limit",""]},"Context.gcs_request_concurrency":{limit:[21,1,2,"json-Context.gcs_request_concurrency.limit",""]},"Context.gcs_request_retries":{initial_delay:[21,1,2,"json-Context.gcs_request_retries.initial_delay",""],max_delay:[21,1,2,"json-Context.gcs_request_retries.max_delay",""],max_retries:[21,1,2,"json-Context.gcs_request_retries.max_retries",""]},"Context.gcs_user_project":{project_id:[21,1,2,"json-Context.gcs_user_project.project_id","Google Cloud project id, e.g. \"my-project\".  The Google Cloud\naccount that is used must have appropriate permissions to bill to the\nspecified project."]},"Context.http_request_concurrency":{limit:[22,1,2,"json-Context.http_request_concurrency.limit",""]},"Context.http_request_retries":{initial_delay:[22,1,2,"json-Context.http_request_retries.initial_delay",""],max_delay:[22,1,2,"json-Context.http_request_retries.max_delay",""],max_retries:[22,1,2,"json-Context.http_request_retries.max_retries",""]},"driver/array":{array:[1,1,2,"json-driver/array.array","Nested array of rank equal to rank specifying the initial value."],context:[1,1,2,"json-driver/array.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[1,1,2,"json-driver/array.data_copy_concurrency",""],driver:[1,1,2,"json-driver/array.driver",""],dtype:[1,1,2,"json-driver/array.dtype","Specifies the data type."],rank:[1,1,2,"json-driver/array.rank","Specifies the rank of the TensorStore."],schema:[1,1,2,"json-driver/array.schema","Specifies constraints on the schema."],transform:[1,1,2,"json-driver/array.transform","Specifies a transform."]},"driver/avif":{cache_pool:[4,1,2,"json-driver/avif.cache_pool",""],context:[4,1,2,"json-driver/avif.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[4,1,2,"json-driver/avif.data_copy_concurrency",""],driver:[4,1,2,"json-driver/avif.driver",""],dtype:[4,1,2,"json-driver/avif.dtype",""],kvstore:[4,1,2,"json-driver/avif.kvstore",""],quantizer:[4,1,2,"json-driver/avif.quantizer",""],rank:[4,1,2,"json-driver/avif.rank","Specifies the rank of the TensorStore."],schema:[4,1,2,"json-driver/avif.schema","Specifies constraints on the schema."],speed:[4,1,2,"json-driver/avif.speed",""],transform:[4,1,2,"json-driver/avif.transform","Specifies a transform."]},"driver/bmp":{cache_pool:[5,1,2,"json-driver/bmp.cache_pool",""],context:[5,1,2,"json-driver/bmp.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[5,1,2,"json-driver/bmp.data_copy_concurrency",""],driver:[5,1,2,"json-driver/bmp.driver",""],dtype:[5,1,2,"json-driver/bmp.dtype",""],kvstore:[5,1,2,"json-driver/bmp.kvstore",""],rank:[5,1,2,"json-driver/bmp.rank","Specifies the rank of the TensorStore."],schema:[5,1,2,"json-driver/bmp.schema","Specifies constraints on the schema."],transform:[5,1,2,"json-driver/bmp.transform","Specifies a transform."]},"driver/cast":{base:[2,1,2,"json-driver/cast.base","Base TensorStore to convert."],context:[2,1,2,"json-driver/cast.context","Specifies context resources that augment/override the parent context."],driver:[2,1,2,"json-driver/cast.driver",""],dtype:[2,1,2,"json-driver/cast.dtype","Specifies the data type under which to view the base TensorStore."],rank:[2,1,2,"json-driver/cast.rank","Specifies the rank of the TensorStore."],schema:[2,1,2,"json-driver/cast.schema","Specifies constraints on the schema."],transform:[2,1,2,"json-driver/cast.transform","Specifies a transform."]},"driver/downsample":{base:[3,1,2,"json-driver/downsample.base","Base TensorStore to downsample."],context:[3,1,2,"json-driver/downsample.context","Specifies context resources that augment/override the parent context."],downsample_factors:[3,1,2,"json-driver/downsample.downsample_factors",""],downsample_method:[3,1,2,"json-driver/downsample.downsample_method",""],driver:[3,1,2,"json-driver/downsample.driver",""],dtype:[3,1,2,"json-driver/downsample.dtype","Specifies the data type."],rank:[3,1,2,"json-driver/downsample.rank","Specifies the rank of the TensorStore."],schema:[3,1,2,"json-driver/downsample.schema","Specifies constraints on the schema."],transform:[3,1,2,"json-driver/downsample.transform","Specifies a transform."]},"driver/jpeg":{cache_pool:[6,1,2,"json-driver/jpeg.cache_pool",""],context:[6,1,2,"json-driver/jpeg.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[6,1,2,"json-driver/jpeg.data_copy_concurrency",""],driver:[6,1,2,"json-driver/jpeg.driver",""],dtype:[6,1,2,"json-driver/jpeg.dtype",""],kvstore:[6,1,2,"json-driver/jpeg.kvstore",""],quality:[6,1,2,"json-driver/jpeg.quality",""],rank:[6,1,2,"json-driver/jpeg.rank","Specifies the rank of the TensorStore."],schema:[6,1,2,"json-driver/jpeg.schema","Specifies constraints on the schema."],transform:[6,1,2,"json-driver/jpeg.transform","Specifies a transform."]},"driver/json":{cache_pool:[11,1,2,"json-driver/json.cache_pool",""],context:[11,1,2,"json-driver/json.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[11,1,2,"json-driver/json.data_copy_concurrency",""],driver:[11,1,2,"json-driver/json.driver",""],dtype:[11,1,2,"json-driver/json.dtype",""],json_pointer:[11,1,2,"json-driver/json.json_pointer",""],kvstore:[11,1,2,"json-driver/json.kvstore",""],path:[11,1,2,"json-driver/json.path","Additional path to the JSON file within the KvStore specified by\nkvstore."],rank:[11,1,2,"json-driver/json.rank",""],recheck_cached_data:[11,1,2,"json-driver/json.recheck_cached_data",""],schema:[11,1,2,"json-driver/json.schema","Specifies constraints on the schema."],transform:[11,1,2,"json-driver/json.transform","Specifies a transform."]},"driver/n5":{assume_metadata:[12,1,2,"json-driver/n5.assume_metadata",""],cache_pool:[12,1,2,"json-driver/n5.cache_pool",""],context:[12,1,2,"json-driver/n5.context","Specifies context resources that augment/override the parent context."],create:[12,1,2,"json-driver/n5.create",""],data_copy_concurrency:[12,1,2,"json-driver/n5.data_copy_concurrency",""],delete_existing:[12,1,2,"json-driver/n5.delete_existing",""],driver:[12,1,2,"json-driver/n5.driver",""],dtype:[12,1,2,"json-driver/n5.dtype","Specifies the data type."],kvstore:[12,1,2,"json-driver/n5.kvstore",""],metadata:[12,1,2,"json-driver/n5.metadata","N5 array metadata."],open:[12,1,2,"json-driver/n5.open",""],path:[12,1,2,"json-driver/n5.path","Additional path within the KvStore specified by\nkvstore."],rank:[12,1,2,"json-driver/n5.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[12,1,2,"json-driver/n5.recheck_cached_data",""],recheck_cached_metadata:[12,1,2,"json-driver/n5.recheck_cached_metadata",""],schema:[12,1,2,"json-driver/n5.schema","Specifies constraints on the schema."],transform:[12,1,2,"json-driver/n5.transform","Specifies a transform."]},"driver/n5.metadata":{axes:[12,1,2,"json-driver/n5.metadata.axes","Specifies a label for each dimension of the dataset."],blockSize:[12,1,2,"json-driver/n5.metadata.blockSize","Chunk dimensions."],compression:[12,1,2,"json-driver/n5.metadata.compression","Specifies the chunk compression method."],dataType:[12,1,2,"json-driver/n5.metadata.dataType","Specifies the data type."],dimensions:[12,1,2,"json-driver/n5.metadata.dimensions","Dimensions of the dataset."],resolution:[12,1,2,"json-driver/n5.metadata.resolution","Specifies the multiplier for the physical units."],units:[12,1,2,"json-driver/n5.metadata.units","Specifies the base physical unit for each dimension."]},"driver/n5/Codec":{compression:[12,1,2,"json-driver/n5/Codec.compression","Specifies the chunk compression method."],driver:[12,1,2,"json-driver/n5/Codec.driver",""]},"driver/n5/Compression":{type:[12,1,2,"json-driver/n5/Compression.type",""]},"driver/n5/Compression/blosc":{clevel:[12,1,2,"json-driver/n5/Compression/blosc.clevel","Specifies the Blosc compression level to use."],cname:[12,1,2,"json-driver/n5/Compression/blosc.cname",""],shuffle:[12,1,2,"json-driver/n5/Compression/blosc.shuffle",""],type:[12,1,2,"json-driver/n5/Compression/blosc.type",""]},"driver/n5/Compression/bzip2":{blockSize:[12,1,2,"json-driver/n5/Compression/bzip2.blockSize","Specifies the bzip2 block size to use (in units of 100KB), which also determine the compression level."],type:[12,1,2,"json-driver/n5/Compression/bzip2.type",""]},"driver/n5/Compression/gzip":{level:[12,1,2,"json-driver/n5/Compression/gzip.level","Specifies the zlib compression level to use."],type:[12,1,2,"json-driver/n5/Compression/gzip.type",""],useZlib:[12,1,2,"json-driver/n5/Compression/gzip.useZlib",""]},"driver/n5/Compression/raw":{type:[12,1,2,"json-driver/n5/Compression/raw.type",""]},"driver/n5/Compression/xz":{preset:[12,1,2,"json-driver/n5/Compression/xz.preset",""],type:[12,1,2,"json-driver/n5/Compression/xz.type",""]},"driver/neuroglancer_precomputed":{assume_metadata:[13,1,2,"json-driver/neuroglancer_precomputed.assume_metadata",""],cache_pool:[13,1,2,"json-driver/neuroglancer_precomputed.cache_pool",""],context:[13,1,2,"json-driver/neuroglancer_precomputed.context","Specifies context resources that augment/override the parent context."],create:[13,1,2,"json-driver/neuroglancer_precomputed.create",""],data_copy_concurrency:[13,1,2,"json-driver/neuroglancer_precomputed.data_copy_concurrency",""],delete_existing:[13,1,2,"json-driver/neuroglancer_precomputed.delete_existing",""],driver:[13,1,2,"json-driver/neuroglancer_precomputed.driver",""],dtype:[13,1,2,"json-driver/neuroglancer_precomputed.dtype","Specifies the data type."],kvstore:[13,1,2,"json-driver/neuroglancer_precomputed.kvstore",""],multiscale_metadata:[13,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata","Scale-independent metadata."],open:[13,1,2,"json-driver/neuroglancer_precomputed.open",""],path:[13,1,2,"json-driver/neuroglancer_precomputed.path","Additional path within the KvStore specified by\nkvstore."],rank:[13,1,2,"json-driver/neuroglancer_precomputed.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[13,1,2,"json-driver/neuroglancer_precomputed.recheck_cached_data",""],recheck_cached_metadata:[13,1,2,"json-driver/neuroglancer_precomputed.recheck_cached_metadata",""],scale_index:[13,1,2,"json-driver/neuroglancer_precomputed.scale_index","Zero-based index of the scale to open or create."],scale_metadata:[13,1,2,"json-driver/neuroglancer_precomputed.scale_metadata","Per-scale metadata."],schema:[13,1,2,"json-driver/neuroglancer_precomputed.schema","Specifies constraints on the schema."],transform:[13,1,2,"json-driver/neuroglancer_precomputed.transform","Specifies a transform."]},"driver/neuroglancer_precomputed.multiscale_metadata":{data_type:[13,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.data_type","Specifies the data type."],num_channels:[13,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.num_channels","Number of channels."],type:[13,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.type","Specifying the type of volume."]},"driver/neuroglancer_precomputed.scale_metadata":{chunk_size:[13,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.chunk_size","Chunk dimensions (XYZ order)."],compressed_segmentation_block_size:[13,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.compressed_segmentation_block_size","Block size for compressed segmentation encoding."],encoding:[13,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.encoding","Specifies the chunk encoding."],jpeg_quality:[13,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.jpeg_quality","JPEG encoding quality."],key:[13,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.key","Specifies the scale key (relative to path)."],resolution:[13,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.resolution","Voxel size in nanometers (XYZ order)."],sharding:[13,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.sharding",""],size:[13,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.size","Voxel dimensions of the volume (XYZ order)."],voxel_offset:[13,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.voxel_offset","Voxel origin of the volume (XYZ order)."]},"driver/neuroglancer_precomputed/Codec":{driver:[13,1,2,"json-driver/neuroglancer_precomputed/Codec.driver",""],encoding:[13,1,2,"json-driver/neuroglancer_precomputed/Codec.encoding","Specifies the chunk encoding."],jpeg_quality:[13,1,2,"json-driver/neuroglancer_precomputed/Codec.jpeg_quality","JPEG encoding quality."],shard_data_encoding:[13,1,2,"json-driver/neuroglancer_precomputed/Codec.shard_data_encoding","Additional data compression when using the sharded format."]},"driver/png":{cache_pool:[7,1,2,"json-driver/png.cache_pool",""],compression_level:[7,1,2,"json-driver/png.compression_level",""],context:[7,1,2,"json-driver/png.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[7,1,2,"json-driver/png.data_copy_concurrency",""],driver:[7,1,2,"json-driver/png.driver",""],dtype:[7,1,2,"json-driver/png.dtype",""],kvstore:[7,1,2,"json-driver/png.kvstore",""],rank:[7,1,2,"json-driver/png.rank","Specifies the rank of the TensorStore."],schema:[7,1,2,"json-driver/png.schema","Specifies constraints on the schema."],transform:[7,1,2,"json-driver/png.transform","Specifies a transform."]},"driver/stack":{context:[14,1,2,"json-driver/stack.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[14,1,2,"json-driver/stack.data_copy_concurrency",""],driver:[14,1,2,"json-driver/stack.driver",""],dtype:[14,1,2,"json-driver/stack.dtype","Specifies the data type."],layers:[14,1,2,"json-driver/stack.layers","Array of layered tensorstore drivers."],rank:[14,1,2,"json-driver/stack.rank","Specifies the rank of the TensorStore."],schema:[14,1,2,"json-driver/stack.schema","Specifies constraints on the schema."],transform:[14,1,2,"json-driver/stack.transform","Specifies a transform."]},"driver/tiff":{cache_pool:[8,1,2,"json-driver/tiff.cache_pool",""],context:[8,1,2,"json-driver/tiff.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[8,1,2,"json-driver/tiff.data_copy_concurrency",""],driver:[8,1,2,"json-driver/tiff.driver",""],dtype:[8,1,2,"json-driver/tiff.dtype",""],kvstore:[8,1,2,"json-driver/tiff.kvstore",""],page:[8,1,2,"json-driver/tiff.page",""],rank:[8,1,2,"json-driver/tiff.rank","Specifies the rank of the TensorStore."],schema:[8,1,2,"json-driver/tiff.schema","Specifies constraints on the schema."],transform:[8,1,2,"json-driver/tiff.transform","Specifies a transform."]},"driver/webp":{cache_pool:[9,1,2,"json-driver/webp.cache_pool",""],context:[9,1,2,"json-driver/webp.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[9,1,2,"json-driver/webp.data_copy_concurrency",""],driver:[9,1,2,"json-driver/webp.driver",""],dtype:[9,1,2,"json-driver/webp.dtype",""],kvstore:[9,1,2,"json-driver/webp.kvstore",""],lossless:[9,1,2,"json-driver/webp.lossless",""],quality:[9,1,2,"json-driver/webp.quality",""],rank:[9,1,2,"json-driver/webp.rank","Specifies the rank of the TensorStore."],schema:[9,1,2,"json-driver/webp.schema","Specifies constraints on the schema."],transform:[9,1,2,"json-driver/webp.transform","Specifies a transform."]},"driver/zarr":{assume_metadata:[15,1,2,"json-driver/zarr.assume_metadata",""],cache_pool:[15,1,2,"json-driver/zarr.cache_pool",""],context:[15,1,2,"json-driver/zarr.context","Specifies context resources that augment/override the parent context."],create:[15,1,2,"json-driver/zarr.create",""],data_copy_concurrency:[15,1,2,"json-driver/zarr.data_copy_concurrency",""],delete_existing:[15,1,2,"json-driver/zarr.delete_existing",""],driver:[15,1,2,"json-driver/zarr.driver",""],dtype:[15,1,2,"json-driver/zarr.dtype","Specifies the data type."],field:[15,1,2,"json-driver/zarr.field","Name of field to open."],key_encoding:[15,1,2,"json-driver/zarr.key_encoding","Specifies the encoding of chunk indices into key-value store keys."],kvstore:[15,1,2,"json-driver/zarr.kvstore",""],metadata:[15,1,2,"json-driver/zarr.metadata","Zarr array metadata."],metadata_key:[15,1,2,"json-driver/zarr.metadata_key","Specifies the key under which to store the array metadata in JSON format."],open:[15,1,2,"json-driver/zarr.open",""],path:[15,1,2,"json-driver/zarr.path","Additional path within the KvStore specified by\nkvstore."],rank:[15,1,2,"json-driver/zarr.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[15,1,2,"json-driver/zarr.recheck_cached_data",""],recheck_cached_metadata:[15,1,2,"json-driver/zarr.recheck_cached_metadata",""],schema:[15,1,2,"json-driver/zarr.schema","Specifies constraints on the schema."],transform:[15,1,2,"json-driver/zarr.transform","Specifies a transform."]},"driver/zarr.metadata":{chunks:[15,1,2,"json-driver/zarr.metadata.chunks","Chunk dimensions."],compressor:[15,1,2,"json-driver/zarr.metadata.compressor","Specifies the chunk compression method."],dimension_separator:[15,1,2,"json-driver/zarr.metadata.dimension_separator","Specifies the encoding of chunk indices into key-value store keys."],dtype:[15,1,2,"json-driver/zarr.metadata.dtype","Specifies the scalar or structured data type."],fill_value:[15,1,2,"json-driver/zarr.metadata.fill_value","Specifies the fill value."],filters:[15,1,2,"json-driver/zarr.metadata.filters","Specifies the filters to apply to chunks."],order:[15,1,2,"json-driver/zarr.metadata.order","Specifies the data layout for encoded chunks."],shape:[15,1,2,"json-driver/zarr.metadata.shape","Chunked dimensions of the array."],zarr_format:[15,1,2,"json-driver/zarr.metadata.zarr_format",""]},"driver/zarr/Codec":{compressor:[15,1,2,"json-driver/zarr/Codec.compressor","Specifies the chunk compression method."],driver:[15,1,2,"json-driver/zarr/Codec.driver",""],filters:[15,1,2,"json-driver/zarr/Codec.filters","Specifies the filters to apply to chunks."]},"driver/zarr/Compressor":{id:[15,1,2,"json-driver/zarr/Compressor.id",""]},"driver/zarr/Compressor/blosc":{blocksize:[15,1,2,"json-driver/zarr/Compressor/blosc.blocksize","Specifies the Blosc blocksize."],clevel:[15,1,2,"json-driver/zarr/Compressor/blosc.clevel","Specifies the Blosc compression level to use."],cname:[15,1,2,"json-driver/zarr/Compressor/blosc.cname",""],id:[15,1,2,"json-driver/zarr/Compressor/blosc.id",""],shuffle:[15,1,2,"json-driver/zarr/Compressor/blosc.shuffle",""]},"driver/zarr/Compressor/bz2":{id:[15,1,2,"json-driver/zarr/Compressor/bz2.id",""],level:[15,1,2,"json-driver/zarr/Compressor/bz2.level","Specifies the bzip2 buffer size/compression level to use."]},"driver/zarr/Compressor/zlib":{id:[15,1,2,"json-driver/zarr/Compressor/zlib.id",""],level:[15,1,2,"json-driver/zarr/Compressor/zlib.level","Specifies the zlib compression level to use."]},"kvstore/file":{context:[20,1,2,"json-kvstore/file.context",""],driver:[20,1,2,"json-kvstore/file.driver",""],file_io_concurrency:[20,1,2,"json-kvstore/file.file_io_concurrency",""],path:[20,1,2,"json-kvstore/file.path","Path to root directory on local filesystem."]},"kvstore/gcs":{bucket:[21,1,2,"json-kvstore/gcs.bucket","Google Cloud Storage bucket to use."],context:[21,1,2,"json-kvstore/gcs.context",""],driver:[21,1,2,"json-kvstore/gcs.driver",""],gcs_request_concurrency:[21,1,2,"json-kvstore/gcs.gcs_request_concurrency",""],gcs_request_retries:[21,1,2,"json-kvstore/gcs.gcs_request_retries",""],gcs_user_project:[21,1,2,"json-kvstore/gcs.gcs_user_project",""],path:[21,1,2,"json-kvstore/gcs.path","Key prefix within the key-value store."]},"kvstore/http":{base_url:[22,1,2,"json-kvstore/http.base_url","Base URL."],context:[22,1,2,"json-kvstore/http.context",""],driver:[22,1,2,"json-kvstore/http.driver",""],headers:[22,1,2,"json-kvstore/http.headers","Additional HTTP headers to send with every request."],http_request_concurrency:[22,1,2,"json-kvstore/http.http_request_concurrency",""],http_request_retries:[22,1,2,"json-kvstore/http.http_request_retries",""],path:[22,1,2,"json-kvstore/http.path","Path relative to base_url."]},"kvstore/memory":{atomic:[24,1,2,"json-kvstore/memory.atomic",""],context:[24,1,2,"json-kvstore/memory.context",""],driver:[24,1,2,"json-kvstore/memory.driver",""],memory_key_value_store:[24,1,2,"json-kvstore/memory.memory_key_value_store",""],path:[24,1,2,"json-kvstore/memory.path","Key prefix within the key-value store."]},"kvstore/neuroglancer_uint64_sharded":{base:[25,1,2,"json-kvstore/neuroglancer_uint64_sharded.base","Underlying key-value store."],cache_pool:[25,1,2,"json-kvstore/neuroglancer_uint64_sharded.cache_pool",""],context:[25,1,2,"json-kvstore/neuroglancer_uint64_sharded.context",""],data_copy_concurrency:[25,1,2,"json-kvstore/neuroglancer_uint64_sharded.data_copy_concurrency",""],driver:[25,1,2,"json-kvstore/neuroglancer_uint64_sharded.driver",""],metadata:[25,1,2,"json-kvstore/neuroglancer_uint64_sharded.metadata","Specifies the sharding format."],path:[25,1,2,"json-kvstore/neuroglancer_uint64_sharded.path","Key prefix within the key-value store."]},"kvstore/neuroglancer_uint64_sharded/ShardingSpec":{"@type":[25,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.@type",""],data_encoding:[25,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.data_encoding","Specifies the encoding of the data chunks."],hash:[25,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.hash","Specifies the hash function used to map chunk IDs to shards."],minishard_bits:[25,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.minishard_bits","Number of bits of the hashed chunk ID that determine the minishard number."],minishard_index_encoding:[25,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.minishard_index_encoding","Specifies the encoding of the minishard index."],preshift_bits:[25,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.preshift_bits","Number of low-order bits of the chunk ID that do not contribute to the hashed chunk ID."],shard_bits:[25,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.shard_bits","Number of bits of the hashed chunk ID that determine the shard number."]},"tensorstore.ChunkLayout":{"__init__(components)":[43,3,1,"","Constructs from component parts."],"__init__(json)":[44,3,1,"","Constructs from the JSON representation."],Grid:[28,2,1,"","Describes a regular grid layout for write/read/codec chunks."],__eq__:[42,3,1,"","Compares two chunk layouts for equality."],codec_chunk:[45,5,1,"","Chunk grid used by the codec."],grid_origin:[46,5,1,"","Hard constraints on the grid origin."],grid_origin_soft_constraint:[47,5,1,"","Soft constraints on the grid origin."],inner_order:[48,5,1,"","Permutation specifying the element storage order within the innermost chunks."],inner_order_soft_constraint:[49,5,1,"","Permutation specifying soft constraint on the element storage order."],ndim:[50,5,1,"","Alias for rank."],rank:[51,5,1,"","Number of dimensions in the index space."],read_chunk:[52,5,1,"","Chunk grid for efficient reads."],read_chunk_template:[53,5,1,"","Chunk offset and shape for efficient reads."],to_json:[54,3,1,"","Converts to the JSON representation."],update:[55,3,1,"","Adds additional constraints."],write_chunk:[56,5,1,"","Chunk grid for efficient writes."],write_chunk_template:[57,5,1,"","Chunk offset and shape for efficient writes."]},"tensorstore.ChunkLayout.Grid":{"__init__(components)":[30,3,1,"","Constructs a chunk grid."],"__init__(json)":[31,3,1,"","Constructs from the JSON representation."],__eq__:[29,3,1,"","Compares two chunk grids for equality."],aspect_ratio:[32,5,1,"","Chunk shape aspect ratio."],aspect_ratio_soft_constraint:[33,5,1,"","Soft constraints on chunk shape aspect ratio."],elements:[34,5,1,"","Target number of elements per chunk."],elements_soft_constraint:[35,5,1,"","Soft constraint on target number of elements per chunk."],ndim:[36,5,1,"","Alias for rank."],rank:[37,5,1,"","Number of dimensions, or None if unspecified."],shape:[38,5,1,"","Hard constraints on chunk shape."],shape_soft_constraint:[39,5,1,"","Soft constraints on chunk shape."],to_json:[40,3,1,"","Converts to the JSON representation."],update:[41,3,1,"","Adds additional constraints."]},"tensorstore.ChunkLayout.Grid.__init__(components)":{aspect_ratio:[30,4,2,"p-aspect_ratio","Aspect ratio for each dimension."],aspect_ratio_soft_constraint:[30,4,2,"p-aspect_ratio_soft_constraint","Soft constraints on the aspect ratio for each dimension."],elements:[30,4,2,"p-elements","Target number of elements per chunk."],elements_soft_constraint:[30,4,2,"p-elements_soft_constraint","Soft constraint on the target number of elements per chunk."],grid:[30,4,2,"p-grid","Other grid constraints to merge in."],grid_soft_constraint:[30,4,2,"p-grid_soft_constraint","Other grid constraints to merge in as soft constraints."],rank:[30,4,2,"p-rank","Specifies the number of dimensions."],shape:[30,4,2,"p-shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[30,4,2,"p-shape_soft_constraint","Soft constraints on the chunk size for each dimension."]},"tensorstore.ChunkLayout.Grid.update":{aspect_ratio:[41,4,2,"p-aspect_ratio","Aspect ratio for each dimension."],aspect_ratio_soft_constraint:[41,4,2,"p-aspect_ratio_soft_constraint","Soft constraints on the aspect ratio for each dimension."],elements:[41,4,2,"p-elements","Target number of elements per chunk."],elements_soft_constraint:[41,4,2,"p-elements_soft_constraint","Soft constraint on the target number of elements per chunk."],grid:[41,4,2,"p-grid","Other grid constraints to merge in."],grid_soft_constraint:[41,4,2,"p-grid_soft_constraint","Other grid constraints to merge in as soft constraints."],rank:[41,4,2,"p-rank","Specifies the number of dimensions."],shape:[41,4,2,"p-shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[41,4,2,"p-shape_soft_constraint","Soft constraints on the chunk size for each dimension."]},"tensorstore.ChunkLayout.__init__(components)":{chunk:[43,4,2,"p-chunk","Common constraints on write, read, and codec chunks."],chunk_aspect_ratio:[43,4,2,"p-chunk_aspect_ratio","Hard constraints on the write, read, and codec chunk aspect ratio."],chunk_aspect_ratio_soft_constraint:[43,4,2,"p-chunk_aspect_ratio_soft_constraint","Soft constraints on the write, read, and codec chunk aspect ratio."],chunk_elements:[43,4,2,"p-chunk_elements","Hard constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON elements member of\nChunkLayout.chunk."],chunk_elements_soft_constraint:[43,4,2,"p-chunk_elements_soft_constraint","Soft constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON\nelements_soft_constraint member of\nChunkLayout.chunk."],chunk_shape:[43,4,2,"p-chunk_shape","Hard constraints on both the write and read chunk shape."],chunk_shape_soft_constraint:[43,4,2,"p-chunk_shape_soft_constraint","Soft constraints on both the write and read chunk shape."],codec_chunk:[43,4,2,"p-codec_chunk","Constraints on codec chunks."],codec_chunk_aspect_ratio:[43,4,2,"p-codec_chunk_aspect_ratio","Soft constraints on the codec chunk aspect ratio."],codec_chunk_aspect_ratio_soft_constraint:[43,4,2,"p-codec_chunk_aspect_ratio_soft_constraint","Soft constraints on the codec chunk aspect ratio."],codec_chunk_elements:[43,4,2,"p-codec_chunk_elements","Hard constraints on the target number of elements for codec chunks."],codec_chunk_elements_soft_constraint:[43,4,2,"p-codec_chunk_elements_soft_constraint","Soft constraints on the target number of elements for codec chunks."],codec_chunk_shape:[43,4,2,"p-codec_chunk_shape","Soft constraints on the codec chunk shape."],codec_chunk_shape_soft_constraint:[43,4,2,"p-codec_chunk_shape_soft_constraint","Soft constraints on the codec chunk shape."],finalize:[43,4,2,"p-finalize","Validates and converts the layout into a precise chunk\nlayout."],grid_origin:[43,4,2,"p-grid_origin","Hard constraints on the origin of the chunk grid.\nCorresponds to the JSON ChunkLayout.grid_origin member."],grid_origin_soft_constraint:[43,4,2,"p-grid_origin_soft_constraint","Soft constraints on the origin of the chunk grid."],inner_order:[43,4,2,"p-inner_order","Permutation specifying the element storage order within the innermost chunks.\nCorresponds to the JSON ChunkLayout.inner_order member."],inner_order_soft_constraint:[43,4,2,"p-inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint."],rank:[43,4,2,"p-rank","Specifies the number of dimensions."],read_chunk:[43,4,2,"p-read_chunk","Constraints on read chunks."],read_chunk_aspect_ratio:[43,4,2,"p-read_chunk_aspect_ratio","Hard constraints on the read chunk aspect ratio."],read_chunk_aspect_ratio_soft_constraint:[43,4,2,"p-read_chunk_aspect_ratio_soft_constraint","Soft constraints on the read chunk aspect ratio."],read_chunk_elements:[43,4,2,"p-read_chunk_elements","Hard constraints on the target number of elements for read chunks."],read_chunk_elements_soft_constraint:[43,4,2,"p-read_chunk_elements_soft_constraint","Soft constraints on the target number of elements for read chunks."],read_chunk_shape:[43,4,2,"p-read_chunk_shape","Hard constraints on the read chunk shape."],read_chunk_shape_soft_constraint:[43,4,2,"p-read_chunk_shape_soft_constraint","Soft constraints on the read chunk shape."],write_chunk:[43,4,2,"p-write_chunk","Constraints on write chunks."],write_chunk_aspect_ratio:[43,4,2,"p-write_chunk_aspect_ratio","Hard constraints on the write chunk aspect ratio."],write_chunk_aspect_ratio_soft_constraint:[43,4,2,"p-write_chunk_aspect_ratio_soft_constraint","Soft constraints on the write chunk aspect ratio."],write_chunk_elements:[43,4,2,"p-write_chunk_elements","Hard constraints on the target number of elements for write chunks."],write_chunk_elements_soft_constraint:[43,4,2,"p-write_chunk_elements_soft_constraint","Soft constraints on the target number of elements for write chunks."],write_chunk_shape:[43,4,2,"p-write_chunk_shape","Hard constraints on the write chunk shape."],write_chunk_shape_soft_constraint:[43,4,2,"p-write_chunk_shape_soft_constraint","Soft constraints on the write chunk shape."]},"tensorstore.ChunkLayout.update":{chunk:[55,4,2,"p-chunk","Common constraints on write, read, and codec chunks."],chunk_aspect_ratio:[55,4,2,"p-chunk_aspect_ratio","Hard constraints on the write, read, and codec chunk aspect ratio."],chunk_aspect_ratio_soft_constraint:[55,4,2,"p-chunk_aspect_ratio_soft_constraint","Soft constraints on the write, read, and codec chunk aspect ratio."],chunk_elements:[55,4,2,"p-chunk_elements","Hard constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON elements member of\nChunkLayout.chunk."],chunk_elements_soft_constraint:[55,4,2,"p-chunk_elements_soft_constraint","Soft constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON\nelements_soft_constraint member of\nChunkLayout.chunk."],chunk_shape:[55,4,2,"p-chunk_shape","Hard constraints on both the write and read chunk shape."],chunk_shape_soft_constraint:[55,4,2,"p-chunk_shape_soft_constraint","Soft constraints on both the write and read chunk shape."],codec_chunk:[55,4,2,"p-codec_chunk","Constraints on codec chunks."],codec_chunk_aspect_ratio:[55,4,2,"p-codec_chunk_aspect_ratio","Soft constraints on the codec chunk aspect ratio."],codec_chunk_aspect_ratio_soft_constraint:[55,4,2,"p-codec_chunk_aspect_ratio_soft_constraint","Soft constraints on the codec chunk aspect ratio."],codec_chunk_elements:[55,4,2,"p-codec_chunk_elements","Hard constraints on the target number of elements for codec chunks."],codec_chunk_elements_soft_constraint:[55,4,2,"p-codec_chunk_elements_soft_constraint","Soft constraints on the target number of elements for codec chunks."],codec_chunk_shape:[55,4,2,"p-codec_chunk_shape","Soft constraints on the codec chunk shape."],codec_chunk_shape_soft_constraint:[55,4,2,"p-codec_chunk_shape_soft_constraint","Soft constraints on the codec chunk shape."],finalize:[55,4,2,"p-finalize","Validates and converts the layout into a precise chunk\nlayout."],grid_origin:[55,4,2,"p-grid_origin","Hard constraints on the origin of the chunk grid.\nCorresponds to the JSON ChunkLayout.grid_origin member."],grid_origin_soft_constraint:[55,4,2,"p-grid_origin_soft_constraint","Soft constraints on the origin of the chunk grid."],inner_order:[55,4,2,"p-inner_order","Permutation specifying the element storage order within the innermost chunks.\nCorresponds to the JSON ChunkLayout.inner_order member."],inner_order_soft_constraint:[55,4,2,"p-inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint."],rank:[55,4,2,"p-rank","Specifies the number of dimensions."],read_chunk:[55,4,2,"p-read_chunk","Constraints on read chunks."],read_chunk_aspect_ratio:[55,4,2,"p-read_chunk_aspect_ratio","Hard constraints on the read chunk aspect ratio."],read_chunk_aspect_ratio_soft_constraint:[55,4,2,"p-read_chunk_aspect_ratio_soft_constraint","Soft constraints on the read chunk aspect ratio."],read_chunk_elements:[55,4,2,"p-read_chunk_elements","Hard constraints on the target number of elements for read chunks."],read_chunk_elements_soft_constraint:[55,4,2,"p-read_chunk_elements_soft_constraint","Soft constraints on the target number of elements for read chunks."],read_chunk_shape:[55,4,2,"p-read_chunk_shape","Hard constraints on the read chunk shape."],read_chunk_shape_soft_constraint:[55,4,2,"p-read_chunk_shape_soft_constraint","Soft constraints on the read chunk shape."],write_chunk:[55,4,2,"p-write_chunk","Constraints on write chunks."],write_chunk_aspect_ratio:[55,4,2,"p-write_chunk_aspect_ratio","Hard constraints on the write chunk aspect ratio."],write_chunk_aspect_ratio_soft_constraint:[55,4,2,"p-write_chunk_aspect_ratio_soft_constraint","Soft constraints on the write chunk aspect ratio."],write_chunk_elements:[55,4,2,"p-write_chunk_elements","Hard constraints on the target number of elements for write chunks."],write_chunk_elements_soft_constraint:[55,4,2,"p-write_chunk_elements_soft_constraint","Soft constraints on the target number of elements for write chunks."],write_chunk_shape:[55,4,2,"p-write_chunk_shape","Hard constraints on the write chunk shape."],write_chunk_shape_soft_constraint:[55,4,2,"p-write_chunk_shape_soft_constraint","Soft constraints on the write chunk shape."]},"tensorstore.CodecSpec":{__init__:[59,3,1,"","Constructs from the JSON representation."],to_json:[60,3,1,"","Converts to the JSON representation."]},"tensorstore.Context":{"__init__(default)":[68,3,1,"","Constructs a default context."],"__init__(json)":[69,3,1,"","Constructs a context from its JSON representation."],"__init__(spec)":[70,3,1,"","Constructs a context from a parsed spec."],Resource:[62,2,1,"","Handle to a context resource."],Spec:[64,2,1,"","Parsed representation of a JSON Context specification."],__getitem__:[67,3,1,"","Creates or retrieves the context resource for the given key."],parent:[71,5,1,"","Parent context from which this context inherits."],spec:[72,5,1,"","Spec from which this context was constructed."]},"tensorstore.Context.Resource":{to_json:[63,3,1,"","Returns the JSON representation of the context resource."]},"tensorstore.Context.Spec":{__init__:[65,3,1,"","Creates a context specification from its JSON representation."],to_json:[66,3,1,"","Returns the JSON representation."]},"tensorstore.Context.Spec.to_json":{include_defaults:[66,4,2,"p-include_defaults","Indicates whether to include members even if they are equal to the default value."]},"tensorstore.Context.__getitem__":{key:[67,4,2,"p-key","Resource key, of the form '<resource-type>' or\n<resource-type>#<id>."]},"tensorstore.Context.__init__(json)":{json:[69,4,2,"p-json","JSON representation of the context."],parent:[69,4,2,"p-parent","Parent context from which to inherit."]},"tensorstore.Context.__init__(spec)":{parent:[70,4,2,"p-parent","Parent context from which to inherit."],spec:[70,4,2,"p-spec","Parsed context spec."]},"tensorstore.Dim":{"__contains__(dim)":[74,3,1,"","Checks if the interval contains another interval."],"__contains__(index)":[75,3,1,"","Checks if the interval contains a given index."],"__init__(exclusive_max)":[77,3,1,"","Constructs a half-open interval [inclusive_min, exclusive_max)`."],"__init__(inclusive_max)":[78,3,1,"","Constructs a closed interval [inclusive_min, inclusive_max]."],"__init__(size)":[79,3,1,"","Constructs a sized interval [inclusive_min, inclusive_min+size)."],"__init__(unbounded)":[80,3,1,"","Constructs an unbounded interval (-inf, +inf)."],__eq__:[76,3,1,"","Compares for equality with another interval."],__iter__:[81,3,1,"","Enables iteration over the indices contained in the interval."],__len__:[82,3,1,"","Size of the interval, equivalent to size."],__repr__:[83,3,1,"","Returns the string representation as a Python expression."],__str__:[84,3,1,"","Returns the string representation of the interval."],empty:[85,5,1,"","Returns True if size is zero."],exclusive_max:[86,5,1,"","Exclusive upper bound of the interval."],exclusive_min:[87,5,1,"","Exclusive lower bound of the interval."],finite:[88,5,1,"","Indicates if the interval is finite."],hull:[89,3,1,"","Hull with another Dim."],implicit_lower:[90,5,1,"","Indicates if the lower bound is implicit/resizeable."],implicit_upper:[91,5,1,"","Indicates if the upper bound is implicit/resizeable."],inclusive_max:[92,5,1,"","Inclusive upper bound of the interval."],inclusive_min:[93,5,1,"","Inclusive lower bound of the interval."],intersect:[94,3,1,"","Intersect with another Dim."],label:[95,5,1,"","Dimension label, or the empty string to indicate an unlabeled dimension."],size:[96,5,1,"","Size of the interval."]},"tensorstore.Dim.__init__(exclusive_max)":{exclusive_max:[77,4,2,"p-exclusive_max","Exclusive upper bound."],implicit_lower:[77,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[77,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_min:[77,4,2,"p-inclusive_min","Inclusive lower bound."],label:[77,4,2,"p-label","Dimension label."]},"tensorstore.Dim.__init__(inclusive_max)":{implicit_lower:[78,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[78,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_max:[78,4,2,"p-inclusive_max","Inclusive upper bound."],inclusive_min:[78,4,2,"p-inclusive_min","Inclusive lower bound."],label:[78,4,2,"p-label","Dimension label."]},"tensorstore.Dim.__init__(size)":{implicit_lower:[79,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[79,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_min:[79,4,2,"p-inclusive_min","Inclusive lower bound."],label:[79,4,2,"p-label","Dimension label."],size:[79,4,2,"p-size","Size of the interval."]},"tensorstore.Dim.__init__(unbounded)":{implicit_lower:[80,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[80,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],label:[80,4,2,"p-label","Dimension label."]},"tensorstore.Dim.hull":{other:[89,4,2,"p-other","Object to hull with."]},"tensorstore.Dim.intersect":{other:[94,4,2,"p-other","Object to intersect with."]},"tensorstore.DimExpression":{__getitem__:[98,3,1,"","Applies a NumPy-style indexing operation with default index array semantics."],diagonal:[99,5,1,"","Extracts the diagonal of the selected dimensions."],label:[100,3,1,"","Sets (or changes) the labels of the selected dimensions."],oindex:[101,3,1,"","Applies a NumPy-style indexing operation with outer indexing semantics."],stride:[102,3,1,"","Strides the domains of the selected input dimensions by the specified amounts."],translate_backward_by:[103,3,1,"","Translates (shifts) the domains of the selected input dimensions backward by the\nspecified offsets, without affecting the output range."],translate_by:[104,3,1,"","Translates (shifts) the domains of the selected input dimensions by the\nspecified offsets, without affecting the output range."],translate_to:[105,3,1,"","Translates the domains of the selected input dimensions to the specified\norigins without affecting the output range."],transpose:[106,3,1,"","Transposes the selected dimensions to the specified target indices."],vindex:[107,3,1,"","Applies a NumPy-style indexing operation with vectorized indexing semantics."]},"tensorstore.DimExpression.label":{labels:[100,4,2,"p-labels","Dimension labels for each selected dimension."]},"tensorstore.DimExpression.stride":{strides:[102,4,2,"p-strides","Strides for each selected dimension."]},"tensorstore.DimExpression.translate_backward_by":{offsets:[103,4,2,"p-offsets","The offsets for each of the selected dimensions."]},"tensorstore.DimExpression.translate_by":{offsets:[104,4,2,"p-offsets","The offsets for each of the selected dimensions."]},"tensorstore.DimExpression.translate_to":{origins:[105,4,2,"p-origins","The new origins for each of the selected dimensions."]},"tensorstore.DimExpression.transpose":{target:[106,4,2,"p-target","Target dimension indices for the selected dimensions."]},"tensorstore.Future":{__new__:[109,3,1,"","Converts a FutureLike object to a Future."],add_done_callback:[110,3,1,"","Registers a callback to be invoked upon completion of the asynchronous operation."],cancel:[111,3,1,"","Requests cancellation of the asynchronous operation."],cancelled:[112,3,1,"","Queries whether the asynchronous operation has been cancelled."],done:[113,3,1,"","Queries whether the asynchronous operation has completed or been cancelled."],exception:[114,3,1,"","Blocks until asynchronous operation completes, and returns the error if any."],force:[115,3,1,"","Ensures the asynchronous operation begins executing."],remove_done_callback:[116,3,1,"","Unregisters a previously-registered callback."],result:[117,3,1,"","Blocks until the asynchronous operation completes, and returns the result."]},"tensorstore.Future.__new__":{future:[109,4,2,"p-future","Specifies the immediate or asynchronous result."],loop:[109,4,2,"p-loop","Event loop on which to run future if it is a\ncoroutine."]},"tensorstore.Future.exception":{deadline:[114,4,2,"p-deadline","Deadline in seconds since the Unix epoch."],timeout:[114,4,2,"p-timeout","Maximum number of seconds to block."]},"tensorstore.Future.result":{deadline:[117,4,2,"p-deadline","Deadline in seconds since the Unix epoch."],timeout:[117,4,2,"p-timeout","Maximum number of seconds to block."]},"tensorstore.IndexDomain":{"__getitem__(domain)":[120,3,1,"","Slices this domain by another domain."],"__getitem__(expr)":[121,3,1,"","Transforms the domain by a dimension expression."],"__getitem__(identifier)":[122,3,1,"","Returns the single dimension specified by identifier."],"__getitem__(selection)":[123,3,1,"","Returns a new domain with a subset of the dimensions."],"__getitem__(transform)":[124,3,1,"","Transforms the domain using an explicit index transform."],"__init__(components)":[125,3,1,"","Constructs an index domain from component vectors."],"__init__(dimensions)":[126,3,1,"","Constructs an index domain from a :py:class`.Dim` sequence."],"__init__(json)":[127,3,1,"","Constructs an index domain from its JSON representation."],__len__:[128,3,1,"","Returns the number of dimensions (rank)."],__repr__:[129,3,1,"","Returns the string representation."],exclusive_max:[130,5,1,"","Exclusive upper bound of the domain."],hull:[131,3,1,"","Computes the hull (minimum containing box) with another domain."],implicit_lower_bounds:[132,5,1,"","Indicates whether the lower bound of each dimension is implicit or explicit."],implicit_upper_bounds:[133,5,1,"","Indicates whether the upper bound of each dimension is implicit or explicit."],inclusive_max:[134,5,1,"","Inclusive upper bound of the domain."],inclusive_min:[135,5,1,"","Inclusive lower bound of the domain, alias of origin."],index_exp:[136,5,1,"","Equivalent NumPy-compatible index expression."],intersect:[137,3,1,"","Intersects with another domain."],labels:[138,5,1,"","Dimension labels for each dimension."],ndim:[139,5,1,"","Alias for rank."],origin:[140,5,1,"","Inclusive lower bound of the domain."],rank:[141,5,1,"","Number of dimensions in the index space."],shape:[142,5,1,"","Shape of the domain."],size:[143,5,1,"","Total number of elements in the domain."],to_json:[144,3,1,"","Returns the JSON representation."]},"tensorstore.IndexDomain.__getitem__(expr)":{expr:[121,4,2,"p-expr","Dimension expression to apply."]},"tensorstore.IndexDomain.__getitem__(identifier)":{identifier:[122,4,2,"p-identifier","Specifies a dimension by integer index or label."]},"tensorstore.IndexDomain.__getitem__(selection)":{selection:[123,4,2,"p-selection","Specifies the dimensions to include, either by index or label."]},"tensorstore.IndexDomain.__getitem__(transform)":{transform:[124,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.IndexDomain.__init__(components)":{exclusive_max:[125,4,2,"p-exclusive_max","Exclusive upper bounds for each dimension."],implicit_lower_bounds:[125,4,2,"p-implicit_lower_bounds","Indicates whether each lower bound is\nimplicit or explicit."],implicit_upper_bounds:[125,4,2,"p-implicit_upper_bounds","Indicates whether each upper bound is\nimplicit or explicit."],inclusive_max:[125,4,2,"p-inclusive_max","Inclusive upper bounds for each dimension."],inclusive_min:[125,4,2,"p-inclusive_min","Inclusive lower bounds for each dimension."],labels:[125,4,2,"p-labels","Dimension labels."],rank:[125,4,2,"p-rank","Number of dimensions."],shape:[125,4,2,"p-shape","Size for each dimension."]},"tensorstore.IndexDomain.__init__(dimensions)":{dimensions:[126,4,2,"p-dimensions","Sequence of :py:class`.Dim` objects."]},"tensorstore.IndexDomain.hull":{other:[131,4,2,"p-other","Object to hull with."]},"tensorstore.IndexDomain.intersect":{other:[137,4,2,"p-other","Object to intersect with."]},"tensorstore.IndexTransform":{"__getitem__(domain)":[148,3,1,"","Slices this index transform by another domain."],"__getitem__(expr)":[149,3,1,"","Applies a dimension expression to this transform."],"__getitem__(indices)":[150,3,1,"","Applies a NumPy-style indexing operation with default index array semantics."],"__getitem__(transform)":[151,3,1,"","Composes this index transform with another index transform."],"__init__(components)":[152,3,1,"","Constructs an index transform from component vectors."],"__init__(domain)":[153,3,1,"","Constructs an index transform from a domain and output index maps."],"__init__(json)":[154,3,1,"","Constructs an index transform from its JSON representation."],T:[146,5,1,"","View with transposed domain (reversed dimension order)."],__call__:[147,3,1,"","Maps an input index vector to an output index vector."],__repr__:[155,3,1,"","Returns the string representation."],domain:[156,5,1,"","Input domain of the index transform."],implicit_lower_bounds:[157,5,1,"","Indicates whether the lower bound of each input dimension is implicit or explicit."],implicit_upper_bounds:[158,5,1,"","Indicates whether the upper bound of each input dimension is implicit or explicit."],input_exclusive_max:[159,5,1,"","Exclusive upper bound of the input domain."],input_inclusive_max:[160,5,1,"","Inclusive upper bound of the input domain."],input_inclusive_min:[161,5,1,"","Inclusive lower bound of the input domain, alias for input_origin."],input_labels:[162,5,1,"","Dimension labels for each input dimension."],input_origin:[163,5,1,"","Inclusive lower bound of the input domain."],input_rank:[164,5,1,"","Rank of the input space."],input_shape:[165,5,1,"","Shape of the input domain."],ndim:[166,5,1,"","Rank of the input space, alias for input_rank."],oindex:[167,3,1,"","Applies a NumPy-style indexing operation with outer indexing semantics."],origin:[168,5,1,"","Inclusive lower bound of the domain."],output:[169,5,1,"","Output index maps."],output_rank:[170,5,1,"","Rank of the output space."],shape:[171,5,1,"","Shape of the domain."],size:[172,5,1,"","Total number of elements in the domain."],to_json:[173,3,1,"","Returns the JSON representation of the transform."],vindex:[174,3,1,"","Applies a NumPy-style indexing operation with vectorized indexing semantics."]},"tensorstore.IndexTransform.__call__":{indices:[147,4,2,"p-indices","Input vector of length input_rank."]},"tensorstore.IndexTransform.__init__(components)":{implicit_lower_bounds:[152,4,2,"p-implicit_lower_bounds","Indicates whether each lower bound is\nimplicit or explicit."],implicit_upper_bounds:[152,4,2,"p-implicit_upper_bounds","Indicates whether each upper bound is\nimplicit or explicit."],input_exclusive_max:[152,4,2,"p-input_exclusive_max","Exclusive upper bounds for each input dimension."],input_inclusive_max:[152,4,2,"p-input_inclusive_max","Inclusive upper bounds for each input dimension."],input_inclusive_min:[152,4,2,"p-input_inclusive_min","Inclusive lower bounds for each input dimension."],input_labels:[152,4,2,"p-input_labels","Dimension labels for each input\ndimension."],input_rank:[152,4,2,"p-input_rank","Number of input dimensions."],input_shape:[152,4,2,"p-input_shape","Size for each input dimension."],output:[152,4,2,"p-output","Sequence of output index maps, or OutputIndexMaps object\nfrom an existing transform."]},"tensorstore.IndexTransform.__init__(domain)":{domain:[153,4,2,"p-domain","The domain of the index transform."],output:[153,4,2,"p-output","Sequence of output index maps, or OutputIndexMaps object\nfrom an existing transform."]},"tensorstore.KvStore":{KeyRange:[177,2,1,"","Half-open interval of byte string keys, according to lexicographical order."],ReadResult:[184,2,1,"","Specifies the result of a read operation."],Spec:[189,2,1,"","Parsed representation of a JSON key-value store specification."],TimestampedStorageGeneration:[199,2,1,"","Specifies a storage generation identifier and a timestamp."],__delitem__:[204,3,1,"","Synchronously deletes a single key."],__getitem__:[205,3,1,"","Synchronously reads the value of a single key."],__repr__:[206,3,1,"","Returns a string representation based on the  JSON representation."],__setitem__:[207,3,1,"","Synchronously writes the value of a single key."],copy:[208,3,1,"","Returns a copy of the key-value store."],delete_range:[209,3,1,"","Deletes a key range."],list:[210,3,1,"","Lists the keys in the key-value store."],open:[211,3,1,"","Opens a key-value store."],path:[212,5,1,"","Path prefix within the base key-value store."],read:[213,3,1,"","Reads the value of a single key."],spec:[214,3,1,"","Spec that may be used to re-open or re-create the key-value store."],transaction:[215,5,1,"","Transaction bound to this key-value store."],url:[216,5,1,"","URL representation of the key-value store specification."],with_transaction:[217,3,1,"","Returns a transaction-bound view of this key-value store."],write:[218,3,1,"","Writes or deletes a single key."]},"tensorstore.KvStore.KeyRange":{__eq__:[178,3,1,"","Compares with another range for equality."],__init__:[179,3,1,"","Constructs a key range from the specified half-open bounds."],copy:[180,3,1,"","Returns a copy of the range."],empty:[181,5,1,"","Indicates if the range contains no keys."],exclusive_max:[182,5,1,"","Exclusive upper bound of the range."],inclusive_min:[183,5,1,"","Inclusive lower bound of the range."]},"tensorstore.KvStore.KeyRange.__init__":{exclusive_max:[179,4,2,"p-exclusive_max","Exclusive upper bound of the range."],inclusive_min:[179,4,2,"p-inclusive_min","Inclusive lower bound of the range."]},"tensorstore.KvStore.ReadResult":{__init__:[185,3,1,"","Constructs a read result."],stamp:[186,5,1,"","Generation and timestamp associated with the value."],state:[187,5,1,"","Indicates the interpretation of value."],value:[188,5,1,"","Value associated with the key."]},"tensorstore.KvStore.Spec":{__add__:[190,3,1,"","Returns a key-value store with the suffix appended to the path."],__new__:[191,3,1,"","Constructs from the JSON representation or a URL."],__repr__:[192,3,1,"","Returns a string representation based on the  JSON representation."],__truediv__:[193,3,1,"","Returns a key-value store with an additional path component joined to the path."],copy:[194,3,1,"","Returns a copy of the key-value store spec."],path:[195,5,1,"","Path prefix within the base key-value store."],to_json:[196,3,1,"","Converts to the JSON representation."],update:[197,3,1,"","Modifies a spec."],url:[198,5,1,"","URL representation of the key-value store specification."]},"tensorstore.KvStore.Spec.update":{context:[197,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],strip_context:[197,4,2,"p-strip_context","Replace any bound context resources and unbound context resource specs by\ndefault context resource specs."],unbind_context:[197,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.KvStore.TimestampedStorageGeneration":{__eq__:[200,3,1,"","Compares two timestamped storage generations for equality."],__init__:[201,3,1,"","Constructs from a storage generation and time."],generation:[202,5,1,"","Identifies a specific version of a key-value store entry."],time:[203,5,1,"","Time (seconds since Unix epoch) at which generation is valid."]},"tensorstore.KvStore.__delitem__":{key:[204,4,2,"p-key","Key to delete."]},"tensorstore.KvStore.__getitem__":{key:[205,4,2,"p-key","The key to read."]},"tensorstore.KvStore.__setitem__":{key:[207,4,2,"p-key","Key to write/delete."],value:[207,4,2,"p-value","Value to store, or None to delete."]},"tensorstore.KvStore.delete_range":{range:[209,4,2,"p-range","Key range to delete."]},"tensorstore.KvStore.list":{range:[210,4,2,"p-range","If specified, restricts to the specified key range."],strip_prefix_length:[210,4,2,"p-strip_prefix_length","Strips the specified number of bytes from the start of\nthe returned keys."]},"tensorstore.KvStore.open":{context:[211,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],spec:[211,4,2,"p-spec","Key-value store spec to open."],transaction:[211,4,2,"p-transaction","Transaction to use for read/write operations."]},"tensorstore.KvStore.read":{if_not_equal:[213,4,2,"p-if_not_equal","If specified, the read is aborted if the generation associated\nwith key matches if_not_equal."],key:[213,4,2,"p-key","The key to read."],staleness_bound:[213,4,2,"p-staleness_bound","Specifies a time in (fractional) seconds since the Unix\nepoch."]},"tensorstore.KvStore.spec":{retain_context:[214,4,2,"p-retain_context","Retain all bound context resources (e.g."],unbind_context:[214,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.KvStore.write":{if_equal:[218,4,2,"p-if_equal","If specified, indicates a conditional write operation."],key:[218,4,2,"p-key","Key to write/delete."],value:[218,4,2,"p-value","Value to store, or None to delete."]},"tensorstore.OutputIndexMap":{"__init__(constant)":[220,3,1,"","Constructs a constant map."],"__init__(index_array)":[221,3,1,"","Constructs an index array map."],"__init__(input_dimension)":[222,3,1,"","Constructs a single input dimension map."],index_array:[223,5,1,"",""],index_range:[224,5,1,"",""],input_dimension:[225,5,1,"",""],method:[226,5,1,"",""],offset:[227,5,1,"",""],stride:[228,5,1,"",""]},"tensorstore.OutputIndexMaps":{__getitem__:[230,3,1,"",""],__len__:[231,3,1,"","Returns the output rank."],rank:[232,5,1,"","Returns the output rank."]},"tensorstore.OutputIndexMethod":{__init__:[234,3,1,"",""],__str__:[235,3,1,"","name(self: handle) -> str"],array:[236,6,1,"",""],constant:[237,6,1,"",""],name:[238,5,1,"",""],single_input_dimension:[239,6,1,"",""],value:[240,5,1,"",""]},"tensorstore.Promise":{"new":[242,3,1,"","Creates a linked promise and future pair."],set_exception:[243,3,1,"","Marks the linked future as unsuccessfully completed with the specified error."],set_result:[244,3,1,"","Marks the linked future as successfully completed with the specified result."]},"tensorstore.Schema":{"__getitem__(domain)":[248,3,1,"","Transforms the schema using an explicit index domain."],"__getitem__(expr)":[249,3,1,"","Transforms the schema using a dimension expression."],"__getitem__(indices)":[250,3,1,"","Transforms the schema using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[251,3,1,"","Transforms the schema using an explicit index transform."],"__init__(components)":[252,3,1,"","Constructs from component parts."],"__init__(json)":[253,3,1,"","Constructs from its JSON representation."],T:[246,5,1,"","View with transposed domain (reversed dimension order)."],__eq__:[247,3,1,"","Compares with another Schema for equality based on the JSON representation."],__repr__:[254,3,1,"","Returns a string representation based on the  JSON representation."],chunk_layout:[255,5,1,"","Chunk layout constraints specified by the schema."],codec:[256,5,1,"","Codec constraints specified by the schema."],copy:[257,3,1,"","Returns a copy of the schema."],dimension_units:[258,5,1,"","Physical units of each dimension of the domain."],domain:[259,5,1,"","Domain of the schema, or None if unspecified."],dtype:[260,5,1,"","Data type, or None if unspecified."],fill_value:[261,5,1,"","Fill value specified by the schema."],ndim:[262,5,1,"","Alias for rank."],oindex:[263,3,1,"","Transforms the schema using NumPy-style indexing with outer indexing semantics."],origin:[264,5,1,"","Inclusive lower bound of the domain."],rank:[265,5,1,"","Rank of the schema, or None if unspecified."],shape:[266,5,1,"","Shape of the domain."],size:[267,5,1,"","Total number of elements in the domain."],to_json:[268,3,1,"","Converts to the JSON representation."],update:[269,3,1,"","Adds additional constraints."],vindex:[270,3,1,"","Transforms the schema using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.Schema.__getitem__(domain)":{domain:[248,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.Schema.__getitem__(transform)":{transform:[251,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.Schema.__init__(components)":{chunk_layout:[252,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[252,4,2,"p-codec","Constrains the codec."],dimension_units:[252,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[252,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[252,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[252,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],rank:[252,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[252,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[252,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.Schema.update":{chunk_layout:[269,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[269,4,2,"p-codec","Constrains the codec."],dimension_units:[269,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[269,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[269,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[269,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],rank:[269,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[269,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[269,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.Spec":{"__getitem__(domain)":[274,3,1,"","Transforms the spec using an explicit index domain."],"__getitem__(expr)":[275,3,1,"","Transforms the spec using a dimension expression."],"__getitem__(indices)":[276,3,1,"","Transforms the spec using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[277,3,1,"","Transforms the spec using an explicit index transform."],T:[272,5,1,"","View with transposed domain (reversed dimension order)."],__eq__:[273,3,1,"","Compares with another Spec for equality based on the JSON representation."],__new__:[278,3,1,"","Constructs from the JSON representation."],__repr__:[279,3,1,"","Returns a string representation based on the JSON representation."],chunk_layout:[280,5,1,"","Effective chunk layout, including any constraints implied\nby driver-specific options."],codec:[281,5,1,"","Effective codec, including any constraints implied\nby driver-specific options."],copy:[282,3,1,"","Returns a copy of the spec."],dimension_units:[283,5,1,"","Effective physical units of each dimension of the domain, including any\nconstraints implied by driver-specific options."],domain:[284,5,1,"","Effective index domain, including any constraints implied\nby driver-specific options."],dtype:[285,5,1,"","Data type, or None if unspecified."],fill_value:[286,5,1,"","Effective fill value, including any constraints implied by driver-specific\noptions."],kvstore:[287,5,1,"","Spec of the associated key-value store used as the underlying storage."],ndim:[288,5,1,"","Alias for rank."],oindex:[289,3,1,"","Transforms the spec using NumPy-style indexing with outer indexing semantics."],origin:[290,5,1,"","Inclusive lower bound of the domain."],rank:[291,5,1,"","Returns the rank of the domain, or None if unspecified."],schema:[292,5,1,"","Effective schema, including any constraints implied by driver-specific options."],shape:[293,5,1,"","Shape of the domain."],size:[294,5,1,"","Total number of elements in the domain."],to_json:[295,3,1,"","Converts to the JSON representation."],transform:[296,5,1,"","The index transform, or None if unspecified."],update:[297,3,1,"","Adds additional constraints or changes the open mode."],vindex:[298,3,1,"","Transforms the spec using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.Spec.__getitem__(domain)":{domain:[274,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.Spec.__getitem__(transform)":{transform:[277,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.Spec.update":{assume_metadata:[297,4,2,"p-assume_metadata","Skip reading the metadata if possible."],chunk_layout:[297,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[297,4,2,"p-codec","Constrains the codec."],context:[297,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],create:[297,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[297,4,2,"p-delete_existing","Delete any existing data before creating a new array."],dimension_units:[297,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[297,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[297,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[297,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],kvstore:[297,4,2,"p-kvstore","Sets the associated key-value store used as the underlying storage."],open:[297,4,2,"p-open","Allow opening an existing TensorStore."],rank:[297,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[297,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[297,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],strip_context:[297,4,2,"p-strip_context","Replace any bound context resources and unbound context resource specs by\ndefault context resource specs."],unbind_context:[297,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.TensorStore":{"__getitem__(domain)":[302,3,1,"","Computes a virtual view using an explicit index domain."],"__getitem__(expr)":[303,3,1,"","Computes a virtual view using a dimension expression."],"__getitem__(indices)":[304,3,1,"","Computes a virtual view using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[305,3,1,"","Computes a virtual view using an explicit index transform."],"__setitem__(domain)":[306,3,1,"","Synchronously writes using an explicit index domain."],"__setitem__(expr)":[307,3,1,"","Synchronously writes using a dimension expression."],"__setitem__(indices)":[308,3,1,"","Synchronously writes using NumPy-style indexing with default index array semantics."],"__setitem__(transform)":[309,3,1,"","Synchronously writes using an explicit index transform."],T:[300,5,1,"","View with transposed domain (reversed dimension order)."],__array__:[301,3,1,"","Automatic conversion to numpy.ndarray for interoperability with NumPy."],astype:[310,3,1,"","Returns a read/write view as the specified data type."],chunk_layout:[311,5,1,"","Chunk layout of the TensorStore."],codec:[312,5,1,"","Data codec spec."],dimension_units:[313,5,1,"","Physical units of each dimension of the domain."],domain:[314,5,1,"","Domain of the array."],dtype:[315,5,1,"","Data type of the array."],fill_value:[316,5,1,"","Fill value for positions not yet written."],kvstore:[317,5,1,"","Associated key-value store used as the underlying storage."],mode:[318,5,1,"","Read/write mode."],ndim:[319,5,1,"","Alias for rank."],oindex:[320,3,1,"","Computes a virtual view using NumPy-style indexing with outer indexing semantics."],origin:[322,5,1,"","Inclusive lower bound of the domain."],rank:[323,5,1,"","Number of dimensions in the domain."],read:[324,3,1,"","Reads the data within the current domain."],readable:[325,5,1,"","Indicates if reading is supported."],resolve:[326,3,1,"","Obtains updated bounds, subject to the cache policy."],schema:[327,5,1,"","Schema of this TensorStore."],shape:[328,5,1,"","Shape of the domain."],size:[329,5,1,"","Total number of elements in the domain."],spec:[330,3,1,"","Spec that may be used to re-open or re-create the TensorStore."],transaction:[331,5,1,"","Associated transaction used for read/write operations."],vindex:[332,3,1,"","Computes a virtual view using NumPy-style indexing with vectorized indexing semantics."],with_transaction:[334,3,1,"","Returns a transaction-bound view of this TensorStore."],writable:[335,5,1,"","Indicates if writing is supported."],write:[336,3,1,"","Writes to the current domain."]},"tensorstore.TensorStore.__getitem__(domain)":{domain:[302,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.TensorStore.__getitem__(transform)":{transform:[305,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.__setitem__(domain)":{source:[306,4,2,"p-source","Source array, broadcast-compatible with\nself.domain[transform] and with a data type convertible to\nself.dtype."],transform:[306,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.__setitem__(indices)":{indices:[308,4,2,"p-indices","NumPy-style indexing terms."],source:[308,4,2,"p-source","Source array, broadcast-compatible with\nself[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.__setitem__(transform)":{source:[309,4,2,"p-source","Source array, broadcast-compatible with\nself.domain[transform] and with a data type convertible to\nself.dtype."],transform:[309,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.oindex":{__setitem__:[321,3,1,"","Synchronously writes using NumPy-style indexing with outer indexing semantics."]},"tensorstore.TensorStore.oindex.__setitem__":{indices:[321,4,2,"p-indices","NumPy-style indexing terms."],source:[321,4,2,"p-source","Source array, broadcast-compatible with\nself.oindex[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.read":{order:[324,4,2,"p-order","Contiguous layout order of the returned array:"]},"tensorstore.TensorStore.spec":{assume_metadata:[330,4,2,"p-assume_metadata","Skip reading the metadata if possible."],create:[330,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[330,4,2,"p-delete_existing","Delete any existing data before creating a new array."],minimal_spec:[330,4,2,"p-minimal_spec","Indicates whether to include in the returned Spec the\nmetadata necessary to re-create the TensorStore."],open:[330,4,2,"p-open","Allow opening an existing TensorStore."],retain_context:[330,4,2,"p-retain_context","Retain all bound context resources (e.g."],unbind_context:[330,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.TensorStore.vindex":{__setitem__:[333,3,1,"","Synchronously writes using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.TensorStore.vindex.__setitem__":{indices:[333,4,2,"p-indices","NumPy-style indexing terms."],source:[333,4,2,"p-source","Source array, broadcast-compatible with\nself.vindex[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.write":{source:[336,4,2,"p-source","Source array, broadcast-compatible with\nself.domain and with a data type convertible to\nself.dtype."]},"tensorstore.Transaction":{__init__:[338,3,1,"","Creates a new transaction."],abort:[339,3,1,"","Aborts the transaction."],aborted:[340,5,1,"","Indicates whether the transaction has been aborted."],atomic:[341,5,1,"","Indicates whether the transaction is atomic."],commit_async:[342,3,1,"","Asynchronously commits the transaction."],commit_started:[343,5,1,"","Indicates whether the commit of the transaction has already started."],commit_sync:[344,3,1,"","Synchronously commits the transaction."],future:[345,5,1,"","Commit result future."],open:[346,5,1,"","Indicates whether the transaction is still open."]},"tensorstore.Unit":{"__init__(components)":[349,3,1,"","Constructs a unit from a multiplier and base unit."],"__init__(json)":[350,3,1,"","Constructs a unit from its JSON representation."],"__init__(multiplier)":[351,3,1,"","Constructs a dimension-less quantity of the specified value."],"__init__(pair)":[352,3,1,"","Constructs a unit from a multiplier and base unit pair."],"__init__(unit)":[353,3,1,"","Constructs a unit from a string."],__eq__:[348,3,1,"","Compares two units for equality."],__mul__:[354,3,1,"","Multiplies this unit by the specified multiplier."],__truediv__:[355,3,1,"","Divides this unit by the specified divisor."],base_unit:[356,5,1,"","Base unit from which this unit is derived."],multiplier:[357,5,1,"","Multiplier for the base_unit."],to_json:[358,3,1,"","Converts to the JSON representation."]},"tensorstore.VirtualChunkedReadParameters":{if_not_equal:[360,5,1,"","Cached generation, read request can be skipped if no newer data is available."],staleness_bound:[361,5,1,"","Read may be fulfilled with cached data no older than the specified bound."]},"tensorstore.VirtualChunkedWriteParameters":{if_equal:[363,5,1,"","If non-empty, writeback should be conditioned on the existing data matching the specified generation."]},"tensorstore.WriteFutures":{add_done_callback:[365,3,1,"",""],cancel:[366,3,1,"",""],cancelled:[367,3,1,"",""],commit:[368,5,1,"",""],copy:[369,5,1,"",""],done:[370,3,1,"",""],exception:[371,3,1,"",""],remove_done_callback:[372,3,1,"",""],result:[373,3,1,"",""]},"tensorstore.array":{array:[374,4,2,"p-array","Source array."],context:[374,4,2,"p-context","Context to use."],dtype:[374,4,2,"p-dtype","Data type to which array will be converted."]},"tensorstore.d":{__class_getitem__:[381,3,1,"","Constructs from a sequence of dimension indices, ranges, and/or labels."]},"tensorstore.dtype":{"__init__(dtype)":[386,3,1,"","Construct from an existing TensorStore or NumPy data type."],"__init__(name)":[387,3,1,"","Construct by name."],__call__:[385,3,1,"","Construct a scalar instance of this data type"],name:[388,5,1,"",""],numpy_dtype:[389,5,1,"",""],to_json:[390,3,1,"",""],type:[391,5,1,"",""]},"tensorstore.open":{assume_metadata:[402,4,2,"p-assume_metadata","Skip reading the metadata if possible."],chunk_layout:[402,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[402,4,2,"p-codec","Constrains the codec."],context:[402,4,2,"p-context","Shared resource context."],create:[402,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[402,4,2,"p-delete_existing","Delete any existing data before creating a new array."],dimension_units:[402,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[402,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[402,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[402,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],kvstore:[402,4,2,"p-kvstore","Sets the associated key-value store used as the underlying storage."],open:[402,4,2,"p-open","Allow opening an existing TensorStore."],rank:[402,4,2,"p-rank","Constrains the rank of the TensorStore."],read:[402,4,2,"p-read","Allow read access."],schema:[402,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[402,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],spec:[402,4,2,"p-spec","TensorStore Spec to open."],transaction:[402,4,2,"p-transaction","Transaction to use for opening/creating, and for subsequent operations."],write:[402,4,2,"p-write","Allow write access."]},"tensorstore.virtual_chunked":{chunk_layout:[409,4,2,"p-chunk_layout","Constrains the chunk layout."],context:[409,4,2,"p-context","Shared resource context."],dimension_units:[409,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[409,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[409,4,2,"p-dtype","Constrains the data type of the TensorStore."],loop:[409,4,2,"p-loop","Event loop on which to execute read_function and/or\nwrite_function if they are\nasync functions."],rank:[409,4,2,"p-rank","Constrains the rank of the TensorStore."],read_function:[409,4,2,"p-read_function","Callback that handles chunk read requests."],schema:[409,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[409,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],transaction:[409,4,2,"p-transaction","Transaction to use for opening/creating, and for subsequent operations."],write_function:[409,4,2,"p-write_function","Callback that handles chunk write requests."]},ChunkLayout:{chunk:[412,1,2,"json-ChunkLayout.chunk","Combined constraints on write/read/codec chunks."],codec_chunk:[412,1,2,"json-ChunkLayout.codec_chunk","Constraints on the chunk grid used by the codec, if applicable."],grid_origin:[412,1,2,"json-ChunkLayout.grid_origin","Specifies hard constraints on the origin of the chunk grid."],grid_origin_soft_constraint:[412,1,2,"json-ChunkLayout.grid_origin_soft_constraint","Specifies preferred values for the origin of the chunk grid rather than\nhard constraints."],inner_order:[412,1,2,"json-ChunkLayout.inner_order","Permutation specifying the element storage order within the innermost\nchunks."],inner_order_soft_constraint:[412,1,2,"json-ChunkLayout.inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint.  If inner_order is also specified, it\ntakes precedence."],rank:[412,1,2,"json-ChunkLayout.rank","Number of dimensions."],read_chunk:[412,1,2,"json-ChunkLayout.read_chunk","Constraints on the chunk grid over which reads may be efficiently\npartitioned."],write_chunk:[412,1,2,"json-ChunkLayout.write_chunk","Constraints on the chunk grid over which writes may be efficiently\npartitioned."]},Codec:{driver:[412,1,2,"json-Codec.driver","Driver identifier"]},Context:{"&lt;resource-type&gt;":[0,1,2,"json-Context.<resource-type>",null],"&lt;resource-type&gt;#&lt;id&gt;":[0,1,2,"json-Context.<resource-type>#<id>",null],cache_pool:[0,0,1,"json-Context.cache_pool",""],data_copy_concurrency:[0,0,1,"json-Context.data_copy_concurrency",""],file_io_concurrency:[0,0,1,"json-Context.file_io_concurrency",""],gcs_request_concurrency:[21,0,1,"json-Context.gcs_request_concurrency",""],gcs_request_retries:[21,0,1,"json-Context.gcs_request_retries",""],gcs_user_project:[21,0,1,"json-Context.gcs_user_project",""],http_request_concurrency:[22,0,1,"json-Context.http_request_concurrency",""],http_request_retries:[22,0,1,"json-Context.http_request_retries",""],memory_key_value_store:[24,0,1,"json-Context.memory_key_value_store",""]},DownsampleMethod:{max:[3,1,2,"json-DownsampleMethod.max",""],mean:[3,1,2,"json-DownsampleMethod.mean",""],median:[3,1,2,"json-DownsampleMethod.median",""],min:[3,1,2,"json-DownsampleMethod.min",""],mode:[3,1,2,"json-DownsampleMethod.mode",""],stride:[3,1,2,"json-DownsampleMethod.stride",""]},IndexDomain:{exclusive_max:[18,1,2,"json-IndexDomain.exclusive_max","Exclusive upper bounds of the domain."],inclusive_max:[18,1,2,"json-IndexDomain.inclusive_max","Inclusive upper bounds of the domain."],inclusive_min:[18,1,2,"json-IndexDomain.inclusive_min","Inclusive lower bounds of the domain."],labels:[18,1,2,"json-IndexDomain.labels","Dimension labels for each dimension."],rank:[18,1,2,"json-IndexDomain.rank","Number of dimensions."],shape:[18,1,2,"json-IndexDomain.shape","Extent of each dimension of the domain."]},IndexTransform:{input_exclusive_max:[18,1,2,"json-IndexTransform.input_exclusive_max","Exclusive upper bounds of the input domain."],input_inclusive_max:[18,1,2,"json-IndexTransform.input_inclusive_max","Inclusive upper bounds of the input domain."],input_inclusive_min:[18,1,2,"json-IndexTransform.input_inclusive_min","Inclusive lower bounds of the input domain."],input_labels:[18,1,2,"json-IndexTransform.input_labels","Dimension labels for each input domain dimension."],input_rank:[18,1,2,"json-IndexTransform.input_rank","Number of input dimensions."],input_shape:[18,1,2,"json-IndexTransform.input_shape","Extent of each dimension of the input domain."],output:[18,1,2,"json-IndexTransform.output","Specifies the output index map for each output dimension."]},KeyValueStoreBackedChunkDriver:{assume_metadata:[10,1,2,"json-KeyValueStoreBackedChunkDriver.assume_metadata",""],cache_pool:[10,1,2,"json-KeyValueStoreBackedChunkDriver.cache_pool",""],context:[10,1,2,"json-KeyValueStoreBackedChunkDriver.context","Specifies context resources that augment/override the parent context."],create:[10,1,2,"json-KeyValueStoreBackedChunkDriver.create",""],data_copy_concurrency:[10,1,2,"json-KeyValueStoreBackedChunkDriver.data_copy_concurrency",""],delete_existing:[10,1,2,"json-KeyValueStoreBackedChunkDriver.delete_existing",""],driver:[10,1,2,"json-KeyValueStoreBackedChunkDriver.driver","Driver identifier"],dtype:[10,1,2,"json-KeyValueStoreBackedChunkDriver.dtype","Specifies the data type."],kvstore:[10,1,2,"json-KeyValueStoreBackedChunkDriver.kvstore",""],open:[10,1,2,"json-KeyValueStoreBackedChunkDriver.open",""],path:[10,1,2,"json-KeyValueStoreBackedChunkDriver.path","Additional path within the KvStore specified by\nkvstore."],rank:[10,1,2,"json-KeyValueStoreBackedChunkDriver.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[10,1,2,"json-KeyValueStoreBackedChunkDriver.recheck_cached_data",""],recheck_cached_metadata:[10,1,2,"json-KeyValueStoreBackedChunkDriver.recheck_cached_metadata",""],schema:[10,1,2,"json-KeyValueStoreBackedChunkDriver.schema","Specifies constraints on the schema."],transform:[10,1,2,"json-KeyValueStoreBackedChunkDriver.transform","Specifies a transform."]},KvStore:{context:[23,1,2,"json-KvStore.context",""],driver:[23,1,2,"json-KvStore.driver","Key-value store driver identifier"],path:[23,1,2,"json-KvStore.path","Key prefix within the key-value store."]},OutputIndexMap:{index_array:[18,1,2,"json-OutputIndexMap.index_array","If present, indicates that this output dimension uses an index\narray map, with the index array specified as a nested list of rank\nequal to the input_rank."],index_array_bounds:[18,1,2,"json-OutputIndexMap.index_array_bounds",""],input_dimension:[18,1,2,"json-OutputIndexMap.input_dimension","If present, indicates that this output dimension uses a single\ninput dimension map with the specified input dimension.  Must not\nbe specified in conjunction with index_array."],offset:[18,1,2,"json-OutputIndexMap.offset","Specifies an offset for this output dimension.  If neither\ninput_dimension nor index_array is\nspecified, this specifies the constant value to which this output\ndimension maps."],stride:[18,1,2,"json-OutputIndexMap.stride","Multiplier for the input index specified by\ninput_dimension or the index array value specified by\nindex_array."]},Schema:{chunk_layout:[412,1,2,"json-Schema.chunk_layout","Data storage layout constraints."],codec:[412,1,2,"json-Schema.codec",""],dimension_units:[412,1,2,"json-Schema.dimension_units","Physical units of each dimension."],domain:[412,1,2,"json-Schema.domain","Domain of the TensorStore, including bounds and optional dimension labels."],dtype:[412,1,2,"json-Schema.dtype","Specifies the data type of the TensorStore."],fill_value:[412,1,2,"json-Schema.fill_value","Fill value to use for missing data."],rank:[412,1,2,"json-Schema.rank","Number of dimensions."]},TensorStore:{context:[413,1,2,"json-TensorStore.context","Specifies context resources that augment/override the parent context."],driver:[413,1,2,"json-TensorStore.driver","Driver identifier"],dtype:[413,1,2,"json-TensorStore.dtype","Specifies the data type."],rank:[413,1,2,"json-TensorStore.rank","Specifies the rank of the TensorStore."],schema:[413,1,2,"json-TensorStore.schema","Specifies constraints on the schema."],transform:[413,1,2,"json-TensorStore.transform","Specifies a transform."]},dtype:{"byte":[413,1,2,"json-dtype.byte","Single byte."],"char":[413,1,2,"json-dtype.char","Single byte, interpreted as an ASCII character."],bfloat16:[413,1,2,"json-dtype.bfloat16","bfloat16 floating-point format number."],bool:[413,1,2,"json-dtype.bool","Boolean value (0 or 1)."],complex128:[413,1,2,"json-dtype.complex128","Complex number, where the real and imaginary components are each\nrepresented by a float64."],complex64:[413,1,2,"json-dtype.complex64","Complex number, where the real and imaginary components are each\nrepresented by a float32."],float16:[413,1,2,"json-dtype.float16","IEEE 754 binary16\nhalf-precision floating-point number."],float32:[413,1,2,"json-dtype.float32","IEEE 754 binary32\nsingle-precision floating-point number."],float64:[413,1,2,"json-dtype.float64","IEEE 754 binary64\ndouble-precision floating-point number."],int16:[413,1,2,"json-dtype.int16","16-bit signed two's-complement integer."],int32:[413,1,2,"json-dtype.int32","32-bit signed two's-complement integer."],int64:[413,1,2,"json-dtype.int64","64-bit signed two's-complement integer."],int8:[413,1,2,"json-dtype.int8","8-bit signed two's-complement integer."],json:[413,1,2,"json-dtype.json","JSON value."],string:[413,1,2,"json-dtype.string","Byte string."],uint16:[413,1,2,"json-dtype.uint16","16-bit unsigned integer."],uint32:[413,1,2,"json-dtype.uint32","32-bit unsigned integer."],uint64:[413,1,2,"json-dtype.uint64","64-bit unsigned integer."],uint8:[413,1,2,"json-dtype.uint8","8-bit unsigned integer."],ustring:[413,1,2,"json-dtype.ustring","Unicode string (represented in memory as UTF-8)."]},tensorstore:{"downsample(spec)":[382,7,1,"","Returns a virtual downsampled view view of a Spec."],"downsample(store)":[383,7,1,"","Returns a virtual downsampled view of a TensorStore."],ChunkLayout:[27,2,1,"","Describes the storage layout of a tensorstore.TensorStore."],CodecSpec:[58,2,1,"","Specifies driver-specific encoding/decoding parameters."],Context:[61,2,1,"","Manages shared TensorStore context resources, such as caches and credentials."],Dim:[73,2,1,"","1-d index interval with optionally-implicit bounds and dimension label."],DimExpression:[97,2,1,"","Specifies an advanced indexing operation."],Future:[108,2,1,"","Handle for consuming the result of an asynchronous operation."],FutureLike:[118,2,1,"","Abstract base class for types representing an asynchronous result."],IndexDomain:[119,2,1,"","Domain (including bounds and optional dimension labels) of an N-dimensional index space."],IndexTransform:[145,2,1,"","Represents a transform from an input index space to an output space."],Indexable:[175,2,1,"","Abstract base class for types that support TensorStore indexing operations."],KvStore:[176,2,1,"","Key-value store that maps an ordered set of byte string keys to byte string values."],OutputIndexMap:[219,2,1,"","Represents an output index map for an index transform."],OutputIndexMaps:[229,2,1,"","View of the output index maps for an index transform."],OutputIndexMethod:[233,2,1,"","Indicates the output index method of an OutputIndexMap."],Promise:[241,2,1,"","Handle for producing the result of an asynchronous operation."],Schema:[245,2,1,"","Driver-independent options for defining a TensorStore schema."],Spec:[271,2,1,"","Specification for opening or creating a TensorStore."],TensorStore:[299,2,1,"","Asynchronous multi-dimensional array handle."],Transaction:[337,2,1,"","Transactions are used to stage a group of modifications (e.g. writes to\ntensorstore.TensorStore objects) in memory, and then either commit the\ngroup all at once or abort it."],Unit:[347,2,1,"","Specifies a physical quantity/unit."],VirtualChunkedReadParameters:[359,2,1,"","Options passed to read callbacks used with virtual_chunked."],VirtualChunkedWriteParameters:[362,2,1,"","Options passed to write callbacks used with virtual_chunked."],WriteFutures:[364,2,1,"","Handle for consuming the result of an asynchronous write operation."],array:[374,7,1,"","Returns a TensorStore that reads/writes from an in-memory array."],bfloat16:[375,8,1,"","bfloat16 floating-point data type."],bool:[376,8,1,"","Boolean data type (0 or 1).  Corresponds to the python:bool type and numpy.bool_."],cast:[377,7,1,"","Returns a read/write view as the specified data type."],complex128:[378,8,1,"","Complex number based on float64.  Corresponds to numpy.complex128."],complex64:[379,8,1,"","Complex number based on float32.  Corresponds to numpy.complex64."],d:[380,2,1,"","Specifies a dimension selection, for starting a dimension expression."],dtype:[384,2,1,"","TensorStore data type representation."],float16:[392,8,1,"","IEEE 754 binary16 half-precision floating-point data type.  Correspond to numpy.float16."],float32:[393,8,1,"","IEEE 754 binary32 single-precision floating-point data type.  Corresponds to numpy.float32."],float64:[394,8,1,"","IEEE 754 binary64 double-precision floating-point data type.  Corresponds to numpy.float64."],inf:[395,8,1,"","Special constant equal to 2^{62}-1 that indicates an unbounded index domain."],int16:[396,8,1,"","16-bit signed two's-complement integer data type.  Corresponds to numpy.int16."],int32:[397,8,1,"","32-bit signed two's-complement integer data type.  Corresponds to numpy.int32."],int64:[398,8,1,"","32-bit signed two's-complement integer data type.  Corresponds to numpy.int64."],int8:[399,8,1,"","8-bit signed two's-complement integer data type.  Corresponds to numpy.int8."],json:[400,8,1,"","JSON data type.  Corresponds to an arbitrary Python JSON value."],newaxis:[401,8,1,"","Alias for None used in indexing expressions to specify a new singleton dimension."],open:[402,7,1,"","Opens or creates a TensorStore from a Spec."],string:[403,8,1,"","Variable-length byte string data type.  Corresponds to the Python python:bytes type."],uint16:[404,8,1,"","16-bit unsigned integer.  Corresponds to numpy.uint16."],uint32:[405,8,1,"","32-bit unsigned integer.  Corresponds to numpy.uint32."],uint64:[406,8,1,"","64-bit unsigned integer data type.  Corresponds to numpy.uint64."],uint8:[407,8,1,"","8-bit unsigned integer.  Corresponds to numpy.uint8."],ustring:[408,8,1,"","Variable-length Unicode string data type.  Corresponds to the Python python:str type."],virtual_chunked:[409,7,1,"","Creates a TensorStore where the content is read/written chunk-wise by an arbitrary function."]}},objnames:{"0":["json","schema","JSON type"],"1":["json","subschema","JSON member"],"2":["py","class","Python class"],"3":["py","method","Python method"],"4":["py","parameter","Python parameter"],"5":["py","property","Python property"],"6":["py","attribute","Python attribute"],"7":["py","function","Python function"],"8":["py","data","Python data"],"9":["std","envvar","environment variable"]},objtypes:{"0":"json:schema","1":"json:subschema","2":"py:class","3":"py:method","4":"py:parameter","5":"py:property","6":"py:attribute","7":"py:function","8":"py:data","9":"std:envvar"},terms:{"0":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,25,26,43,48,50,51,54,55,79,83,89,93,98,99,100,101,102,103,104,105,106,107,108,120,121,122,123,124,125,126,131,136,147,148,149,150,151,152,153,154,156,167,173,174,210,219,220,221,222,233,237,248,249,250,251,252,253,255,259,263,265,268,270,274,275,276,277,284,289,292,295,296,297,298,299,302,303,304,305,306,307,308,309,310,311,312,314,320,321,324,327,330,332,333,336,337,358,376,377,381,401,402,409,410,411,412,413],"05":19,"098695591f3a":19,"0x":411,"0x8":[402,411],"1":[0,1,3,4,12,13,14,15,18,19,21,22,25,26,43,48,50,51,54,55,73,74,75,81,86,87,89,90,91,92,93,94,98,99,100,101,102,103,104,105,106,107,108,120,121,122,123,124,130,131,134,135,136,137,138,140,142,143,146,147,148,149,150,151,152,153,154,159,160,161,162,163,167,170,173,174,221,222,233,239,246,248,249,250,251,252,253,255,258,263,265,268,270,272,276,277,283,292,295,296,299,300,302,303,304,305,307,308,309,310,311,312,313,319,320,321,323,327,330,332,333,336,337,347,351,353,376,377,381,395,401,402,409,410,411,412,413],"10":[15,18,19,20,71,72,73,74,75,76,77,78,79,84,86,87,88,92,93,98,103,104,105,120,127,136,148,173,249,250,263,270,275,276,289,298,299,301,303,304,306,307,308,320,321,324,332,333,336,402,410],"100":[6,9,12,13,15,18,53,54,57,128,139,141,248,249,250,251,259,263,270,280,288,291,292,295,296,297,312,313,316,317,327,409,411],"1000":[12,13,15,248,249,250,251,263,270,284,292,299,311,402,411],"10000":13,"1000000":54,"10000000":[0,63,67,71,72,402],"100000000":[0,409,411],"1000000000":[13,25],"100_000_000":411,"100kb":12,"100mb":[409,411],"100x100x1":411,"101":409,"102":[12,15,311,402,409,411],"1020":13,"103":409,"104":409,"1049":299,"105":[53,57,295,296,409],"106":409,"11":[15,19,78,86,98,121,154,221,222,410],"1113":13,"1132030694":411,"1161117856":411,"1194100437":411,"12":[15,18,19,98,103,104,121,324,410],"1264":13,"128":[12,15],"13":[15,104,121,173,222],"14":[15,19,105,124],"1408314276":411,"1414":402,"15":[13,19,79,105,402,410,411],"15000":411,"15100":411,"159":[12,13,15],"16":[19,26,104,396,404,413],"17":[19,103,127,154],"18":104,"1gb":25,"1nm":[13,412],"1s":[21,22],"2":[1,3,11,12,13,14,15,18,19,22,25,26,50,51,54,73,81,98,99,100,101,102,103,104,105,106,107,108,120,121,122,123,124,125,130,131,132,133,134,135,136,137,138,140,142,143,147,148,149,150,152,153,154,157,158,159,160,161,162,163,167,173,174,221,222,233,236,248,249,250,251,252,253,255,257,263,265,268,270,277,288,291,292,296,299,304,305,307,308,309,310,311,319,320,321,323,330,332,333,336,337,354,355,377,381,395,401,402,409,410,411,412],"20":[13,18,88,98,103,104,105,250,263,270,276,289,298,301,304,320,332],"200":[12,13,15,53,54,57,128,139,141,248,249,250,251,259,263,270,280,283,288,291,292,295,296,297,313,317],"2000":[12,13,15,248,249,250,251,263,270,284,292,311,402],"20000":[299,411],"2000000":[12,13,15],"2019":19,"2030":13,"2048":13,"206":[53,57],"207":[53,57],"20base":22,"20data":22,"21":[19,410],"23":104,"25":105,"28":104,"29":19,"3":[1,3,9,12,13,14,15,18,19,22,25,50,51,73,81,89,94,96,98,99,100,101,102,103,104,105,106,107,108,109,120,121,122,123,124,125,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,151,152,153,154,156,157,158,159,160,161,162,163,164,165,166,167,170,173,174,221,247,248,249,250,251,252,253,257,258,260,262,263,265,268,269,270,276,277,289,292,298,304,305,307,309,310,319,320,323,332,333,337,348,349,350,351,352,354,355,356,357,358,377,381,401,402,409,410,411],"30":[13,98,314],"300":[12,13,15,53,57,128,139,141,248,249,250,251,259,263,270,280,283,292,297],"3000":[12,13,15,248,249,250,251,263,270,284,292,311,402],"300000":353,"30037":19,"3040":13,"307":[53,57],"32":[1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,18,21,22,26,397,398,405,412,413],"34432":[13,402,411],"34452":13,"357":410,"37":19,"39552":[13,402,411],"39582":13,"3e5":353,"3nm":[258,348,358],"4":[0,1,3,4,9,12,13,14,15,18,19,74,81,87,92,98,101,103,104,105,106,107,120,122,123,124,130,131,132,133,134,135,136,137,138,140,142,143,148,152,153,154,156,157,158,159,160,161,162,163,164,165,166,170,173,251,258,277,305,308,309,319,323,333,337,353,377,402,409,410,411,412],"40":[12,13],"40000":13,"40nm":13,"41408":[402,411],"42":[11,15,109,247,261,286,299,306,316,327,336,337,402,409],"422":9,"43":337,"44":337,"4443":21,"45":337,"4611686018427387903":[26,92,93,395],"4611686018427387904":[86,87],"48":19,"486000":412,"4_4_40":13,"4nm":[13,258,353,412],"5":[1,12,14,15,18,19,53,57,74,75,76,77,78,79,81,83,84,86,87,88,89,90,91,92,93,94,96,98,101,102,103,104,105,106,107,120,121,122,123,124,125,126,130,131,132,133,134,135,136,137,138,140,142,143,148,149,151,153,154,156,157,158,159,160,161,162,163,164,165,166,170,220,221,222,241,243,244,248,249,250,251,254,263,270,274,275,276,277,289,295,296,298,299,301,302,303,304,305,306,307,308,309,312,313,319,320,321,323,324,327,330,332,333,336,337,349,350,351,352,355,357,377,401,402,409,410,411,412],"50":[314,409],"500":[12,13,15],"50000":13,"5000000":[69,71,72],"512":13,"51508":13,"51548":13,"5813054053":411,"5e":412,"5nm":[313,354,356,357],"6":[1,3,4,12,13,14,15,18,19,53,57,75,81,98,101,102,103,104,105,107,120,121,122,123,124,126,130,131,132,133,136,137,148,150,153,157,158,159,167,174,248,249,250,274,275,276,299,302,303,304,305,306,307,308,309,319,321,323,333,336,337,402,409,410,411,412],"60":[143,274,275,302,303,306,307,332,412],"62":[18,26,73,395],"632":13,"64":[12,13,15,18,25,26,402,406,411,413],"6654436a307a":19,"6901":11,"7":[18,19,53,57,96,98,103,120,121,124,127,134,136,148,150,152,153,154,160,167,173,174,221,222,263,270,289,298,320,332,354,410],"70":[274,275,276,277,289,298,301,302,303,304,305,306,307,308,309,314,315,320,321,324,330,332,333,336],"707":402,"7230":22,"75":[6,13],"754":[26,392,393,394,413],"77":[21,22],"79":[12,13,15],"7nm":355,"8":[0,4,13,14,18,19,25,26,98,102,103,104,120,121,124,127,130,136,148,150,151,152,154,159,167,173,174,248,263,270,274,289,298,299,302,306,308,313,320,321,324,332,333,336,399,402,407,410,411,413],"80":[274,275,276,277,289,298,301,302,303,304,305,306,307,308,309,314,315,320,321,324,330,332,333,336,411],"8000":22,"8080":22,"81":13,"82":411,"83":[19,411],"8_8_8":13,"8nm":313,"9":[3,12,13,15,18,19,76,98,120,124,136,148,222,248,249,274,275,302,303,306,307,308,402,410,411,412],"90":412,"9223372036854775807":96,"9223372036854775808":412,"95":9,"9801a2c5d6c6":19,"99":411,"9m":412,"abstract":[17,26,118,145,175],"boolean":[9,10,12,13,15,24,26,101,167,263,289,320,321,376,413],"break":15,"byte":[0,12,15,25,26,176,177,184,188,199,202,205,210,359,360,362,363,403,413],"case":[3,15,16,18,19,21,22,102,103,104,105,120,136,145,148,179,182,213,305,410,412],"char":413,"class":[26,28,58,62,64,73,97,108,118,119,126,145,175,177,184,189,199,219,229,233,241,245,271,299,337,347,359,362,364,380,384,410],"default":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,21,22,25,61,66,68,69,70,77,78,79,97,98,109,125,145,150,152,176,197,211,214,245,250,271,276,297,299,304,308,330,380,402,409,410,412],"do":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,25,410,413],"export":19,"final":[13,43,55],"float":[26,28,30,32,33,41,43,55,108,114,117,199,201,203,213,347,349,351,352,354,355,357,359,361,364,371,373,375,392,393,394,409,412,413],"function":[3,18,25,26,119,409,411],"import":[25,411],"int":[26,27,28,30,34,35,36,37,38,39,41,43,46,47,48,49,50,51,55,73,75,77,78,79,82,86,87,92,93,96,97,102,103,104,105,108,116,119,122,125,128,130,134,135,139,140,141,142,143,145,147,152,159,160,161,163,164,165,166,168,170,171,172,210,219,220,221,222,225,227,228,229,230,231,232,233,234,240,245,252,262,264,265,266,267,269,271,288,290,291,293,294,297,299,319,322,323,328,329,364,372,380,382,383,395,402,409,410],"long":14,"new":[0,1,2,3,4,5,6,7,8,9,10,11,14,17,18,26,69,70,98,99,100,102,103,104,105,112,119,123,124,176,197,214,218,241,242,243,244,248,249,250,251,252,255,258,263,269,270,274,275,276,277,289,297,298,312,327,330,337,338,401,409,410,411,412,413],"null":[0,8,13,15,403,408,412],"public":[21,411],"return":[3,10,11,12,13,15,18,26,62,63,64,66,67,68,69,70,73,83,84,85,98,100,101,102,103,104,105,106,107,108,109,114,117,119,122,123,124,128,129,144,145,147,155,173,176,177,180,189,190,192,193,194,205,206,208,209,210,213,217,218,229,231,232,245,248,249,250,251,254,255,257,263,270,271,274,275,276,277,279,282,289,291,298,299,301,302,303,304,305,310,317,318,324,330,334,336,342,344,374,377,382,383,402,409,412],"static":[176,211,241,242],"transient":[21,22,24],"true":[9,10,11,12,13,15,24,68,73,74,75,76,77,78,79,80,83,85,88,90,91,98,112,132,133,157,158,181,196,197,214,241,243,244,297,299,301,302,303,304,305,306,307,308,309,311,312,313,314,315,316,317,320,321,324,327,330,332,333,336,337,348,402,410,411],"while":[3,4,12,13,15,18,19,22,43,48,55,204,207,301,347,403,408,409,410,411,412],A:[0,12,13,15,20,98,106,213,241,252,258,269,297,313,324,347,380,402,409,410,412],As:[12,15,18,98,122,179,182,375,410],At:[18,125,152,410],By:[15,18,19,176,211,330,402,409],For:[3,11,12,13,14,15,17,18,19,21,22,53,57,102,121,145,301,336,364,409,412],If:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,21,22,23,24,25,43,48,49,53,55,57,81,86,87,92,93,96,99,100,102,103,104,105,106,108,109,111,114,117,120,123,125,136,148,152,153,197,204,205,207,209,210,213,218,248,249,250,251,252,263,269,270,274,275,276,277,289,297,298,317,330,336,337,353,362,363,402,409,410,412,413],In:[3,15,16,18,21,22,23,24,76,136,179,183,305,337,347,364,410,411,412],It:[1,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,24,25,98,120,148,297,347,402,410,412],No:[12,15],On:[15,16,19,21,120,148],One:[0,3,10,12,15,413],The:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,43,53,55,57,67,73,89,94,99,100,102,103,104,105,108,114,117,118,119,120,131,136,137,145,148,151,153,176,190,197,204,205,207,209,213,214,217,218,247,248,252,258,269,271,273,274,296,297,302,313,314,316,330,334,336,337,346,347,364,402,403,408,409,410,412,413],There:[19,400,403,408,411,413],To:[3,10,12,13,15,17,19,21,68,190,211,297,304,330,402,409,410],With:[10,11,12,13,15],_:13,__add__:[189,190],__array__:[299,301,324],__call__:[145,147,384,385],__contains__:[73,74,75],__delitem__:[176,204,205,207,213,218],__eq__:[27,28,29,42,73,76,177,178,199,200,245,247,271,273,347,348],__getitem__:[61,67,97,98,101,107,119,120,121,122,123,124,145,148,149,150,151,167,174,176,204,205,207,213,229,230,245,248,249,250,251,263,270,271,274,275,276,277,289,298,299,302,303,304,305,307,320,332,380],__index__:410,__iter__:[73,81],__len__:[73,82,119,128,229,231],__mul__:[347,354],__repr__:[73,83,119,129,145,155,176,189,192,206,245,254,271,279],__setitem__:[176,204,205,207,213,218,299,306,307,308,309,321,333],__str__:[73,84,233,235],__truediv__:[189,190,193,347,355],_arrai:18,_bit:25,_dimens:18,_origin:18,_rank:18,_shape:18,a1:18,a2:18,aa:209,abc:[20,190,193,194,196,197,208,211,214,287,317],abort:[26,213,337,339,340,342,344,345,346],abov:[18,86,92,96,98,410],absolut:22,abstracteventloop:[109,409],access:[11,12,13,15,17,18,20,21,22,23,48,49,255,364,402,410,411],accomplish:336,accord:[12,13,15,18,19,120,148,176,177,179,183],account:[21,53,57,76,412],achiev:[12,15],acid:17,acknowledg:336,actual:[136,176,204,207,209,218,252,269,297,304,336,402,410,412],ad:[19,21,99,100,101,102,103,104,105,106,107,174,270,298,332,333],adapt:1,add:[19,27,28,41,55,98,245,269,271,297,410],add_done_callback:[108,110,115,364,365],addit:[3,10,11,12,13,15,16,18,19,21,22,23,25,27,28,41,55,76,97,98,189,193,245,252,269,271,297,337,346,347,364,402,409,410,412],addition:[18,19,73,197,211,258,297,337,409,410],address:16,advanc:[17,26,97,410],advantag:[17,336],advis:13,affect:[19,97,103,104,105,121,124,255,336,380,409,410,412],after:[10,11,12,13,15,19,213,252,269,297,336,353,364,402,409,410,412],ag:213,against:412,alia:[26,27,28,36,50,119,135,139,145,157,158,159,160,161,162,163,165,166,245,262,271,288,299,319,401],align:[19,120,148,248,274,302,306,333,336,412],all:[0,3,10,12,13,14,15,16,17,18,22,23,24,26,43,53,55,57,98,102,103,104,105,106,125,145,152,210,214,252,269,297,305,324,330,336,337,402,409,410,412,413],all_proxi:16,allow:[0,14,15,18,19,20,21,22,98,297,308,309,330,336,337,402,412],allus:21,along:[13,252,258,269,297,313,402,409,412],alreadi:[10,12,13,15,18,19,111,197,211,252,269,297,337,339,342,343,402,409],also:[1,2,3,4,5,6,7,8,9,10,12,13,14,15,17,18,19,20,43,55,73,76,97,98,102,103,104,105,176,211,252,269,297,308,317,336,337,364,375,402,409,410,411,412,413],altern:[16,336,410],alwai:[3,10,11,12,13,15,98,102,306,307,308,309,321,333,410,412],among:3,amount:[97,102,210,380,410],amplif:[25,412],an:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,26,53,57,73,80,95,97,98,99,102,103,104,108,109,111,118,119,120,121,124,125,126,127,136,145,147,148,152,153,154,176,179,182,183,189,193,202,204,205,207,210,211,213,218,219,221,229,233,241,245,248,251,252,258,269,271,274,277,297,299,301,302,305,306,308,309,321,330,333,336,337,344,347,364,374,375,380,384,386,395,400,409,410,411,412,413],analog:17,ancestor:11,ani:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,21,22,26,27,28,31,40,43,44,53,54,55,57,58,59,60,61,62,63,64,65,66,69,98,101,105,107,108,114,119,120,123,127,136,144,145,148,154,167,173,174,176,189,190,191,196,197,204,205,207,209,211,213,214,218,241,242,245,253,263,268,270,271,273,278,280,281,283,284,286,289,292,295,297,298,304,306,308,309,314,320,321,324,330,332,333,336,337,346,347,350,358,402,409,410,411,412,413],anoth:[0,73,74,76,89,94,119,120,131,137,145,148,151,177,178,245,247,271,273,409,410],api:[1,16,17,21],append:[22,189,190,204,205,207,213,218],appl:19,appli:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,22,43,55,97,98,101,107,119,121,145,149,150,167,174,250,263,270,276,289,298,303,314,320,321,380,402,410,412,413],applic:[19,21,312,316,409,412],application_default_credenti:21,appropri:[21,409],aqacaamabaafaayaaaagqqaameeaaebbaabqqqaaye:15,ar:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,25,26,30,41,43,53,55,57,66,76,98,99,101,106,107,119,120,121,124,148,167,174,175,176,210,211,213,252,258,263,269,270,273,279,280,281,283,284,286,289,292,297,298,308,320,321,332,333,336,337,347,375,402,403,408,409,410,412,413],arbitrari:[12,18,22,26,400,409,410],arch:19,archflag:19,architectur:19,archiv:19,aren:19,arg0:[229,230,384,385],arg:410,argument:410,arithmet:3,arm64:19,arr:136,arrai:[2,3,4,5,6,7,8,9,10,11,14,17,18,22,23,26,97,101,107,108,121,124,136,145,150,152,154,167,174,219,221,233,236,245,250,261,263,270,271,276,279,286,289,297,298,299,301,304,305,306,307,308,309,310,314,315,316,319,320,321,323,324,330,332,333,336,337,374,375,377,380,409,411,412,413],arrang:336,array_lik:[26,98,219,221,223,245,252,261,269,271,286,297,299,301,306,307,308,309,316,321,324,333,336,374,402,409,410],ascii:413,aspect:[28,30,32,33,41,43,55,412],aspect_ratio:[12,13,15,28,30,32,41,43,55,412],aspect_ratio_soft_constraint:[28,30,33,41,43,55,412],assert:[71,109,247,273,395],assign:[12,13,18,306,307,308,309,321,333,409,410,411],associ:[73,109,184,186,188,205,213,218,271,287,297,299,317,331,342,402],assum:[10,11,12,13,15,18,297,330,402,412],assume_metadata:[10,12,13,15,297,330],astyp:[299,310],async:[109,337,409,411],asynchron:[17,108,109,110,111,112,113,114,115,117,118,241,299,306,307,308,309,321,324,333,336,337,342,364,411],asyncio:[108,109,111,336,409,411],atom:[11,17,24,337,338,341,409],attempt:[11,21,22,402,409,410],attribut:[11,12,410],augment:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,413],auth:21,authent:[0,16],author:[16,21,22],automat:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,21,115,299,301,337,402,412,413],avail:[0,16,19,359,360,375],averag:3,avif:[9,10,413],avoid:[13,15,109,120,148,402,410],await:[108,109,176,206,208,209,211,212,213,214,216,217,218,299,301,302,303,304,305,311,312,313,314,315,316,317,320,324,327,330,332,336,337,377,402,409,410,411],awar:[15,410],ax:[12,296,302,303],b1:15,b:[11,19,76,106,120,148,151,176,181,185,194,202,204,205,207,208,209,210,211,213,217,218,247,257,273,282,402,410],back:[1,4,5,6,7,8,9,12,13,14,15,17,20,23,337,411],backoff:[21,22],backward:[10,11,12,13,15,97,103,380,410],bandwidth:17,base:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,20,21,22,25,26,118,175,176,189,192,195,206,212,245,247,254,271,273,279,297,310,330,347,349,352,356,377,378,379,382,383,402,410,412,413],base_unit:[347,349,351,353,356,357,412],base_url:22,basic:410,bazel:19,bazel_cach:19,bazel_tool:19,bazelisk:19,bazelisk_hom:19,bazelrc:19,bdist_wheel:19,bear:13,bearer:22,becaus:[11,13,336,409,410],becom:[114,117,209,336,345],been:[15,18,108,112,113,252,269,287,297,314,336,337,339,340,342,345,346,402,409],befor:[10,12,13,15,213,297,330,402],begin:[22,98,108,115,410],behav:121,behavior:[16,18,19,24,98,120,148,213,324,336,410],being:[10,11,12,13,15,19,213,337,409],below:[18,87,93,96,410],best:[12,13,15],better:[9,301,409],between:[4,9,18,21,402,409],bfloat16:[15,26,375,413],big:[12,15,25,413],bill:21,binari:19,binary16:[26,392,413],binary32:[26,393,413],binary64:[26,394,413],bind:[19,197,211,214,297,330,409],bit:[4,12,15,18,25,26,396,397,398,399,404,405,406,407,413],block:[3,12,13,15,20,109,114,117,204,205,207,301,306,307,308,309,321,324,333,336,337,409,412],blocksiz:[12,15,299,302,303,304,305,312,320,327,330,332,337,402,411],blosc:[12,15,19,299,302,303,304,305,312,320,327,330,332,402,412],blosclz:[12,15],bmp:[10,413],bool:[3,15,26,27,28,29,40,42,43,55,58,60,62,63,64,66,73,74,75,76,77,78,79,80,85,88,90,91,98,108,111,112,113,119,125,132,133,145,152,157,158,176,177,178,181,189,196,197,199,200,214,245,247,268,271,273,295,297,299,325,326,330,335,337,338,340,341,343,346,347,348,364,366,367,370,376,402,410,413],bool_:[26,376],boringssl:19,both:[10,12,13,15,18,43,55,120,148,252,269,297,402,409,412],bound:[3,10,12,13,14,15,18,22,26,73,76,77,78,79,80,86,87,89,90,91,92,93,94,98,99,101,102,105,107,119,120,125,130,131,132,133,134,135,136,137,140,145,148,150,152,154,157,158,159,160,161,163,167,168,174,176,177,179,182,183,197,211,213,214,215,217,245,252,264,269,271,273,279,290,297,299,314,317,322,326,330,334,359,361,402,409,410,412],boundari:412,box:[119,131],broadcast:[15,98,107,174,248,252,269,270,274,297,298,302,306,308,309,316,321,332,333,336,402,410,412],broader:409,brotli:19,browser:22,bsd:16,bucket:[2,3,4,5,6,7,8,9,11,13,15,21,25,198,212,216,402,411],buffer:[3,15,409],bug:19,build:17,build_def:19,build_doc:19,build_ext:19,built:[16,19,375,410],bundl:[16,19],bz2:15,bzip2:[12,15,19],bzl:19,c16:15,c8:15,c:[1,17,20,43,48,55,98,106,209,280,292,299,304,305,320,324,330,332,402,410,412],c_rehash:16,cach:[0,10,11,12,13,15,17,19,25,26,61,213,214,299,324,326,330,336,359,360,361,402,411],cache_pool:[0,4,5,6,7,8,9,10,11,12,13,15,25,63,67,69,71,72,279,299,302,303,304,305,320,330,332,336,402,409,411],cacherevalidationbound:[10,11,12,13,15],cafil:[21,22],call:[68,98,108,109,112,115,123,204,205,207,213,243,251,255,304,324,336,339,342,409,410],callabl:[108,110,116,364,365,372,409],callback:[26,110,116,359,362,364,365,372,409],can:[10,12,13,15,16,17,18,19,21,136,210,248,252,258,269,274,297,302,330,336,337,359,360,402,409,410,411,412],cancel:[108,111,112,113,336,364,366,367],cancellederror:[111,112],cannot:[97,98,251,337],canon:412,capabl:[15,410],capath:[21,22],captur:[197,214,297,330],care:[13,402],cartesian:119,cast:[10,26,310,377,413],caus:[14,15,410],cc:209,cd:19,cdot:18,cert:[16,21,22],certain:[18,23],certif:19,chain:[98,410],chang:[18,19,97,100,213,271,297,337,380,410],channel:[4,5,6,7,8,9,13,402,411],charact:[19,22,413],characterist:402,check:[10,12,13,15,73,74,75,342,410],child:[71,72],choic:25,choos:412,chosen:[3,12,13,15,402],chunk:[17,25,26,28,29,30,32,33,34,35,38,39,41,42,43,45,48,52,53,55,56,57,245,252,255,269,271,280,292,297,299,304,305,311,320,330,332,336,402,409],chunk_aspect_ratio:[12,13,15,43,55,402],chunk_aspect_ratio_soft_constraint:[43,55],chunk_el:[12,15,43,55,402],chunk_elements_soft_constraint:[43,55],chunk_layout:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,245,248,249,250,251,252,253,255,263,265,268,269,270,271,280,292,297,299,311,327,402,409,412,413],chunk_shap:[12,15,43,55,402],chunk_shape_soft_constraint:[43,55],chunk_siz:[13,402,411],chunklayout:[12,13,15,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,245,248,249,250,251,252,255,263,265,268,269,270,271,280,297,299,311,402,409,412],chunkss:412,circumst:10,cl:19,clang:19,clear:[43,55],clevel:[12,15,299,302,303,304,305,312,320,327,330,332,402,412],clone:19,close:[18,73,78],cloud:[17,21,23,336,402,411],cloudpickl:409,cloudsdk_config:21,cmake:19,cname:[12,15,299,302,303,304,305,312,320,327,330,332,402,412],coalesc:[336,337],code:19,codec:[14,27,28,43,45,55,245,252,256,269,271,281,292,297,299,312,327,402],codec_chunk:[12,13,15,27,43,45,55,412],codec_chunk_aspect_ratio:[43,55],codec_chunk_aspect_ratio_soft_constraint:[43,55],codec_chunk_el:[43,55],codec_chunk_elements_soft_constraint:[43,55],codec_chunk_shap:[43,55],codec_chunk_shape_soft_constraint:[43,55],codecspec:[13,26,58,59,60,245,252,256,269,271,281,297,299,312,402],colexicograph:[12,13,43,48,55,324,412],column:[43,48,55,324,412],com:[16,19,22],com_github_cares_car:19,com_github_nlohmann_json:19,com_github_pybind_pybind11:19,com_google_boringssl:19,com_google_brotli:19,com_google_snappi:19,com_google_tensorstor:19,combin:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,347,402,410,412,413],comma:[16,19],command:[16,19],commit:[26,204,207,209,213,218,324,336,337,342,343,344,345,346,364,368,409],commit_async:[217,336,337,339,342,344],commit_start:[337,343],commit_sync:[176,308,337,342,344],common:[3,10,14,16,23,43,55,145,410],compar:[27,28,29,42,73,76,177,178,199,200,245,247,271,273,347,348],comparison:[247,252,269,273,297,402],compat:[0,10,11,12,13,14,15,16,18,19,119,136,252,269,297,306,308,309,316,321,333,336,402,410,411,412],compil:19,complement:[26,396,397,398,399,413],complet:[18,108,110,111,113,114,117,204,205,207,209,213,218,241,243,244,306,307,308,309,321,324,333,336,364,410,411],complex128:[15,26,378,413],complex64:[15,26,379,413],complex:[3,26,378,379,410,413],compon:[10,11,12,13,15,22,27,43,119,125,145,152,189,193,245,252,413],compos:[2,17,18,124,145,151,251,277],composit:18,compress:[7,15,302,303,337,402,411,412],compressed_segment:[13,402,411],compressed_segmentation_block_s:[13,402,411],compression_level:7,compressor:[12,256,281,286,299,304,305,312,320,327,330,332,402,412],comput:[3,14,18,21,119,131,204,205,207,248,274,299,302,303,304,305,320,332,409,410],concaten:16,concis:23,concurr:[0,10,11,12,13,15,16,17,20,21,22,23,108,214,297,330,336],condit:[21,120,148,213,218,362,363],config:21,configur:[0,17,21,22],confirm:402,confus:410,conjunct:[18,297,330,402,412],connect:[16,17,21,22],consecut:[21,98,410],consequ:[121,124,197,214,297,330],consid:[12,336,412],consist:[10,11,12,13,15,17,98,136,213,410],constant:[1,18,26,219,220,233,237,395,410],constrain:[12,13,14,17,18,252,269,297,402,409,410,412],constraint:[1,2,3,4,5,6,7,8,9,10,11,14,18,27,28,30,33,35,38,39,41,43,46,47,48,49,53,55,57,245,252,255,256,258,269,271,280,281,283,284,286,292,297,330,347,402,409,412,413],construct:[27,28,30,31,43,44,58,59,61,68,69,70,72,73,77,78,79,80,119,125,126,127,145,152,153,154,177,179,184,185,189,191,199,201,219,220,221,222,245,252,253,271,278,347,349,350,351,352,353,380,381,384,385,386,387],constructor:68,consum:[26,98,108,210,364,410],contain:[3,11,16,18,19,73,74,75,81,98,102,119,131,177,181,353,409,410,411,412],content:[20,26,402,409],context:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,20,21,22,23,24,25,26,61,62,63,64,65,66,67,68,69,70,71,72,98,108,196,197,206,208,211,214,273,279,297,299,301,302,303,304,305,310,317,320,330,332,336,337,374,377,402,409,410,411,413],context_a:273,context_b:273,contextresourc:[0,1,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,24,25],contigu:[1,73,324],continu:[204,205,207],contrast:410,contribut:25,control:[22,336],conveni:[1,4,5,6,7,8,9,10,11,12,13,14,15,21,25,305],convers:[2,299,301,411],convert:[2,4,12,27,28,40,43,54,55,58,60,108,109,123,189,196,197,214,245,252,268,269,271,295,297,306,308,309,321,330,333,336,347,358,374,402,410],coordin:[98,410],copi:[0,18,19,176,177,180,189,194,208,245,247,255,257,271,273,282,336,364,369,410],core:[0,17,410],coroutin:[109,118,409],correctli:18,correspond:[12,13,15,18,21,22,23,24,25,26,30,41,43,55,89,94,98,99,108,109,131,136,137,241,252,258,269,297,313,364,375,376,378,379,392,393,394,396,397,398,399,400,402,403,404,405,406,407,408,409,410,412,413],corrupt:[10,12,13,15,297,330,402],cost:18,count:136,cpu:[0,19],crash:336,creat:[1,2,3,4,5,6,7,8,9,10,11,14,17,19,26,61,64,65,67,176,197,211,214,241,242,258,271,297,299,301,302,303,304,305,306,307,308,309,311,312,313,314,315,316,317,320,321,324,327,330,332,333,336,337,338,409,411,412,413],credenti:[0,21,26,61,411],crlf:22,cross:19,crt:[16,21,22],curl:[19,21,22],current:[0,8,15,18,19,108,204,205,207,213,299,301,324,336,337,409,411],custom:24,d:[26,73,98,99,100,101,102,103,104,105,106,107,120,121,146,147,148,149,246,249,272,275,295,296,300,303,307,380,381,395,410,411],dask:410,data:[0,1,2,3,10,11,14,17,22,23,24,25,190,191,192,193,194,195,206,208,213,245,252,260,269,271,285,297,304,306,308,309,310,312,315,316,321,324,330,333,336,359,360,361,362,363,374,375,376,377,384,385,386,392,393,394,396,397,398,399,400,402,403,406,408,409,410,412,413],data_copy_concurr:[0,1,4,5,6,7,8,9,10,11,12,13,14,15,25,98,108,279,299,302,303,304,305,310,320,330,332,377,402,409,410,411],data_encod:[13,25,402,411],data_typ:13,dataabc:190,databas:17,dataset:[12,20,21,24,196,299,301,302,303,304,305,306,307,308,309,314,315,319,320,321,323,324,330,332,333,336,337],dataset_3d:411,dataset_futur:411,datatyp:[12,285,302,303,337,402,411],date:[19,22],datetim:15,deadlin:[114,117,371,373],deadlock:[109,409],decod:[0,17,26,58,412],decrypt:16,def:[109,409],defer:410,defin:[0,1,4,5,6,7,8,9,10,11,12,13,14,15,18,20,21,22,24,25,26,98,119,245,375,409,410,412],del:204,delai:[21,22],delet:[10,12,13,15,176,204,207,209,218,297,330,402],delete_exist:[10,12,13,15,297,330,337,402,411],delete_rang:[176,209],demand:14,demonstr:411,denot:410,depend:[16,21,22,98,324,336,410,413],deprec:[15,410],depth:4,deriv:[14,347,356],describ:[14,18,23,26,27,28],desir:258,detail:[16,17,22],determin:[10,12,18,25,120,148,176,402,412],determinist:3,develop:21,deviat:[347,412],dexpr:410,diagon:[97,99,380],did:[114,117],differ:[3,10,12,13,15,18,22,23,101,107,108,167,174,213,252,263,269,270,289,297,298,320,321,327,330,332,333,402,403,408,409],dim:[26,53,57,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,119,120,122,126,148,152,173,219,221,224,395],dimens:[3,14,15,17,18,26,27,28,30,37,41,43,51,53,55,57,73,77,78,79,80,95,97,99,100,101,102,103,104,105,106,107,119,121,122,123,125,126,128,132,133,136,138,141,145,146,149,152,157,158,162,174,219,222,245,246,248,249,252,258,269,270,271,272,274,275,283,288,291,295,296,297,298,299,300,302,303,307,313,323,332,333,337,347,351,380,381,401,402,409,411],dimension:[3,17,18,26,98,119,299,410],dimension_separ:[15,299,304,305,320,330,332,402],dimension_unit:[12,13,14,245,252,258,269,271,283,297,299,313,402,409,412],dimensionless:[12,347,412],dimexpress:[26,97,98,99,100,101,102,103,104,105,106,107,119,121,145,149,245,249,271,275,299,303,307,380,410],dimselectionlik:[97,106,119,123,380,381],direct:98,directli:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,136,145,190,280,281,283,284,286,292,306,307,308,309,321,333,347,409,410,412,413],directori:[16,19,20,21,22,23,24,25],disabl:[15,16],discrep:[120,148],disjoint:336,dist:19,distribut:[16,19,402],divid:[347,355,410],divisor:[347,355],do_read:409,do_writ:409,doc:19,document:[16,23,412,413],doe:[10,12,13,15,16,18,19,20,22,68,98,100,102,103,104,105,136,145,280,281,283,284,286,287,292,297,304,317,330,336,347,375,402,410,412],domain:[3,14,17,26,97,98,99,100,101,102,103,104,105,106,107,108,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,151,152,153,154,156,157,158,159,160,161,162,163,165,167,168,171,172,174,245,246,248,249,250,251,252,258,259,263,264,266,267,269,270,271,272,274,277,283,284,290,291,292,293,294,296,297,298,299,300,301,302,303,305,306,307,308,309,313,314,321,322,323,324,327,328,329,332,333,336,380,395,401,402,409,410,411,412],domin:410,don:19,done:[17,19,21,102,108,109,113,241,243,244,252,269,297,364,370,402,410],dot:15,doubl:[26,347,394,412,413],download:19,downsampl:[10,26,382,383,413],downsample_factor:[3,26,382,383],downsample_method:3,downsamplemethod:[3,382,383],driver:[0,17,26,58,98,108,176,190,191,192,193,194,195,196,197,198,204,205,206,207,208,209,210,211,212,213,214,216,217,218,245,256,258,271,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,291,292,295,296,297,298,299,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,320,321,324,327,330,332,333,336,337,347,377,402,410,411,412,413],drop:[18,336],dtype:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,26,98,108,245,247,252,253,254,257,260,265,268,269,271,282,284,285,286,292,297,299,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,319,320,321,323,324,327,330,332,333,336,337,374,375,376,377,378,379,384,385,386,387,388,389,390,391,392,393,394,396,397,398,399,400,402,403,404,405,406,407,408,409,410,411,412,413],due:[13,20,25,213],dummi:[98,410],duplic:[100,410],durabl:[17,204,207,209,218,336,364],dynam:16,e:[12,13,15,16,18,19,21,26,43,48,55,96,98,102,103,104,105,120,124,148,213,214,255,324,330,337,409,410,412],each:[0,3,10,11,12,13,14,15,16,18,22,25,30,41,68,100,102,103,104,105,119,125,132,133,136,138,145,152,157,158,162,245,252,255,258,269,271,283,297,299,301,313,402,409,410,412,413],earlier:[14,19],easili:410,effect:[14,18,98,120,148,197,214,271,280,281,283,284,286,292,297,330,339,342,410],effici:[3,13,17,18,27,52,53,56,57,336,337,412,413],effort:19,either:[9,10,12,13,15,18,21,26,73,120,123,148,306,307,308,309,321,333,336,337,345,380,402,410],element:[2,3,13,27,28,30,34,35,41,43,48,49,54,55,98,119,143,145,172,245,267,271,279,294,299,329,410,412],elements_soft_constraint:[28,30,35,41,43,55,412],empti:[11,12,18,73,85,89,94,95,120,148,177,179,181,182,183,202,218,252,269,297,347,362,363,402,409,410,412],enabl:[10,12,13,15,17,21,73,81,145,336,409,410],encod:[0,4,6,9,12,15,17,19,22,25,26,58,402,411,412,413],end:[21,22,23,24,25,106,136,410],endian:[12,13,15,25,413],engin:21,enhanc:410,ensur:[19,108,115,190,258,336,337,402,410],entir:[11,13,15,18,25,120,148,301,336,353,410,412,413],entri:[199,202],environ:[19,21,22],epoch:[10,114,117,199,203,213],equal:[0,1,12,13,15,18,25,26,27,28,29,42,48,49,66,73,76,86,87,92,93,96,98,99,124,177,178,199,200,245,247,248,249,251,252,269,271,273,274,275,277,287,297,302,305,306,309,312,316,317,347,348,395,402,409,410,412],equival:[3,4,12,15,22,43,55,73,82,98,99,102,103,104,106,119,124,136,146,168,171,172,213,246,252,264,266,267,269,272,290,293,294,297,300,301,305,322,323,328,329,330,336,344,351,402,409,410,412],error:[11,12,13,14,15,18,21,22,108,109,114,117,120,148,204,205,207,213,241,243,252,269,297,344,402,409,410],escap:19,etag:22,etc:[3,16,19,21,22,327],even:[3,11,17,22,66,204,207,410],evenli:412,event:[109,409],everi:[10,11,12,13,15,17,18,22,25,99,402,409,412],evict:0,exactli:[3,12,13,15,98,402,409,410],exampl:[19,191,211,337,409,411],except:[12,13,15,102,108,109,112,114,115,204,205,207,241,243,252,269,273,297,337,364,371,402,409,410,412],excess:13,exclud:23,exclus:[18,73,77,86,87,119,125,130,145,152,159,177,179,182,410],exclusive_max:[12,13,15,18,73,74,75,76,77,78,81,83,84,86,87,88,89,90,91,92,94,96,119,120,121,122,123,124,125,127,130,131,132,133,136,137,148,152,153,159,173,177,179,182,248,249,250,263,270,274,292,297,302,306,327,410],exclusive_min:[73,87,93],execut:[0,19,108,115,402,409],exist:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,19,98,102,120,148,152,153,204,205,207,209,211,213,218,252,258,269,297,306,308,309,321,330,333,336,362,363,384,386,409,410,412,413],exit:337,expect:[16,19,118,258,410],experiment:[5,8],explicit:[10,18,73,119,124,125,132,133,145,152,157,158,245,248,251,252,269,271,274,277,297,299,302,305,306,309,336,402,409,410,412],explicitli:[12,13,15,115,410,412],exponenti:21,expos:11,expr:[102,119,121,145,149,245,249,251,271,275,277,299,303,305,307,309,410],express:[17,26,73,83,97,98,100,101,102,103,104,105,106,107,119,121,136,145,149,245,249,271,275,299,303,307,380,401],extend:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,20,21,22,24,25],extens:[15,19,98,375],extent:[15,18,143,204,207,209,218,412],extern:[197,213,214,297,330,337],extract:[97,99,380,410],f2:15,f4:[15,286,402],f8:15,f:[15,108,299,324,336,402,409],facil:16,factor:3,fail:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,213,337,409,410,413],fake:21,fals:[10,12,13,15,24,28,40,58,60,62,63,64,66,74,75,77,78,79,80,88,90,91,96,98,109,112,132,133,157,158,181,189,196,197,214,241,243,244,245,268,271,295,297,299,326,330,337,338,402,410,412],faster:19,fastest:[12,15,19],fetch:19,few:410,fewer:[0,410],field:[15,89,94,412],file:[4,5,7,8,9,11,12,13,15,16,17,19,21,23,24,190,191,192,193,194,195,196,206,208,336,337,402,411],file_io_concurr:[0,20,71,72,196,206,208],filesystem:[0,17,20,23,402,411],fill:[17,106,245,252,261,269,271,286,297,299,316,402,411,412],fill_valu:[14,15,245,247,252,261,269,271,286,297,299,304,305,316,320,327,330,332,402,412],filter:[15,256,299,304,305,312,320,327,330,332,402,412],find:[16,19],fine:[306,307,308,309,321,333],finit:[18,73,80,81,88,96,136,252,269,297,402,409,412],first:[13,18,19,98,99,107,174,270,298,332,333,402,410,412],fix:[336,403,408],fix_resizable_bound:[299,326],flag:[19,89,94,131,137],flatten:410,float16:[15,26,392,413],float32:[12,13,15,26,286,311,377,379,393,402,413],float64:[12,15,26,378,394,413],fly:3,flyeem:411,flyem:402,fold:22,follow:[3,12,13,14,15,16,18,19,21,22,118,120,148,252,269,297,347,402,409,410,412,413],forc:[108,115],form:[18,67,305,410],format:[12,13,15,16,17,25,402,412,413],fortran:[12,13,43,48,55,324,412],forward:364,found:205,fraction:213,fragment:22,framework:61,free:409,frequent:3,fresh:[10,11,12,13,15],from:[0,1,2,3,8,10,11,12,13,14,15,17,18,20,21,22,26,27,28,31,43,44,55,58,59,61,64,65,69,70,71,72,98,99,106,119,122,125,126,127,136,145,152,153,154,177,179,189,191,199,201,210,211,213,245,252,253,255,271,278,301,336,337,347,349,350,352,353,356,374,380,381,384,386,402,410,411,412],fsync:336,fulfil:[359,361],full:[11,15,18,24,98,330,410,412],fulli:[15,17,18,145,197,214,297,330,336,402],further:412,futur:[19,26,108,109,110,111,112,113,114,115,116,117,118,176,209,210,211,213,218,241,242,243,244,299,324,326,336,337,342,345,364,365,368,369,372,402,411],futurelik:[26,108,109,118,409],g:[15,16,21,26,98,102,103,104,105,214,255,330,337,409,410],gc:[2,3,11,15,23,24,198,212,216,336,402,411],gcc:19,gce:21,gcloud:21,gcs_request_concurr:[16,21,402,411],gcs_request_retri:[21,402,411],gcs_user_project:[21,402,411],gener:[19,98,176,184,186,199,200,201,202,203,213,218,305,347,359,360,362,363,409,410,412],get_running_loop:[109,409],get_valu:109,git:19,github:19,given:[0,3,20,61,67,73,75,98,102,103,104,105,410,412],global:[0,21,22,409],good:25,googl:[17,19,21,336,411],google_application_credenti:[16,21],googleapi:16,grain:[306,307,308,309,321,333],granular:[13,412],graph:[197,214,297,330],grei:4,greya:4,grid:[12,13,15,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,45,46,47,52,55,56,336,412],grid_origin:[12,13,15,27,43,46,47,53,55,57,248,249,250,251,252,253,255,263,265,268,270,292,311,327,412],grid_origin_soft_constraint:[27,43,47,53,55,57,412],grid_soft_constraint:[30,41],group:[13,25,26,337],gs:[4,5,6,7,8,9,13,21,23,25,198,216,411],gsutil:21,guarante:[11,17,204,207,209,213,218,336,337,364,375],guid:17,gzip:[12,13,15,25,402,411,412],ha:[12,13,14,15,18,21,98,105,106,108,111,112,113,197,209,214,252,269,287,297,316,330,336,337,339,340,342,343,345,346,364,402,409,410],half:[0,26,73,77,176,177,179,392,413],handl:[21,22,26,61,62,67,108,233,235,241,299,364,409],hard:[12,13,15,18,27,28,30,38,41,43,46,48,49,53,55,57,412],hash:[13,25,402,411],have:[12,13,14,15,18,19,21,22,73,100,120,148,197,214,248,252,269,274,297,302,314,330,337,375,402,410,411,412],header:[12,15,22],height:[4,5,6,7,8,9],help:25,hemibrain:402,here:12,hierarch:412,high:[17,402],higher:[4,9,12,15,213],hit:411,hold:364,hostnam:16,how:[16,21,22,412],howev:[3,15,19,21,98,108,145,409],htab:22,http:[19,21,23],http_archiv:19,http_proxi:16,http_request_concurr:22,http_request_retri:22,https_proxi:16,hull:[14,73,89,119,131],i1:15,i2:15,i4:[15,402],i8:15,i:[0,12,13,15,17,18,21,43,48,53,55,57,96,98,102,106,120,124,148,204,205,207,213,221,222,280,281,283,284,286,292,324,336,337,410,411,412],id:[0,15,21,25,67,299,304,305,312,320,327,330,332,402,412],ident:[12,13,18,25,124,152,153,214,273,330,402,411],identifi:[0,10,12,15,18,19,23,119,120,122,148,176,199,202,409,410,412,413],ieee:[26,392,393,394,413],iexpr:410,if_equ:[218,362,363],if_not_equ:[213,359,360,409],ignor:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,53,57,412,413],ijg:13,imag:[4,5,6,7,8,9,13],imaginari:413,immedi:[18,109,118,410],immut:[119,347,409,410],implement:[11,15,17,19,25,213],impli:[271,280,281,283,284,286,292],implicit:[12,13,14,15,18,26,73,77,78,79,80,89,90,91,94,98,99,119,120,125,131,132,133,137,145,148,152,157,158,252,269,297,402,409,410,412],implicit_low:[73,76,77,78,79,80,90],implicit_lower_bound:[119,125,132,145,152,157,173,410],implicit_upp:[73,76,77,78,79,80,83,91],implicit_upper_bound:[119,125,133,145,152,158,173],implicitli:[12,13,15,18,410,411,412],impos:[18,347,412],improv:[336,337],includ:[12,13,15,16,17,19,22,24,26,66,119,123,271,280,281,283,284,286,292,306,308,309,321,324,330,333,336,410,412],include_default:[28,40,58,60,62,63,64,66,189,196,245,268,271,295],inclus:[18,73,77,78,79,92,93,119,125,134,135,140,145,152,160,161,163,168,177,179,183,245,264,271,290,299,322,410],inclusive_max:[18,73,76,78,86,87,91,92,93,96,119,125,134,160,395],inclusive_min:[12,13,15,18,73,74,75,76,77,78,79,81,83,84,86,87,88,89,90,91,92,93,94,96,119,120,121,122,123,124,125,127,130,131,132,133,134,135,136,137,138,140,142,143,148,152,153,161,173,177,179,183,248,249,250,263,270,274,292,297,302,306,327,395],incompat:[14,53,57,252,269,297,402,409],inconsist:11,increment:[19,252,258,269,297,313,402,409,412],incur:9,indefinit:409,independ:[13,18,26,245,402,412],index:[3,4,5,6,7,8,9,13,17,25,27,51,73,75,97,99,100,101,102,103,104,105,106,107,120,121,122,123,124,125,126,127,136,141,147,148,149,150,151,152,153,154,156,167,169,174,175,219,221,229,233,248,250,251,252,258,263,269,270,274,276,277,284,289,296,297,298,302,304,305,306,308,309,313,320,321,332,333,380,395,401,402,409,412],index_arrai:[18,154,173,219,221,223,251,276,277,289,298,304,305,309,320,332],index_array_bound:[18,154],index_exp:[119,136,409],index_rang:[152,173,219,221,224],indexdomain:[12,13,15,18,26,27,53,57,73,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,148,153,156,245,248,249,250,251,252,259,263,269,270,271,274,284,297,299,302,303,306,307,314,402,409,410,412],indexerror:[98,100,102,103,104,105,251,410],indexinterv:18,indextransform:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,26,98,99,100,101,102,103,104,105,106,107,119,121,124,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,219,220,221,222,229,233,245,250,251,263,270,271,274,275,276,277,289,296,298,299,302,303,305,309,401,410,413],indic:[3,12,13,15,18,26,66,73,77,78,79,80,81,88,90,91,95,97,98,101,102,106,107,119,120,125,132,133,136,145,147,148,150,152,157,158,167,174,177,179,181,182,183,184,187,202,213,218,233,245,250,251,252,258,263,269,270,271,276,277,279,289,297,298,299,304,305,308,309,313,320,321,325,330,332,333,335,336,337,340,341,343,346,347,364,380,381,395,402,409,410,412],indicaet:12,indirectli:[145,412],individu:[11,13,14,410,412],ineffici:13,inf:[18,26,53,57,73,77,78,80,84,86,87,92,93,98,99,100,101,105,107,124,125,127,149,150,151,152,154,167,174,185,201,213,395,401,409,410],infinit:[18,73,136,252,269,297,402,409,412],info:13,inform:[16,19,21,22,402],infti:18,inherit:[61,69,70,71],init:0,initi:[1,19,21,22,409,410],initial_delai:[21,22],inlin:410,inner:[15,48,49,73,74],inner_ord:[12,13,15,27,43,48,49,50,51,54,55,248,249,250,251,252,253,255,263,268,270,292,311,327,402,412],inner_order_soft_constraint:[27,43,48,49,55,412],innermost:[27,43,48,55,412],input:[1,2,3,4,5,6,7,8,9,10,12,13,14,15,18,26,97,98,99,100,101,102,103,104,105,106,107,123,145,147,148,149,150,151,152,153,154,156,157,158,159,160,161,162,163,164,165,166,167,174,219,222,252,269,296,297,380,401,402,409,410,413],input_dimens:[14,18,124,151,152,153,154,173,219,222,225,276,295,304,332,410,411],input_exclusive_max:[14,18,98,108,145,148,152,154,157,158,159,173,274,275,276,277,289,295,297,298,299,302,303,304,305,310,320,330,332,377,402,410,411],input_inclusive_max:[18,102,145,152,160],input_inclusive_min:[14,18,98,102,103,104,108,145,148,152,154,157,158,159,160,161,162,163,173,274,275,276,277,289,295,297,298,299,302,303,304,305,310,320,330,332,377,402,410,411],input_label:[18,98,99,101,102,103,104,105,106,107,145,148,152,154,156,162,164,166,170,173,274,275,302,303,402,410,411],input_origin:[145,161,163],input_rank:[18,98,124,145,147,148,149,151,152,157,158,164,166,220,222,251,277,305,401,410],input_shap:[18,99,103,104,105,106,145,152,156,157,158,159,160,161,162,163,164,165,166,170,173,221,251,274,275,276,277,289,298,305,309,410],insensit:22,insert:410,instal:[17,21],instanc:[0,68,111,384,385],instead:[10,11,12,13,15,16,19,108,136,145,190,213,297,305,330,336,402,409,410],instruct:17,int16:[12,13,15,26,396,413],int32:[1,2,12,13,14,15,26,98,247,319,323,397,402,410,413],int64:[12,15,26,398,413],int8:[12,13,15,26,399,413],integ:[0,1,2,3,4,5,6,7,8,9,10,12,13,14,15,18,21,22,25,26,73,101,121,122,124,167,263,289,320,321,396,397,398,399,404,405,406,407,412,413],integr:410,intend:[19,21,23,24,25],interdepend:[197,214,297,330],interfac:[17,25,176,241,306,307,308,309,321,333,364],interleav:410,intermedi:410,intern:[12,13,213],interoper:[299,301,375,411],interpret:[22,136,184,187,347,410,412,413],interrupt:[114,117],intersect:[73,94,99,119,137],interv:[3,18,26,53,57,73,74,75,76,77,78,79,80,81,82,84,86,87,88,92,93,96,176,177],introduc:17,introspect:67,invoc:[19,410],invok:[19,108,110],involv:[18,410],ip:16,irrespect:[102,213],isol:[17,337],isomorph:[197,214,297,330],issu:336,iter:[73,81],its:[18,20,61,64,65,69,119,127,145,154,213,245,253,347,350,410,412],itself:[11,19,336,364,410],j:[18,120,148],janelia:402,jax:[15,375],join:[10,11,12,13,15,189,193],jointli:336,jpeg:[10,13,19,25,413],jpeg_qual:13,jpg:6,json:[0,1,2,3,4,5,6,7,8,9,10,12,14,15,16,17,18,19,20,21,22,23,24,26,27,28,31,40,43,44,45,46,47,48,49,52,54,55,56,58,59,60,61,62,63,64,65,66,69,119,127,144,145,154,173,176,189,191,192,196,206,211,245,247,253,254,268,271,273,278,279,295,347,350,358,400,402,412],json_point:11,just:[10,12,13,15,18,297,330,402,410,411],k:[106,120,148],keep:336,kei:[11,12,13,15,17,26,61,67,176,177,179,181,184,188,189,190,193,194,195,198,199,202,204,205,207,208,209,210,211,212,213,214,215,216,217,218,271,287,297,299,317,336,337,402,411,412],kept:[13,19],key_encod:15,keyboard:[114,117],keyboardinterrupt:[114,117],keyerror:[204,205,207,213],keyrang:[176,177,178,179,180,181,182,183,209,210],keyvaluestorebackedchunkdriv:[10,12,13,15,413],keyword:108,know:402,kvstore:[2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,23,24,25,26,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,271,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,291,292,295,296,297,298,299,301,302,303,304,305,306,307,308,309,311,312,313,314,315,316,317,320,321,324,327,330,332,333,336,337,402,409,411],kvstoreurl:[10,11,12,13,15,20,21,22,23,24],label:[12,13,15,17,18,26,73,76,77,78,79,80,83,84,89,94,95,97,98,99,100,106,119,121,122,123,125,126,127,131,137,138,145,149,152,162,248,249,250,251,252,259,263,269,270,274,297,302,303,306,307,314,380,381,402,409,412],lambda:108,larg:[17,210,301],larger:[18,411],largest:13,last:[18,98,112,122,123,204,205,207,213,243,251,410],latenc:[17,336,402],later:[19,20,402],latest:19,latter:15,layer:[11,12,13,15,336,412],layout:[17,26,27,28,42,43,50,51,53,54,55,57,245,252,255,269,271,280,297,299,311,324,402,409],lead:[10,12,13,15,18,109,297,330,353,402,412],least:[0,12,18,120,148,410],leav:[12,102,103,104,409],left:[13,18,120,148,402,409],legaci:410,len:128,length:[3,12,15,18,26,147,403,408,410,412],leq:18,less:[18,252,258,269,297,313,347,351,402,409,410,412],level:[2,7,12,15,16,17,213,411,412],lexicograph:[3,43,48,55,176,177,179,183,324,412],libavif:19,libcurl:16,libjpeg:19,libpng:19,librari:[15,17,136,145,410],libtiff:19,libwebp:19,lightweight:410,like:[16,17,21,22,121,124,258,402,410],likewis:410,limit:[0,8,17,18,21,22,23,71,72,364,409],line:22,link:[16,19,241,242,243,244],linux:[16,19],list:[12,16,18,19,81,122,176,209,210,213,382,383,402,410],liter:410,littl:[13,15,413],load:19,local:[0,16,17,20,21,23],localhost:21,locat:[16,21,22,327,402],lock:20,logic:[18,119,336,413],login:21,longer:364,loop:[109,409],loss:9,lossi:9,lossless:9,lost:11,low:[18,25],lower:[3,4,18,73,77,78,79,80,87,90,93,99,102,105,119,125,132,135,136,140,145,152,157,161,163,168,177,179,183,245,264,271,290,299,322,410,412],lowest:3,lru:0,lz4:[12,15,19,299,302,303,304,305,312,320,327,330,332,402,412],lz4hc:[12,15],m1:18,m2:18,m:[18,19,412],mac:16,machin:[17,20,21,402],maco:19,macosx_deployment_target:19,made:[213,337,409],mai:[0,3,11,12,13,14,15,16,18,19,20,21,22,23,24,25,73,102,103,104,105,106,109,118,119,123,125,152,176,204,205,207,211,213,214,217,241,258,299,301,306,308,309,312,321,324,327,330,333,334,336,342,346,347,359,361,380,402,409,410,412,413],main:[114,117],major:[43,48,55,324,412],make:[16,19,412],manag:[26,61,337],mani:[16,18,21,22,98,145,402,410],manipul:24,manual:[18,19],map:[0,14,18,25,26,98,99,100,101,102,103,104,105,106,107,121,124,145,147,148,149,150,151,152,153,154,167,169,174,176,219,220,221,222,229,296,401,410],mark:[18,73,111,241,243,244,410],match:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,22,24,89,94,100,102,103,104,105,120,148,210,213,218,252,269,297,330,362,363,402,409,410,412,413],mathrm:[18,25],mathtt:18,max:3,max_delai:[21,22],max_retri:[21,22],maximum:[0,3,21,22,114,117],mayb:19,mean:[3,10,11,12,13,15,410],meaning:96,mechan:[4,5,6,7,8,9,10,11,12,13,15,17,176,364,410],median:3,member:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,20,21,22,23,24,25,43,45,46,47,48,49,52,55,56,66,412,413],memori:[0,1,10,12,13,15,17,18,22,23,26,176,197,204,205,207,209,210,211,213,214,217,218,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,291,292,295,296,297,298,299,301,302,303,304,305,306,307,308,309,311,312,313,314,315,316,317,320,321,324,327,330,332,333,336,337,374,402,409,411,413],memory_key_value_stor:[24,197,214,279,299,302,303,304,305,317,320,330,332,402],mere:[304,336,364],merg:[30,41,252,269,297,402,409,412],metadata:[10,12,13,15,21,25,258,280,281,283,284,285,286,288,291,292,295,296,297,299,302,303,304,305,320,330,332,337,411],metadata_kei:15,metdata:12,method:[3,12,15,21,26,219,226,233,305,382,383,410,411],microsoft:19,middl:411,million:[12,13,15],min:[3,18],mind:336,minim:[402,410],minimal_spec:330,minimum:[3,19,119,131],minishard:25,minishard_bit:[13,25,402,411],minishard_index_encod:[13,25,402,411],mismatch:18,miss:[176,184,185,187,213,218,412],mix:410,mode:[3,19,98,101,107,271,297,299,318,330,337,402],model:15,modif:[26,337],modifi:[11,18,119,189,197,255,336],modul:[19,409],more:[1,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,23,25,98,123,305,336,409,410,413],most:[3,13,15,16,18,21,23,98,112,123,125,152,176,204,205,207,213,243,251,305,336,410,412],ms:16,msvc:19,much:19,multi:[17,24,26,299],multipl:[0,3,10,12,13,15,17,18,19,20,21,22,24,258,297,306,307,308,309,321,330,333,336,337,402,409,410],multipli:[12,13,18,347,349,351,352,353,354,357,412],multiscal:13,multiscale_metadata:[13,402,411],murmurhash3_x86_128:25,must:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,21,22,43,55,68,89,94,98,106,115,124,213,248,251,252,269,274,277,297,302,305,306,309,330,336,402,409,410,412,413],my:[2,3,4,5,6,7,8,9,11,13,15,21,22,25,198,212,216],n5:[10,17,273,278,279,282,283,285,287,288,291,295,296,297,302,303,306,307,313,314,317,337,402,412],n:[18,26,98,119,410],name:[12,13,15,19,22,233,235,238,384,387,388,409,410],nanomet:13,nasm:19,nativ:[12,15,17,410],ndarrai:[299,301,409,410,411],ndim:[27,28,36,50,119,139,145,166,245,262,271,288,299,319],nearest:3,necessari:[10,12,13,15,16,18,120,148,297,330,402,413],necessarili:[98,410,412],need:[18,19,98,145,347,410,412],neg:[106,122,136,410,412],neither:[10,11,12,13,15,18,330,402,409],neq:18,nest:[1,14,18,197,211,297],nesteddirectorystor:15,net_zlib:19,net_zstd:19,network:[17,20,21,22],neuroglanc:[13,17,25,402,411,412],neuroglancer_multiscale_volum:13,neuroglancer_precomput:[10,25,258,402,411,412],neuroglancer_uint64_shard:[13,23],neuroglancer_uint64_sharded_v1:[13,25,402,411],never:[10,324,336,410],newaxi:[26,98,99,401,410],newer:[359,360],newli:99,nghttp2:19,nlohmann:19,nm:[12,13,258,283,313,348,349,350,352,353,354,355,356,358,412],no_proxi:16,non:[3,10,11,12,13,15,18,19,21,25,89,94,98,106,120,148,176,211,252,269,297,337,362,363,364,402,409,410,412],none:[18,21,22,26,27,28,30,32,33,34,35,36,37,38,39,41,43,46,47,48,49,53,54,55,57,61,68,69,70,73,77,78,79,80,97,98,102,103,104,105,108,109,110,114,115,116,117,119,125,136,145,152,153,176,189,197,204,207,209,210,211,213,214,215,217,218,219,223,224,225,228,241,243,244,245,248,249,250,251,252,256,258,259,260,261,262,263,265,269,270,271,274,275,276,277,281,283,284,285,286,287,288,289,291,296,297,298,299,301,304,305,312,313,316,317,320,327,330,331,332,334,337,339,342,344,345,364,365,368,369,371,372,373,374,380,401,402,409,410],nonzero:[98,410],nor:[10,12,13,15,18,330,402,409],normal:[1,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,22,25,120,148,252,269,297,336,337,402,410],note:[3,12,13,16,18,19,98,252,269,297,402,409],now:[336,402],np:[136,301,409,411],num_channel:[13,402,411],number:[0,3,4,6,7,8,9,10,12,13,18,19,21,22,25,26,27,28,30,34,35,37,41,43,51,55,100,102,103,104,105,114,117,119,125,128,136,141,143,145,152,172,210,245,267,271,294,299,323,329,347,353,378,379,410,412,413],numer:[3,18,347,410,412],numpi:[15,18,26,97,98,101,102,107,119,136,145,150,167,174,245,250,251,263,270,271,276,277,289,298,299,301,304,308,320,321,332,333,375,376,378,379,380,384,386,392,393,394,396,397,398,399,400,403,404,405,406,407,408,411],numpy_dtyp:[384,389],numpyindexingspec:[97,98,101,107,145,150,167,174,245,250,263,270,271,276,289,298,299,304,308,320,321,332,333,380],o:[0,17,204,205,207,280,281,283,284,286,292,324,410,411],oauth2:16,obj:[150,410],object:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,20,21,22,23,24,25,26,89,94,108,109,114,117,119,126,131,136,137,152,153,198,212,216,241,243,244,255,301,336,337,347,364,371,373,384,385,391,410,411,412,413],object_:[400,403,408],observ:[337,409],obsolet:22,obtain:[12,15,98,119,255,299,326,410,411],occupi:413,occur:[18,108,204,205,207,410],odd:3,offer:3,offici:15,offset:[3,14,18,27,53,57,97,103,104,124,151,152,153,154,170,173,219,220,221,222,227,295,380,410,411,412],often:[21,336],oindex:[97,101,145,150,167,245,250,251,263,270,271,276,277,289,298,299,304,305,308,309,320,321,332,333,380],older:[10,11,12,13,15,213,359,361],omit:[14,402,410],onc:[18,26,123,218,336,337,346,364,409],one:[12,15,16,18,21,25,98,99,120,125,148,152,252,269,297,305,402,409,410,412],ones:12,onli:[0,3,8,10,11,12,13,14,15,16,18,19,20,22,43,53,55,57,98,99,108,125,152,218,252,269,280,281,283,284,286,292,297,318,324,336,337,364,402,409,410,411,412],onto:410,op1:410,open:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,25,26,73,77,108,176,177,179,197,204,205,206,207,208,209,210,211,212,213,214,216,217,218,258,271,297,299,301,302,303,304,305,306,307,308,309,311,312,313,314,315,316,317,320,321,324,327,330,332,333,336,337,346,409,410,411,412,413],openssl:16,oper:[0,10,11,12,13,14,15,16,17,18,19,20,25,26,98,100,101,102,103,104,105,106,107,108,110,111,112,113,114,115,117,121,124,145,150,167,174,175,176,184,204,207,209,211,213,217,218,241,250,263,270,276,289,298,299,304,306,307,308,309,321,331,333,334,336,346,364,402,409],opn:410,opt:19,optim:[15,19],optimist:17,option:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,73,119,245,252,269,271,280,281,283,284,286,292,297,330,359,362,402,409,412,413],order:[12,13,18,19,21,25,26,27,43,48,49,55,98,106,145,146,176,177,179,183,210,245,246,271,272,280,292,299,300,304,305,320,324,330,332,336,402,410,412,413],org:19,org_aomedia_avif:19,org_blosc_cblosc:19,org_lz4:19,org_nghttp2:19,org_sourceware_bzip2:19,org_tukaani_xz:19,origin:[3,12,13,15,18,27,43,46,47,55,97,102,103,104,105,119,135,140,145,163,168,197,214,245,252,264,269,271,290,297,299,322,330,380,402,409,410,412],orthogon:[101,167,263,289,320,321,410],os:16,other:[3,12,13,15,18,19,27,28,29,30,41,42,53,57,68,73,75,76,89,94,98,119,120,125,131,137,145,177,178,199,200,204,205,207,245,247,271,273,305,347,348,402,409,410,412],otherwis:[1,2,3,4,5,6,7,8,9,10,12,13,14,15,18,19,21,22,25,77,78,79,109,120,125,148,152,344,412,413],out:[18,98,99,100,101,102,103,104,105,106,107,148,149,150,151,152,153,154,167,174,296,401,410],outer:[97,101,145,167,245,263,271,289,299,320,321,380],output:[14,19,26,97,98,99,100,101,102,103,104,105,106,107,121,124,145,147,148,149,150,151,152,153,154,167,169,170,173,174,219,220,221,222,229,231,232,233,251,252,269,276,277,289,295,296,297,298,304,305,309,320,332,380,401,402,409,410,411],output_rank:[124,145,147,170,251,277,305,306,309],output_user_root:19,outputindexmap:[18,26,124,145,151,152,153,169,170,173,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,251,277,305,309],outputindexmethod:[26,219,226,229,233,234,235,236,237,238,239,240],outsid:[337,410],over:[3,16,18,73,81,124,152,153,336,410,412],overlap:[11,14],overrid:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,19,20,21,22,23,24,25,297,330,402,413],overridden:[12,19,197,211,297,402],own:21,pack:15,page:8,pai:21,pair:[24,241,242,347,352],parallel:402,paramet:[12,13,15,21,22,23,26,30,41,43,55,58,66,67,69,70,77,78,79,80,89,94,100,102,103,104,105,106,109,114,117,121,122,123,124,125,126,131,137,147,152,153,179,197,204,205,207,209,210,211,213,214,218,248,251,252,269,274,277,297,302,305,306,308,309,321,324,330,333,336,374,402,409,412,413],parent:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,61,69,70,71,72,413],pars:[61,64,70,176,189,353,412],part:[19,27,43,245,252,258,380],partial:[10,12,13,15,18,402],particular:[0,17],particularli:[96,409],partit:[301,412],pass:[19,26,359,362],path:[4,5,6,7,8,9,10,11,12,13,15,16,17,19,20,21,22,23,24,25,176,189,190,191,192,193,194,195,196,197,198,204,205,206,207,208,209,211,212,213,214,216,218,287,317,337,402,411],pattern:108,pem:16,pend:0,pep:410,per:[12,13,15,18,25,28,30,34,35,41,412],percent:22,perceptu:9,perfect:410,perfectli:[336,410],perform:[2,3,13,17,18,97,204,207,209,211,217,218,280,281,283,284,286,292,306,307,308,309,321,324,333,334,402,409,410,411,412],permiss:21,permit:[10,11,12,13,15,18,97,98,106,121,124,252,269,297,402,409,410],permut:[18,27,43,48,49,55,412],persist:[15,337],physic:[12,26,245,252,258,269,271,283,297,299,313,347,402,409,412],pick:13,pip:19,place:[13,16,98],plain:97,plane:4,platform:[15,19],plu:410,pm:18,png:[10,19,413],point:[26,336,337,347,375,392,393,394,412,413],pointer:11,polici:[299,326],pool:[0,25,214,330,402,409],portion:[353,412],posit:[3,14,18,252,269,297,299,316,402,410,411],posix:[19,20],possibl:[10,12,13,15,18,19,297,327,330,402,409],potenti:410,power:410,pre:19,prebuilt:19,preced:[16,43,55,252,269,297,402,409,412],precis:[26,43,55,336,347,392,393,394,400,403,408,412,413],precomput:[13,17,25,412],predecessor:410,prefer:[43,55,412],prefix:[21,23,24,25,176,189,195,212,410],prepar:16,presenc:11,present:[3,12,18],preserv:409,preset:12,preshift_bit:[13,25,402,411],prevent:19,previou:410,previous:[1,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,24,25,108,116,211,402,409],primarili:[67,73,121,124],print:[16,77,78,79,80,84,108,256,258,259,260,261,265,285,288,291,296,409],prior:[10,11,12,13,15,19,100,102,103,104,105,409,410],problem:[15,21,22],process:[11,17,20,301],produc:[26,108,114,117,241,410],product:[119,143],progress:19,project:[19,21],project_id:21,promis:[26,108,112,241,242,243,244],propag:[14,89,94,131,137],properti:[3,12,15,17,23,25,157,158,159,160,161,162,163,165,255,337,402,409,412,413],propos:410,protocol:[20,410],provid:[11,12,13,15,16,17,19,20,21,108,336,337,364,402,410],purpos:[24,121,409,410],py:[19,119,126,150],pybind11:19,python3:19,python:[1,15,17,26,73,83,308,309,400,403,408,410],qualiti:[4,6,9,13],quaniti:[347,412],quantiti:[26,252,258,269,297,313,347,351,402,409,412],quantiz:4,queri:[17,22,108,112,113],queued_for_writeback_bytes_limit:0,quit:3,r:[181,318],rais:[53,57,81,100,102,103,104,105,108,114,117,123,136,204,205,207,210,213,248,249,250,251,252,263,269,270,274,275,276,277,289,297,298,337,344,402,409],rang:[6,18,73,97,103,104,105,106,176,177,178,179,180,181,182,183,209,210,221,222,336,380,381,410],rank:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,27,28,30,36,37,41,43,48,50,51,53,55,57,98,99,100,101,102,103,104,105,106,107,119,120,121,124,125,128,132,133,136,139,141,145,148,149,150,151,152,153,154,164,166,167,170,174,229,231,232,245,247,248,249,250,251,252,253,254,257,258,260,262,263,265,268,269,270,271,277,288,291,292,296,297,299,305,306,309,319,323,327,401,402,409,410,412,413],rare:[15,410],rate:412,rather:[43,48,49,55,98,410,412],ratio:[28,30,32,33,41,43,55,412],raw:[12,25,337],re:[19,25,176,197,214,297,299,330,402,409],reach:0,read:[2,3,4,5,6,7,8,9,10,11,12,14,15,17,18,22,25,26,27,28,43,52,53,55,176,184,185,205,211,213,217,218,297,299,301,304,305,306,307,308,309,310,318,321,324,325,330,331,333,334,336,337,359,360,361,364,374,377,409,410,412],read_chunk:[12,13,15,27,43,52,53,54,55,292,311,327,412],read_chunk_aspect_ratio:[43,55],read_chunk_aspect_ratio_soft_constraint:[43,55],read_chunk_el:[13,43,54,55],read_chunk_elements_soft_constraint:[43,55],read_chunk_shap:[13,43,53,55,409],read_chunk_shape_soft_constraint:[43,55],read_chunk_templ:[27,53,57],read_context:409,read_funct:409,read_futur:411,read_param:409,readabl:[299,325],reader:[20,337],readi:[114,117,209,336,345],readm:19,readresult:[176,184,185,186,187,188,211,213,218],real:[252,269,297,402,409,413],rebuild:19,receiv:[18,21,22,114,117],recent:[0,98,112,123,204,205,207,213,243,251,410],recheck:[10,11,12,13,15],recheck_cached_data:[10,11,12,13,15,411],recheck_cached_metadata:[10,12,13,15],recommend:[13,19,25,306,307,308,309,321,333,347,410,412],recomput:409,record:[204,207,209,218],rectangular:[3,13,18],recurs:412,reduc:[19,305],redund:[402,412],refer:[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,98,197,214,297,330,336,410,412,413],reflect:[213,304,314,324,336,364],regardless:[4,10,11,12,13,15,410],region:[3,13,18,410,411],regist:[15,108,110,116],regular:[22,27,28,336,337,410,412],rel:[13,22,106,209,410,412],relat:[19,21,22,403,408],relationship:18,reli:413,relianc:20,remain:[12,15,18,98,105,197,211,297,346,353,410,412],remot:[0,16,17],remov:99,remove_done_callback:[108,116,364,372],reorder:106,repeatedli:25,replac:[197,297,410],repo:19,repositori:19,repres:[12,13,15,18,24,26,73,118,145,219,241,324,336,347,410,412,413],represent:[4,18,20,21,22,23,24,26,27,28,31,40,44,54,58,59,60,61,62,63,64,65,66,69,83,84,127,129,144,154,155,173,191,192,196,198,206,216,247,253,254,268,273,278,279,295,347,350,358,384,410,412,413],request:[21,22,108,111,213,359,360,402,409],requestor:21,requir:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,125,152,297,324,330,402,411,412,413],reserv:18,resiz:[12,13,15,18,73,90,91],resolut:[12,13,283,402,411,412],resolv:[109,118,210,213,218,299,326,410],resourc:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,20,21,22,23,24,25,26,61,62,63,67,68,197,211,214,273,279,297,330,402,409,413],respect:[3,13,30,41,73,99,102,336,410],respons:22,restrict:[22,210],result:[12,13,14,15,17,18,19,26,98,99,100,107,108,109,114,115,117,118,120,148,151,174,176,184,185,197,204,205,207,210,213,214,241,243,244,248,270,274,297,298,301,302,304,306,307,308,309,321,324,330,332,333,336,337,344,345,364,373,402,409,410,411,412],retain:[30,41,106,214,330,410,412],retain_context:[176,214,330],retri:[21,22],retriev:[21,61,67,411],revalid:[10,11,12,13,15,22],revers:[106,145,146,245,246,271,272,299,300],rewrit:13,rfc:[11,22],rgb:[4,9],rgba:[4,9],right:[18,21,22,120,148],rightarrow:18,roll:337,root:20,round:[3,13,18,410],row:[43,48,55,324,412],rs1:20,rtf:19,rule:[18,19],run:[21,109,114,117,409],runtim:[16,21,22],rw:318,s:[12,14,16,19,26,396,397,398,399,410,413],safe:[17,20,21,336,402],same:[0,10,11,12,13,14,15,18,19,22,24,68,100,102,103,104,105,197,214,297,312,317,327,330,336,337,364,402,409,410,411,412],satisfi:[13,324,410],satur:17,save:16,scalar:[98,102,103,104,105,306,308,309,321,333,336,375,384,385,410],scale:[13,258],scale_index:[13,402,411],scale_metadata:[13,25,402,411],scheama:14,schema:[1,2,3,4,5,6,7,8,9,10,11,17,18,26,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,292,297,299,327,402,409,413],scheme:[20,21,22,23,24],script:19,sdist:19,sdk:21,se_curl:[16,19],second:[10,18,114,117,199,203,213],section:[16,17,21,22],secur:[16,21,22],segment:[402,411,412],sel:410,select:[1,2,3,4,5,6,7,8,9,10,11,14,26,89,94,97,98,99,100,102,103,104,105,106,119,123,131,137,258,380,381,413],self:[29,40,41,42,53,54,55,57,60,63,66,67,74,75,76,81,82,83,84,86,87,89,92,93,94,96,98,100,101,102,103,104,105,106,107,110,111,112,113,114,115,116,117,120,121,122,123,124,128,129,131,137,144,146,147,148,149,150,151,155,167,168,171,172,173,174,178,180,190,192,193,194,196,197,200,204,205,206,207,208,209,210,213,214,217,218,230,231,233,235,243,244,246,247,248,249,250,251,254,257,263,264,266,267,268,269,270,272,273,274,275,276,277,279,282,289,290,293,294,295,297,298,300,301,302,303,304,305,306,307,308,309,310,316,320,321,322,323,324,326,328,329,330,332,333,334,336,339,342,344,348,354,355,358,365,366,367,370,371,372,373,385,390],semant:[20,97,98,101,107,145,150,167,174,245,250,263,270,271,276,289,298,299,304,308,320,321,332,333,380,410],send:22,sensit:22,separ:[0,10,11,12,15,16,19,21,190,204,205,207,213,218,301,336,410,413],sequenc:[14,30,41,43,55,97,98,100,102,103,104,105,120,123,125,126,145,147,148,152,153,252,269,297,380,381,402,409,410],serial:18,serv:[13,120,148,258,409,412],server:[16,21,22],servic:21,set:[3,4,9,13,14,16,19,21,22,24,26,43,55,97,100,102,176,213,252,269,297,330,380,402,409,410],set_except:[241,243],set_result:[241,244],setup:[17,19],sever:[19,108],sha256:19,shape:[18,27,28,30,32,33,38,39,41,43,53,55,57,119,125,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,152,165,171,245,248,249,250,251,252,259,263,266,269,270,271,284,292,293,297,299,301,302,303,304,305,306,307,308,309,311,312,313,314,315,316,317,320,321,324,327,328,330,332,333,336,402,409,410,412],shape_soft_constraint:[28,30,39,41,43,54,55,412],shard:[25,402,411,412],shard_bit:[13,25,402,411],shard_data_encod:13,shardingspec:[13,25],share:[0,16,17,20,21,22,26,61,68,197,211,214,297,330,402,409],shift:[97,103,104,380,410],shlex:19,shortcut:410,shorthand:[308,309],should:[10,11,12,13,15,16,19,21,22,23,24,25,109,336,362,363,409,412],show:19,shuffl:[12,15,299,302,303,304,305,312,320,327,330,332,402,412],sign:[18,26,396,397,398,399,413],signal:241,signific:[25,336],silent:410,similar:[18,101,102,107,167,174,263,270,289,298,320,321,332,333,410],simpler:3,simplest:19,simpli:[99,109,143,364,409,410],simultan:[19,402],sinc:[10,18,98,114,117,136,199,203,213,409,410,411],singl:[11,12,13,15,16,18,26,98,106,119,122,176,204,205,207,210,213,218,219,222,252,258,269,279,297,313,347,393,402,409,410,411,412,413],single_input_dimens:[18,233,239],singleton:[26,99,401],size:[0,12,13,15,18,19,30,41,73,79,82,83,85,89,94,96,119,125,143,145,152,172,245,267,271,294,299,329,336,402,409,411,412],skip:[10,12,13,15,19,297,330,359,360,410],slice:[98,102,119,120,136,145,148,410,411],slightli:22,slower:[12,15],slowest:[12,15],small:[1,13],smallest:[3,13,15],snappi:[12,15,19],so:[19,411],soft:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,27,28,30,33,35,39,41,43,47,48,49,53,55,57,412,413],sole:98,some:[9,12,18,337,347,402,412],sourc:[18,19,299,306,307,308,309,321,333,336,364,374],sp:22,space:[19,26,27,51,98,99,100,101,102,103,104,105,106,107,119,141,145,148,149,150,151,152,153,154,164,166,167,170,174,252,269,296,297,401,402,409,410,412],spec:[10,12,13,15,17,22,61,64,65,66,68,69,70,72,98,175,176,189,190,191,192,193,194,195,196,197,198,211,212,214,247,248,260,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,312,330,382,402],special:[0,13,18,19,21,22,26,86,87,92,93,98,179,182,395,410,412],specif:[0,1,2,3,4,5,6,7,8,9,10,11,12,14,15,19,20,21,22,23,24,26,58,61,64,65,176,189,197,198,199,202,214,216,271,280,281,283,284,286,292,297,330,347,402,412,413],specifi:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,30,41,43,48,49,53,55,57,58,73,77,78,79,97,98,102,103,104,105,106,107,109,114,117,119,120,122,123,125,136,148,152,153,174,176,177,179,184,197,199,204,207,209,210,211,213,214,218,241,243,244,245,252,255,256,258,261,269,270,280,281,283,284,286,287,292,297,298,299,310,324,330,332,333,336,347,351,354,355,359,361,362,363,377,380,401,402,409,410,412,413],speed:4,split:19,squar:410,ssl:[16,19,21,22],sslkeylogfil:16,stack:[10,19,413],stage:[26,337],staic:14,stale:22,staleness_bound:[213,359,361],stamp:[176,184,185,186,211,213,218],standard:[15,19],start:[3,19,26,98,106,108,122,210,337,343,346,380,409,410],startup:19,state:[176,184,185,187,211,213,218],stderr:16,step:[18,98,336,410],still:[11,13,15,18,121,124,337,346,409,410],stop:[98,410],storag:[4,5,6,7,8,9,11,12,13,15,17,21,26,27,43,48,49,55,176,199,200,201,218,271,287,297,299,317,327,336,337,364,402,412],store2:402,store:[10,11,12,13,15,16,18,23,26,176,189,190,193,194,195,198,199,202,204,205,207,208,209,210,211,212,213,214,215,216,217,218,258,271,287,297,299,310,311,312,313,316,317,327,330,336,337,347,377,402,409,411,412],str:[26,61,67,73,77,78,79,80,83,84,95,97,100,119,122,125,129,138,145,152,155,162,176,177,179,182,183,185,189,190,192,193,195,198,199,201,204,205,206,207,212,213,216,218,233,235,238,245,252,254,269,271,279,297,299,318,347,349,352,353,356,380,384,387,388,390,402,408,409,410],strictli:[120,148],stride:[3,18,97,102,152,154,173,219,221,222,228,380],string:[0,3,10,11,12,13,15,17,18,20,21,22,23,24,25,26,83,84,95,129,155,177,179,182,183,192,202,206,254,279,310,347,353,403,408,412,413],strip:[210,353,412],strip_context:[197,297,330],strip_prefix:19,strip_prefix_length:210,strong:17,strongli:25,studio:19,style:[21,23,24,25,97,98,101,102,107,136,145,150,167,174,245,250,251,263,270,271,276,277,289,298,299,304,308,320,321,332,333,380],sub:[11,19,411],subarrai:15,subdivid:412,subject:[299,326,364],subscript:[306,307,308,309,321,333,410,411],subsequ:[14,98,336,364,402,409,410],subset:[8,18,19,108,119,123,410],subtyp:[10,12,15,23,412,413],succe:18,success:[117,205,342,344],successfulli:[114,241,244,336,345,364],suffic:18,suffici:410,suffix:[189,190],suitabl:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,19,402,412,413],sum:410,suppli:411,support:[0,2,3,4,8,9,10,11,12,13,14,17,18,19,20,21,22,23,24,25,97,108,136,175,176,204,207,209,218,258,299,308,325,335,337,375,410,411,412,413],surviv:336,synchron:[108,204,205,207,299,301,306,307,308,309,321,324,333,336,337,344,409,411],syntax:[0,11,20,21,22,24,306,307,308,309,321,333,347,410,412],system:[16,19,21,22,23,336],t:[19,118,145,146,197,211,245,246,271,272,297,299,300,409],tabl:[18,24],take:[13,16,17,43,55,252,269,297,402,409,410,412],taken:[13,14,53,57,76,412],target:[18,19,28,30,34,35,41,43,55,97,106,380,410,412],temporari:[13,19],tensoprstor:16,tensorflow:[15,375],tensorstor:[0,1,2,3,4,5,6,7,8,9,10,11,16,18,19,21,22,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,403,404,405,406,407,408,409,410,411,412,413],tensorstore_bazel_build_opt:19,tensorstore_bazel_compilation_mod:19,tensorstore_bazel_startup_opt:19,tensorstore_bazelisk:19,tensorstore_ca_bundl:16,tensorstore_ca_path:16,tensorstore_curl_verbos:16,tensorstore_gcs_http_url:[16,21],tensorstore_gcs_request_concurr:[16,21],tensorstore_prebuilt_dir:19,tensorstore_system_lib:[16,19],term:[98,101,107,167,174,263,270,289,298,308,320,321,332,333,410],termin:[403,408],test:[24,108],th:[98,120,148,410],than:[0,10,11,12,13,15,18,19,43,48,49,55,98,123,213,359,361,409,410,412],thei:[12,14,24,66,121,124,403,408,409,410],them:[4,336],therefor:[13,16],thi:[0,1,3,8,10,11,12,13,15,16,18,19,20,21,23,43,55,61,67,68,71,72,96,101,107,108,115,119,120,124,136,143,145,146,148,149,151,167,168,171,172,174,176,204,205,207,209,210,213,215,217,218,246,252,255,263,264,266,267,269,270,272,277,280,281,283,284,286,289,290,292,293,294,297,298,299,300,301,304,305,308,309,312,317,320,321,322,323,327,328,329,330,332,333,334,336,337,347,351,354,355,356,364,384,385,402,409,410,411,412],third:412,those:[108,305],though:[121,124,409],thread:[0,108,109,114,117,204,205,207,301,324,409],three:[13,18,120,148,412],through:[17,18,21,23,145],throughput:17,tie:3,tiff:[10,19,413],time:[10,11,12,13,15,18,199,201,203,213,409,412],timedelta:15,timeout:[108,114,117,364,371,373],timeouterror:[114,117],timestamp:[176,184,186,199,200,409],timestampedstoragegener:[176,184,185,186,199,200,201,202,203,211,213,218,409],tl:19,tmp:[19,20,190,191,192,193,194,195,196,206,208,337,411],to_json:[27,28,40,54,58,60,62,63,64,66,71,119,144,145,173,189,196,245,268,271,295,347,358,384,390],togeth:15,tool:19,top:[2,25,411,412],total:[0,119,143,145,172,245,267,271,294,299,329],total_bytes_limit:[0,10,12,13,15,25,63,67,69,71,72,409,411],toward:410,traceback:[98,112,123,204,205,207,213,243,251,410],track:336,traffic:16,trail:[353,412],transact:[17,24,25,26,204,207,209,210,211,213,215,217,218,306,307,308,309,317,321,324,331,333,334,337,338,339,340,341,342,343,344,345,346,364,402],transform:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,26,98,99,100,101,102,103,104,105,106,107,108,119,121,124,145,147,148,149,150,151,152,153,154,156,157,158,159,160,161,162,163,164,165,166,167,170,173,174,219,220,221,222,229,245,248,249,250,251,252,263,269,270,271,274,275,276,277,289,295,296,297,298,299,302,303,304,305,306,307,309,310,314,320,330,332,377,401,402,409,411,413],translat:[3,12,15,18,97,103,104,105,380,410],translate_backward_bi:[97,103,380],translate_bi:[97,98,100,104,121,147,149,295,296,380],translate_to:[97,105,380],transpos:[97,99,106,145,146,245,246,271,272,299,300,380],treat:[22,109,213,410,412],treatment:22,tree:19,trip:18,truncat:410,trust:16,ts:[12,13,14,15,50,51,53,54,57,63,67,68,69,71,72,73,74,75,76,77,78,79,80,81,83,84,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,104,105,106,107,108,109,112,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,146,147,148,149,150,151,152,153,154,156,157,158,159,160,161,162,163,164,165,166,167,170,173,174,176,181,190,191,192,193,194,195,196,197,198,204,205,206,207,208,209,210,211,212,213,214,216,217,218,220,221,222,241,243,244,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,265,268,269,270,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,291,292,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,319,320,321,323,324,327,330,332,333,336,337,348,349,350,351,352,353,354,355,356,357,358,377,381,395,401,402,409,410,411],tupl:[27,28,32,33,38,39,46,47,48,49,119,130,132,133,134,135,136,138,140,142,145,147,157,158,159,160,161,162,163,165,168,171,241,242,245,252,258,264,266,269,271,283,290,293,297,299,313,322,328,347,352,402,409,410],turbo:19,tutori:17,two:[11,18,26,27,28,29,42,199,200,336,337,347,348,364,396,397,398,399,410,412,413],txn:[176,217,308,336,337],type:[0,1,2,3,10,11,14,17,25,67,108,118,145,175,245,252,260,269,271,285,297,302,303,306,308,309,310,315,316,321,333,336,337,347,374,375,376,377,384,385,386,391,392,393,394,396,397,398,399,400,402,403,406,408,409,410,411,412,413],u1:15,u2:[15,284,292],u4:[299,304,305,320,330,332],u8:15,u:[356,357],udunits2:[347,412],uint16:[12,13,15,26,282,292,337,404,413],uint32:[12,13,15,26,108,299,301,302,303,304,305,306,307,308,309,310,312,313,314,315,316,317,320,321,324,327,330,332,333,336,377,405,409,411,413],uint64:[12,13,15,25,26,402,406,411,413],uint8:[4,5,6,7,8,9,12,13,15,26,252,253,254,257,260,265,268,269,282,285,407,413],um:283,unbind_context:[189,197,214,297,330],unbound:[14,18,26,53,57,73,80,86,87,92,93,96,125,152,197,297,395],unchang:[102,103,104,105,197,211,297,410],unchunk:13,uncommit:[324,336,337],uncondition:[107,174,270,298,332,333,410],unconstrain:[258,402],under:[2,10,15,20,410],underli:[4,5,6,7,8,9,10,11,12,13,14,15,17,18,23,25,145,271,287,297,299,317,336,337,364,402,412],unequ:410,unicod:[26,408,413],uniform:[3,17,412],uniqu:[18,68,409],unit:[14,26,245,252,258,269,271,283,297,299,313,347,348,349,350,351,352,353,354,355,356,357,358,402,409],universal2:19,unix:[10,21,23,24,25,114,117,199,203,213],unknown:[18,252,258,269,297,312,313,316,402,409,412],unlabel:[12,18,73,95,125,152,412],unless:[13,21,25,347,410,412],unlik:[22,98,108,410],unmatch:18,unmodifi:409,unpickl:409,unregist:[108,116],unset:14,unshar:[402,409],unshard:412,unsign:[26,404,405,406,407,413],unspecifi:[3,10,12,13,15,18,28,37,43,53,55,57,184,185,187,202,210,213,245,259,260,265,271,285,291,296,297,330,402,409,410,412],unsuccessfulli:[111,117,241,243],until:[108,114,117,204,205,207,209,218,337,346,364,409,410],unus:[4,6,7,9],unverifi:402,up:[13,19,21,412],updat:[13,27,28,41,55,189,197,245,247,255,256,257,258,259,261,265,269,271,273,279,282,297,299,326,330,402],upon:[108,110,410],upper:[12,15,18,73,77,78,79,80,86,91,92,99,119,125,130,133,134,136,145,152,158,159,160,177,179,182,410],url:[17,19,20,21,22,23,24,176,189,191,198,211,216],us:[0,1,3,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,45,67,68,73,97,98,102,103,104,105,108,109,115,118,119,121,124,136,145,176,190,197,211,213,214,217,241,245,248,249,250,251,263,270,271,274,275,276,277,287,289,297,298,299,302,303,304,305,306,307,308,309,312,317,320,321,324,327,330,331,332,333,334,336,337,342,346,347,353,359,362,364,374,380,400,401,403,408,409,410,411,412],usag:337,user:20,usezlib:[12,412],ustr:[26,408,413],usual:[179,183,410],utf:413,util:19,v1:[18,402,411],v2:18,v3:18,v4:18,valid:[0,12,18,22,43,55,98,102,199,203,213,410,412],valu:[0,1,3,4,9,10,11,14,16,17,18,26,43,55,66,73,76,86,87,92,93,96,98,102,108,118,123,176,184,185,186,187,188,189,190,193,194,195,197,198,199,202,204,205,207,208,209,210,211,212,213,214,215,216,217,218,233,234,240,245,252,258,261,269,271,286,287,297,299,313,316,317,330,336,347,351,400,402,409,410,411,412,413],valueerror:[53,57,81,123,136,210,248,249,250,251,263,270,274,275,276,277,289,298],vari:4,variabl:[19,21,22,26,403,408],varieti:23,varlength:12,vector:[18,97,98,107,119,125,145,147,152,174,245,270,271,298,299,332,333,380],verbos:[16,410],veri:[8,13,25,121,124],verifi:[21,22],version:[3,16,19,199,202,402,409,410],via:[1,3,12,13,14,15,17,48,49,410],view:[2,3,17,145,146,176,217,229,245,246,271,272,299,300,302,303,304,305,310,320,332,334,377,382,383,409,410,411],vindex:[97,98,107,145,150,174,245,250,251,263,270,271,276,277,289,298,299,304,305,308,309,320,321,332,333,380],virtual:[2,3,17,19,145,299,302,303,304,305,320,332,382,383,409],virtual_chunk:[26,359,362,409],virtualchunkedreadparamet:[26,359,360,361,409],virtualchunkedwriteparamet:[26,362,363,409],visibl:337,visual:19,volum:[4,5,6,7,8,9,13,25],voxel:[13,412],voxel_offset:[13,402,411],vv:19,w:[18,318],wa:[10,16,61,72,114,117,211,213,255,342,402,409,411],wai:[0,12,13,15,17,19,409,412],wait:[108,336,409,411],warn:[10,12,13,15],web:22,webp:[10,413],well:[13,14,15,98,375,402],were:410,what:10,wheel:19,when:[0,1,2,3,4,5,6,7,8,9,10,11,14,18,19,22,25,98,109,115,209,213,258,297,306,307,308,309,321,324,330,333,336,345,364,409,410,412,413],where:[0,3,13,14,16,18,26,98,101,107,118,120,136,148,150,152,154,167,174,252,269,297,402,409,410,412,413],wherebi:410,whether:[66,77,78,79,80,98,108,112,113,119,125,132,133,145,152,157,158,330,337,340,341,343,346,410],which:[0,2,3,10,11,12,13,14,15,16,17,18,19,21,22,24,25,53,57,61,69,70,71,72,73,102,103,104,105,109,119,145,199,203,213,255,305,336,342,347,356,364,374,380,409,410,411,412],whitespac:[353,412],wide:20,width:[4,5,6,7,8,9],window:[16,19,20],wireshark:16,wise:[2,12,15,26,409],wish:409,with_transact:[176,211,217,299,308,334,336,337,402,409],within:[0,3,10,11,12,13,15,18,21,23,24,25,27,43,48,55,114,117,176,189,195,210,212,213,299,324,409,410,412],without:[12,18,21,22,97,103,104,105,190,204,205,207,211,213,218,336,337,380,402,409,410,411,412],won:[197,211,297],work:[19,21,22],workspac:19,worst:[12,13],would:[100,136],writabl:[299,335],write:[2,10,11,12,14,15,17,18,21,25,26,27,28,43,55,56,57,176,204,207,209,211,213,217,218,299,305,306,307,308,309,310,318,321,324,331,333,334,335,336,337,362,364,374,377,409,410,412],write_chunk:[12,13,15,27,43,54,55,56,57,292,311,327,412],write_chunk_aspect_ratio:[43,55],write_chunk_aspect_ratio_soft_constraint:[43,55],write_chunk_el:[13,43,55],write_chunk_elements_soft_constraint:[43,55],write_chunk_shap:[13,43,55,57],write_chunk_shape_soft_constraint:[43,54,55],write_chunk_templ:[27,53,57],write_context:409,write_funct:409,write_futur:411,writeback:[0,17,336,362,363],writefutur:[26,108,299,336,364,365,366,367,368,369,370,371,372,373],writer:[10,12,13,15,297,330,402],written:[15,19,26,252,269,297,299,316,336,402,409,411],x86_64:19,x:[4,5,6,7,8,9,12,13,15,18,19,73,77,78,79,80,83,84,89,94,95,98,99,100,101,102,103,104,105,106,107,109,120,121,122,123,127,131,137,138,148,149,151,154,156,162,164,166,170,173,181,211,248,249,250,251,259,263,270,274,275,296,302,303,306,307,314,381,402,410,411],xcode:19,xre:13,xxxxx:22,xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:19,xyz:13,xz:[12,19],y:[4,5,6,7,8,9,12,13,15,18,98,99,100,101,102,103,104,105,106,107,120,121,122,123,126,127,131,137,138,148,149,154,156,162,164,166,170,173,181,211,248,249,250,251,259,263,270,274,275,296,302,303,306,307,314,402,410,411],yet:[299,316,324],you:[10,12,13,15,16,19,21,22,68,336,402,409,411],your:19,yre:13,yuv:[4,9],yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyi:19,z:[12,13,18,98,100,101,102,103,104,105,106,107,120,121,122,123,127,138,148,154,156,162,164,166,170,173,248,249,250,251,259,263,270,274,275,302,303,306,307,402,410,411],zarr:[2,3,10,17,256,274,275,276,277,280,281,284,286,289,292,298,299,301,304,305,308,309,311,312,315,316,320,321,324,327,330,332,333,336,402,410,412],zarr_format:[15,299,304,305,320,330,332,402],zarrai:[15,402],zero:[10,12,13,15,18,25,73,85,98,99,125,152,252,269,297,402,409,410,412],zlib:[12,15,19],zre:13,zstd:[12,15,19]},titles:["Context framework","<code class=\"docutils literal notranslate\"><span class=\"pre\">array</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">cast</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">downsample</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">avif</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">bmp</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">jpeg</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">png</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">tiff</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">webp</span></code> Driver","Drivers","<code class=\"docutils literal notranslate\"><span class=\"pre\">json</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">n5</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">neuroglancer_precomputed</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">stack</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">zarr</span></code> Driver","Environment variables","TensorStore","Index space","Building and Installing","<code class=\"docutils literal notranslate\"><span class=\"pre\">file</span></code> Key-Value Store driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">gcs</span></code> Key-Value Store driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">http</span></code> Key-Value Store driver","Key-Value Storage Layer","<code class=\"docutils literal notranslate\"><span class=\"pre\">memory</span></code> Key-Value Store driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">neuroglancer_uint64_sharded</span></code> Key-Value Store driver","API reference","tensorstore.ChunkLayout","tensorstore.ChunkLayout.Grid","tensorstore.ChunkLayout.Grid.__eq__","tensorstore.ChunkLayout.Grid.__init__(components)","tensorstore.ChunkLayout.Grid.__init__(json)","tensorstore.ChunkLayout.Grid.aspect_ratio","tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint","tensorstore.ChunkLayout.Grid.elements","tensorstore.ChunkLayout.Grid.elements_soft_constraint","tensorstore.ChunkLayout.Grid.ndim","tensorstore.ChunkLayout.Grid.rank","tensorstore.ChunkLayout.Grid.shape","tensorstore.ChunkLayout.Grid.shape_soft_constraint","tensorstore.ChunkLayout.Grid.to_json","tensorstore.ChunkLayout.Grid.update","tensorstore.ChunkLayout.__eq__","tensorstore.ChunkLayout.__init__(components)","tensorstore.ChunkLayout.__init__(json)","tensorstore.ChunkLayout.codec_chunk","tensorstore.ChunkLayout.grid_origin","tensorstore.ChunkLayout.grid_origin_soft_constraint","tensorstore.ChunkLayout.inner_order","tensorstore.ChunkLayout.inner_order_soft_constraint","tensorstore.ChunkLayout.ndim","tensorstore.ChunkLayout.rank","tensorstore.ChunkLayout.read_chunk","tensorstore.ChunkLayout.read_chunk_template","tensorstore.ChunkLayout.to_json","tensorstore.ChunkLayout.update","tensorstore.ChunkLayout.write_chunk","tensorstore.ChunkLayout.write_chunk_template","tensorstore.CodecSpec","tensorstore.CodecSpec.__init__","tensorstore.CodecSpec.to_json","tensorstore.Context","tensorstore.Context.Resource","tensorstore.Context.Resource.to_json","tensorstore.Context.Spec","tensorstore.Context.Spec.__init__","tensorstore.Context.Spec.to_json","tensorstore.Context.__getitem__","tensorstore.Context.__init__(default)","tensorstore.Context.__init__(json)","tensorstore.Context.__init__(spec)","tensorstore.Context.parent","tensorstore.Context.spec","tensorstore.Dim","tensorstore.Dim.__contains__(dim)","tensorstore.Dim.__contains__(index)","tensorstore.Dim.__eq__","tensorstore.Dim.__init__(exclusive_max)","tensorstore.Dim.__init__(inclusive_max)","tensorstore.Dim.__init__(size)","tensorstore.Dim.__init__(unbounded)","tensorstore.Dim.__iter__","tensorstore.Dim.__len__","tensorstore.Dim.__repr__","tensorstore.Dim.__str__","tensorstore.Dim.empty","tensorstore.Dim.exclusive_max","tensorstore.Dim.exclusive_min","tensorstore.Dim.finite","tensorstore.Dim.hull","tensorstore.Dim.implicit_lower","tensorstore.Dim.implicit_upper","tensorstore.Dim.inclusive_max","tensorstore.Dim.inclusive_min","tensorstore.Dim.intersect","tensorstore.Dim.label","tensorstore.Dim.size","tensorstore.DimExpression","tensorstore.DimExpression.__getitem__","tensorstore.DimExpression.diagonal","tensorstore.DimExpression.label","tensorstore.DimExpression.oindex","tensorstore.DimExpression.stride","tensorstore.DimExpression.translate_backward_by","tensorstore.DimExpression.translate_by","tensorstore.DimExpression.translate_to","tensorstore.DimExpression.transpose","tensorstore.DimExpression.vindex","tensorstore.Future","tensorstore.Future.__new__","tensorstore.Future.add_done_callback","tensorstore.Future.cancel","tensorstore.Future.cancelled","tensorstore.Future.done","tensorstore.Future.exception","tensorstore.Future.force","tensorstore.Future.remove_done_callback","tensorstore.Future.result","tensorstore.FutureLike","tensorstore.IndexDomain","tensorstore.IndexDomain.__getitem__(domain)","tensorstore.IndexDomain.__getitem__(expr)","tensorstore.IndexDomain.__getitem__(identifier)","tensorstore.IndexDomain.__getitem__(selection)","tensorstore.IndexDomain.__getitem__(transform)","tensorstore.IndexDomain.__init__(components)","tensorstore.IndexDomain.__init__(dimensions)","tensorstore.IndexDomain.__init__(json)","tensorstore.IndexDomain.__len__","tensorstore.IndexDomain.__repr__","tensorstore.IndexDomain.exclusive_max","tensorstore.IndexDomain.hull","tensorstore.IndexDomain.implicit_lower_bounds","tensorstore.IndexDomain.implicit_upper_bounds","tensorstore.IndexDomain.inclusive_max","tensorstore.IndexDomain.inclusive_min","tensorstore.IndexDomain.index_exp","tensorstore.IndexDomain.intersect","tensorstore.IndexDomain.labels","tensorstore.IndexDomain.ndim","tensorstore.IndexDomain.origin","tensorstore.IndexDomain.rank","tensorstore.IndexDomain.shape","tensorstore.IndexDomain.size","tensorstore.IndexDomain.to_json","tensorstore.IndexTransform","tensorstore.IndexTransform.T","tensorstore.IndexTransform.__call__","tensorstore.IndexTransform.__getitem__(domain)","tensorstore.IndexTransform.__getitem__(expr)","tensorstore.IndexTransform.__getitem__(indices)","tensorstore.IndexTransform.__getitem__(transform)","tensorstore.IndexTransform.__init__(components)","tensorstore.IndexTransform.__init__(domain)","tensorstore.IndexTransform.__init__(json)","tensorstore.IndexTransform.__repr__","tensorstore.IndexTransform.domain","tensorstore.IndexTransform.implicit_lower_bounds","tensorstore.IndexTransform.implicit_upper_bounds","tensorstore.IndexTransform.input_exclusive_max","tensorstore.IndexTransform.input_inclusive_max","tensorstore.IndexTransform.input_inclusive_min","tensorstore.IndexTransform.input_labels","tensorstore.IndexTransform.input_origin","tensorstore.IndexTransform.input_rank","tensorstore.IndexTransform.input_shape","tensorstore.IndexTransform.ndim","tensorstore.IndexTransform.oindex","tensorstore.IndexTransform.origin","tensorstore.IndexTransform.output","tensorstore.IndexTransform.output_rank","tensorstore.IndexTransform.shape","tensorstore.IndexTransform.size","tensorstore.IndexTransform.to_json","tensorstore.IndexTransform.vindex","tensorstore.Indexable","tensorstore.KvStore","tensorstore.KvStore.KeyRange","tensorstore.KvStore.KeyRange.__eq__","tensorstore.KvStore.KeyRange.__init__","tensorstore.KvStore.KeyRange.copy","tensorstore.KvStore.KeyRange.empty","tensorstore.KvStore.KeyRange.exclusive_max","tensorstore.KvStore.KeyRange.inclusive_min","tensorstore.KvStore.ReadResult","tensorstore.KvStore.ReadResult.__init__","tensorstore.KvStore.ReadResult.stamp","tensorstore.KvStore.ReadResult.state","tensorstore.KvStore.ReadResult.value","tensorstore.KvStore.Spec","tensorstore.KvStore.Spec.__add__","tensorstore.KvStore.Spec.__new__","tensorstore.KvStore.Spec.__repr__","tensorstore.KvStore.Spec.__truediv__","tensorstore.KvStore.Spec.copy","tensorstore.KvStore.Spec.path","tensorstore.KvStore.Spec.to_json","tensorstore.KvStore.Spec.update","tensorstore.KvStore.Spec.url","tensorstore.KvStore.TimestampedStorageGeneration","tensorstore.KvStore.TimestampedStorageGeneration.__eq__","tensorstore.KvStore.TimestampedStorageGeneration.__init__","tensorstore.KvStore.TimestampedStorageGeneration.generation","tensorstore.KvStore.TimestampedStorageGeneration.time","tensorstore.KvStore.__delitem__","tensorstore.KvStore.__getitem__","tensorstore.KvStore.__repr__","tensorstore.KvStore.__setitem__","tensorstore.KvStore.copy","tensorstore.KvStore.delete_range","tensorstore.KvStore.list","tensorstore.KvStore.open","tensorstore.KvStore.path","tensorstore.KvStore.read","tensorstore.KvStore.spec","tensorstore.KvStore.transaction","tensorstore.KvStore.url","tensorstore.KvStore.with_transaction","tensorstore.KvStore.write","tensorstore.OutputIndexMap","tensorstore.OutputIndexMap.__init__(constant)","tensorstore.OutputIndexMap.__init__(index_array)","tensorstore.OutputIndexMap.__init__(input_dimension)","tensorstore.OutputIndexMap.index_array","tensorstore.OutputIndexMap.index_range","tensorstore.OutputIndexMap.input_dimension","tensorstore.OutputIndexMap.method","tensorstore.OutputIndexMap.offset","tensorstore.OutputIndexMap.stride","tensorstore.OutputIndexMaps","tensorstore.OutputIndexMaps.__getitem__","tensorstore.OutputIndexMaps.__len__","tensorstore.OutputIndexMaps.rank","tensorstore.OutputIndexMethod","tensorstore.OutputIndexMethod.__init__","tensorstore.OutputIndexMethod.__str__","tensorstore.OutputIndexMethod.array","tensorstore.OutputIndexMethod.constant","tensorstore.OutputIndexMethod.name","tensorstore.OutputIndexMethod.single_input_dimension","tensorstore.OutputIndexMethod.value","tensorstore.Promise","tensorstore.Promise.new","tensorstore.Promise.set_exception","tensorstore.Promise.set_result","tensorstore.Schema","tensorstore.Schema.T","tensorstore.Schema.__eq__","tensorstore.Schema.__getitem__(domain)","tensorstore.Schema.__getitem__(expr)","tensorstore.Schema.__getitem__(indices)","tensorstore.Schema.__getitem__(transform)","tensorstore.Schema.__init__(components)","tensorstore.Schema.__init__(json)","tensorstore.Schema.__repr__","tensorstore.Schema.chunk_layout","tensorstore.Schema.codec","tensorstore.Schema.copy","tensorstore.Schema.dimension_units","tensorstore.Schema.domain","tensorstore.Schema.dtype","tensorstore.Schema.fill_value","tensorstore.Schema.ndim","tensorstore.Schema.oindex","tensorstore.Schema.origin","tensorstore.Schema.rank","tensorstore.Schema.shape","tensorstore.Schema.size","tensorstore.Schema.to_json","tensorstore.Schema.update","tensorstore.Schema.vindex","tensorstore.Spec","tensorstore.Spec.T","tensorstore.Spec.__eq__","tensorstore.Spec.__getitem__(domain)","tensorstore.Spec.__getitem__(expr)","tensorstore.Spec.__getitem__(indices)","tensorstore.Spec.__getitem__(transform)","tensorstore.Spec.__new__","tensorstore.Spec.__repr__","tensorstore.Spec.chunk_layout","tensorstore.Spec.codec","tensorstore.Spec.copy","tensorstore.Spec.dimension_units","tensorstore.Spec.domain","tensorstore.Spec.dtype","tensorstore.Spec.fill_value","tensorstore.Spec.kvstore","tensorstore.Spec.ndim","tensorstore.Spec.oindex","tensorstore.Spec.origin","tensorstore.Spec.rank","tensorstore.Spec.schema","tensorstore.Spec.shape","tensorstore.Spec.size","tensorstore.Spec.to_json","tensorstore.Spec.transform","tensorstore.Spec.update","tensorstore.Spec.vindex","tensorstore.TensorStore","tensorstore.TensorStore.T","tensorstore.TensorStore.__array__","tensorstore.TensorStore.__getitem__(domain)","tensorstore.TensorStore.__getitem__(expr)","tensorstore.TensorStore.__getitem__(indices)","tensorstore.TensorStore.__getitem__(transform)","tensorstore.TensorStore.__setitem__(domain)","tensorstore.TensorStore.__setitem__(expr)","tensorstore.TensorStore.__setitem__(indices)","tensorstore.TensorStore.__setitem__(transform)","tensorstore.TensorStore.astype","tensorstore.TensorStore.chunk_layout","tensorstore.TensorStore.codec","tensorstore.TensorStore.dimension_units","tensorstore.TensorStore.domain","tensorstore.TensorStore.dtype","tensorstore.TensorStore.fill_value","tensorstore.TensorStore.kvstore","tensorstore.TensorStore.mode","tensorstore.TensorStore.ndim","tensorstore.TensorStore.oindex","tensorstore.TensorStore.oindex.__setitem__","tensorstore.TensorStore.origin","tensorstore.TensorStore.rank","tensorstore.TensorStore.read","tensorstore.TensorStore.readable","tensorstore.TensorStore.resolve","tensorstore.TensorStore.schema","tensorstore.TensorStore.shape","tensorstore.TensorStore.size","tensorstore.TensorStore.spec","tensorstore.TensorStore.transaction","tensorstore.TensorStore.vindex","tensorstore.TensorStore.vindex.__setitem__","tensorstore.TensorStore.with_transaction","tensorstore.TensorStore.writable","tensorstore.TensorStore.write","tensorstore.Transaction","tensorstore.Transaction.__init__","tensorstore.Transaction.abort","tensorstore.Transaction.aborted","tensorstore.Transaction.atomic","tensorstore.Transaction.commit_async","tensorstore.Transaction.commit_started","tensorstore.Transaction.commit_sync","tensorstore.Transaction.future","tensorstore.Transaction.open","tensorstore.Unit","tensorstore.Unit.__eq__","tensorstore.Unit.__init__(components)","tensorstore.Unit.__init__(json)","tensorstore.Unit.__init__(multiplier)","tensorstore.Unit.__init__(pair)","tensorstore.Unit.__init__(unit)","tensorstore.Unit.__mul__","tensorstore.Unit.__truediv__","tensorstore.Unit.base_unit","tensorstore.Unit.multiplier","tensorstore.Unit.to_json","tensorstore.VirtualChunkedReadParameters","tensorstore.VirtualChunkedReadParameters.if_not_equal","tensorstore.VirtualChunkedReadParameters.staleness_bound","tensorstore.VirtualChunkedWriteParameters","tensorstore.VirtualChunkedWriteParameters.if_equal","tensorstore.WriteFutures","tensorstore.WriteFutures.add_done_callback","tensorstore.WriteFutures.cancel","tensorstore.WriteFutures.cancelled","tensorstore.WriteFutures.commit","tensorstore.WriteFutures.copy","tensorstore.WriteFutures.done","tensorstore.WriteFutures.exception","tensorstore.WriteFutures.remove_done_callback","tensorstore.WriteFutures.result","tensorstore.array","tensorstore.bfloat16","tensorstore.bool","tensorstore.cast","tensorstore.complex128","tensorstore.complex64","tensorstore.d","tensorstore.d.__class_getitem__","tensorstore.downsample(spec)","tensorstore.downsample(store)","tensorstore.dtype","tensorstore.dtype.__call__","tensorstore.dtype.__init__(dtype)","tensorstore.dtype.__init__(name)","tensorstore.dtype.name","tensorstore.dtype.numpy_dtype","tensorstore.dtype.to_json","tensorstore.dtype.type","tensorstore.float16","tensorstore.float32","tensorstore.float64","tensorstore.inf","tensorstore.int16","tensorstore.int32","tensorstore.int64","tensorstore.int8","tensorstore.json","tensorstore.newaxis","tensorstore.open","tensorstore.string","tensorstore.uint16","tensorstore.uint32","tensorstore.uint64","tensorstore.uint8","tensorstore.ustring","tensorstore.virtual_chunked","Indexing","Tutorial","Schema","JSON Spec"],titleterms:{"boolean":[98,410],"class":[27,61,176,412],"new":[12,13,15,402],"public":[28,58,73,108,184,219,229,233,241,359,362,364,384],accessor:[27,61,62,64,73,108,119,145,176,177,189,199,245,271,299,337,347],ad:[98,410],align:18,all:[120,148],an:402,api:[19,26],arithmet:347,arrai:[1,12,13,15,98,402,410],aspect:[12,15],assume_metadata:402,asynchron:26,authent:21,avif:4,behavior:22,block:108,bmp:5,broadcast:18,build:19,c:[15,19],ca:[16,21,22],cach:[22,409],callback:108,cast:2,certif:[16,21,22],checkout:19,chunk:[10,12,13,15,27,412],cloud:16,codec:[12,13,15,412],compar:410,comparison:[27,28,177,199,245,271,347],compos:410,compress:[12,13],compressor:15,concept:17,concurr:402,configur:16,constraint:[12,13,15],construct:410,constructor:[27,28,58,61,64,73,108,119,145,176,177,184,189,199,219,233,241,245,271,337,347,380,384],context:0,core:26,creat:[12,13,15,402],credenti:16,data:[12,13,15,26,299],dataset:411,debug:16,depend:19,develop:19,diagon:410,differ:410,dimens:[12,13,98,120,148,410,412],document:19,domain:[12,13,15,18],downsampl:3,driver:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25],effici:402,element:[12,15],ellipsi:[98,410],encod:13,environ:16,error:98,exampl:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,20,21,22,24,25,50,51,53,54,57,63,67,68,69,71,72,73,74,75,77,78,79,80,81,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,104,105,107,109,112,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,147,148,149,150,151,152,153,154,156,157,158,159,160,161,162,163,164,165,166,167,170,173,174,176,181,190,192,193,194,195,196,197,198,204,205,206,207,208,209,210,212,213,214,216,217,218,220,221,222,243,244,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,265,268,269,270,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,291,292,295,296,297,298,299,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,319,323,324,327,330,336,348,349,350,351,352,353,354,355,356,357,358,377,381,395,401,402,410,412],exist:402,explicit:[12,13,15],express:410,file:[10,20],fill:[12,13,15],flyem:411,fortran:15,framework:0,from:19,fulli:[120,148],gc:21,geometr:119,get:17,googl:16,hemibrain:411,highlight:17,http:[16,22],i:[176,299],improv:402,index:[18,26,98,119,145,245,271,299,410],instal:19,integ:[98,410],interfac:108,interv:[98,410],ipython:19,janelia:411,jpeg:6,json:[11,13,25,413],kei:[20,21,22,23,24,25],label:[120,148,410],layer:[14,23],layout:[12,13,15,412],librari:19,limit:[12,13,15,20,25],local:[19,411],map:[12,13,15],member:[28,58,73,108,184,219,229,233,241,359,362,364,384],memori:24,metadata:402,method:18,mix:[120,148],mode:410,mutat:[189,245,271],n5:[12,411],neuroglancer_precomput:13,neuroglancer_uint64_shard:25,non:336,numpi:410,o:[176,299],oindex:410,open:402,oper:[27,28,73,97,119,177,189,199,245,271,337,347,380,410],order:15,outer:410,output:18,packag:19,parti:19,pickl:409,png:7,proxi:16,publish:19,pypi:19,python:19,ratio:[12,15],raw:13,read:[13,402,411],refer:26,represent:[73,119,145,176,189,233,245,271],request:16,requir:19,run:19,scalar:15,schema:[12,13,14,15,412],segment:13,select:[12,13,15,410],semant:336,separ:13,sequenc:119,setter:27,shape:[12,13,15],shard:13,shell:19,singl:10,singleton:[98,410],skip:402,space:18,spec:[26,413],specif:[13,25],stack:14,start:17,storag:[10,16,23],store:[20,21,22,24,25],stride:410,string:[73,119,145,176,189,233,245,271],structur:15,style:410,support:[15,26,409],synchron:176,templat:27,tensorstor:[12,13,14,15,17,402],test:[19,21],third:19,tiff:8,tl:[16,21,22],transact:[176,299,336,409],transform:[18,410],translate_backward_bi:410,translate_bi:410,translate_to:410,transpos:410,tutori:411,type:[12,13,15,26,299],unconstrain:[12,13,15],unit:[12,13,412],unlabel:[120,148],unshard:13,us:402,valu:[12,13,15,20,21,22,23,24,25],variabl:16,vector:410,view:26,vindex:410,virtual:26,webp:9,when:[12,13,15,402],without:19,write:[13,402,411],zarr:15}})