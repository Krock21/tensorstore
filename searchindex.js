Search.setIndex({"titles": ["Context framework", "<code class=\"docutils literal notranslate\"><span class=\"pre\">array</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">cast</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">downsample</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">avif</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">bmp</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">jpeg</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">png</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">tiff</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">webp</span></code> Driver", "Drivers", "<code class=\"docutils literal notranslate\"><span class=\"pre\">json</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">n5</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">neuroglancer_precomputed</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">stack</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">zarr</span></code> Driver", "Environment variables", "TensorStore", "Index space", "Building and Installing", "<code class=\"docutils literal notranslate\"><span class=\"pre\">file</span></code> Key-Value Store driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">gcs</span></code> Key-Value Store driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">http</span></code> Key-Value Store driver", "Key-Value Storage Layer", "<code class=\"docutils literal notranslate\"><span class=\"pre\">memory</span></code> Key-Value Store driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">neuroglancer_uint64_sharded</span></code> Key-Value Store driver", "API reference", "tensorstore.ChunkLayout", "tensorstore.ChunkLayout.Grid", "tensorstore.ChunkLayout.Grid.__eq__", "tensorstore.ChunkLayout.Grid.__init__(components)", "tensorstore.ChunkLayout.Grid.__init__(json)", "tensorstore.ChunkLayout.Grid.aspect_ratio", "tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint", "tensorstore.ChunkLayout.Grid.elements", "tensorstore.ChunkLayout.Grid.elements_soft_constraint", "tensorstore.ChunkLayout.Grid.ndim", "tensorstore.ChunkLayout.Grid.rank", "tensorstore.ChunkLayout.Grid.shape", "tensorstore.ChunkLayout.Grid.shape_soft_constraint", "tensorstore.ChunkLayout.Grid.to_json", "tensorstore.ChunkLayout.Grid.update", "tensorstore.ChunkLayout.__eq__", "tensorstore.ChunkLayout.__init__(components)", "tensorstore.ChunkLayout.__init__(json)", "tensorstore.ChunkLayout.codec_chunk", "tensorstore.ChunkLayout.grid_origin", "tensorstore.ChunkLayout.grid_origin_soft_constraint", "tensorstore.ChunkLayout.inner_order", "tensorstore.ChunkLayout.inner_order_soft_constraint", "tensorstore.ChunkLayout.ndim", "tensorstore.ChunkLayout.rank", "tensorstore.ChunkLayout.read_chunk", "tensorstore.ChunkLayout.read_chunk_template", "tensorstore.ChunkLayout.to_json", "tensorstore.ChunkLayout.update", "tensorstore.ChunkLayout.write_chunk", "tensorstore.ChunkLayout.write_chunk_template", "tensorstore.CodecSpec", "tensorstore.CodecSpec.__init__", "tensorstore.CodecSpec.to_json", "tensorstore.Context", "tensorstore.Context.Resource", "tensorstore.Context.Resource.to_json", "tensorstore.Context.Spec", "tensorstore.Context.Spec.__init__", "tensorstore.Context.Spec.to_json", "tensorstore.Context.__getitem__", "tensorstore.Context.__init__(default)", "tensorstore.Context.__init__(json)", "tensorstore.Context.__init__(spec)", "tensorstore.Context.parent", "tensorstore.Context.spec", "tensorstore.Dim", "tensorstore.Dim.__contains__(dim)", "tensorstore.Dim.__contains__(index)", "tensorstore.Dim.__eq__", "tensorstore.Dim.__init__(exclusive_max)", "tensorstore.Dim.__init__(inclusive_max)", "tensorstore.Dim.__init__(size)", "tensorstore.Dim.__init__(unbounded)", "tensorstore.Dim.__iter__", "tensorstore.Dim.__len__", "tensorstore.Dim.__repr__", "tensorstore.Dim.__str__", "tensorstore.Dim.empty", "tensorstore.Dim.exclusive_max", "tensorstore.Dim.exclusive_min", "tensorstore.Dim.finite", "tensorstore.Dim.hull", "tensorstore.Dim.implicit_lower", "tensorstore.Dim.implicit_upper", "tensorstore.Dim.inclusive_max", "tensorstore.Dim.inclusive_min", "tensorstore.Dim.intersect", "tensorstore.Dim.label", "tensorstore.Dim.size", "tensorstore.DimExpression", "tensorstore.DimExpression.__getitem__", "tensorstore.DimExpression.diagonal", "tensorstore.DimExpression.label", "tensorstore.DimExpression.oindex", "tensorstore.DimExpression.stride", "tensorstore.DimExpression.translate_backward_by", "tensorstore.DimExpression.translate_by", "tensorstore.DimExpression.translate_to", "tensorstore.DimExpression.transpose", "tensorstore.DimExpression.vindex", "tensorstore.Future", "tensorstore.Future.__new__", "tensorstore.Future.add_done_callback", "tensorstore.Future.cancel", "tensorstore.Future.cancelled", "tensorstore.Future.done", "tensorstore.Future.exception", "tensorstore.Future.force", "tensorstore.Future.remove_done_callback", "tensorstore.Future.result", "tensorstore.FutureLike", "tensorstore.IndexDomain", "tensorstore.IndexDomain.__getitem__(domain)", "tensorstore.IndexDomain.__getitem__(expr)", "tensorstore.IndexDomain.__getitem__(identifier)", "tensorstore.IndexDomain.__getitem__(selection)", "tensorstore.IndexDomain.__getitem__(transform)", "tensorstore.IndexDomain.__init__(components)", "tensorstore.IndexDomain.__init__(dimensions)", "tensorstore.IndexDomain.__init__(json)", "tensorstore.IndexDomain.__len__", "tensorstore.IndexDomain.__repr__", "tensorstore.IndexDomain.exclusive_max", "tensorstore.IndexDomain.hull", "tensorstore.IndexDomain.implicit_lower_bounds", "tensorstore.IndexDomain.implicit_upper_bounds", "tensorstore.IndexDomain.inclusive_max", "tensorstore.IndexDomain.inclusive_min", "tensorstore.IndexDomain.index_exp", "tensorstore.IndexDomain.intersect", "tensorstore.IndexDomain.labels", "tensorstore.IndexDomain.ndim", "tensorstore.IndexDomain.origin", "tensorstore.IndexDomain.rank", "tensorstore.IndexDomain.shape", "tensorstore.IndexDomain.size", "tensorstore.IndexDomain.to_json", "tensorstore.IndexTransform", "tensorstore.IndexTransform.T", "tensorstore.IndexTransform.__call__", "tensorstore.IndexTransform.__getitem__(domain)", "tensorstore.IndexTransform.__getitem__(expr)", "tensorstore.IndexTransform.__getitem__(indices)", "tensorstore.IndexTransform.__getitem__(transform)", "tensorstore.IndexTransform.__init__(components)", "tensorstore.IndexTransform.__init__(domain)", "tensorstore.IndexTransform.__init__(json)", "tensorstore.IndexTransform.__repr__", "tensorstore.IndexTransform.domain", "tensorstore.IndexTransform.implicit_lower_bounds", "tensorstore.IndexTransform.implicit_upper_bounds", "tensorstore.IndexTransform.input_exclusive_max", "tensorstore.IndexTransform.input_inclusive_max", "tensorstore.IndexTransform.input_inclusive_min", "tensorstore.IndexTransform.input_labels", "tensorstore.IndexTransform.input_origin", "tensorstore.IndexTransform.input_rank", "tensorstore.IndexTransform.input_shape", "tensorstore.IndexTransform.ndim", "tensorstore.IndexTransform.oindex", "tensorstore.IndexTransform.origin", "tensorstore.IndexTransform.output", "tensorstore.IndexTransform.output_rank", "tensorstore.IndexTransform.shape", "tensorstore.IndexTransform.size", "tensorstore.IndexTransform.to_json", "tensorstore.IndexTransform.vindex", "tensorstore.Indexable", "tensorstore.KvStore", "tensorstore.KvStore.KeyRange", "tensorstore.KvStore.KeyRange.__eq__", "tensorstore.KvStore.KeyRange.__init__", "tensorstore.KvStore.KeyRange.copy", "tensorstore.KvStore.KeyRange.empty", "tensorstore.KvStore.KeyRange.exclusive_max", "tensorstore.KvStore.KeyRange.inclusive_min", "tensorstore.KvStore.ReadResult", "tensorstore.KvStore.ReadResult.__init__", "tensorstore.KvStore.ReadResult.stamp", "tensorstore.KvStore.ReadResult.state", "tensorstore.KvStore.ReadResult.value", "tensorstore.KvStore.Spec", "tensorstore.KvStore.Spec.__add__", "tensorstore.KvStore.Spec.__new__", "tensorstore.KvStore.Spec.__repr__", "tensorstore.KvStore.Spec.__truediv__", "tensorstore.KvStore.Spec.copy", "tensorstore.KvStore.Spec.path", "tensorstore.KvStore.Spec.to_json", "tensorstore.KvStore.Spec.update", "tensorstore.KvStore.Spec.url", "tensorstore.KvStore.TimestampedStorageGeneration", "tensorstore.KvStore.TimestampedStorageGeneration.__eq__", "tensorstore.KvStore.TimestampedStorageGeneration.__init__", "tensorstore.KvStore.TimestampedStorageGeneration.generation", "tensorstore.KvStore.TimestampedStorageGeneration.time", "tensorstore.KvStore.__delitem__", "tensorstore.KvStore.__getitem__", "tensorstore.KvStore.__repr__", "tensorstore.KvStore.__setitem__", "tensorstore.KvStore.copy", "tensorstore.KvStore.delete_range", "tensorstore.KvStore.list", "tensorstore.KvStore.open", "tensorstore.KvStore.path", "tensorstore.KvStore.read", "tensorstore.KvStore.spec", "tensorstore.KvStore.transaction", "tensorstore.KvStore.url", "tensorstore.KvStore.with_transaction", "tensorstore.KvStore.write", "tensorstore.OutputIndexMap", "tensorstore.OutputIndexMap.__init__(constant)", "tensorstore.OutputIndexMap.__init__(index_array)", "tensorstore.OutputIndexMap.__init__(input_dimension)", "tensorstore.OutputIndexMap.index_array", "tensorstore.OutputIndexMap.index_range", "tensorstore.OutputIndexMap.input_dimension", "tensorstore.OutputIndexMap.method", "tensorstore.OutputIndexMap.offset", "tensorstore.OutputIndexMap.stride", "tensorstore.OutputIndexMaps", "tensorstore.OutputIndexMaps.__getitem__", "tensorstore.OutputIndexMaps.__len__", "tensorstore.OutputIndexMaps.rank", "tensorstore.OutputIndexMethod", "tensorstore.OutputIndexMethod.__init__", "tensorstore.OutputIndexMethod.__str__", "tensorstore.OutputIndexMethod.array", "tensorstore.OutputIndexMethod.constant", "tensorstore.OutputIndexMethod.name", "tensorstore.OutputIndexMethod.single_input_dimension", "tensorstore.OutputIndexMethod.value", "tensorstore.Promise", "tensorstore.Promise.new", "tensorstore.Promise.set_exception", "tensorstore.Promise.set_result", "tensorstore.Schema", "tensorstore.Schema.T", "tensorstore.Schema.__eq__", "tensorstore.Schema.__getitem__(domain)", "tensorstore.Schema.__getitem__(expr)", "tensorstore.Schema.__getitem__(indices)", "tensorstore.Schema.__getitem__(transform)", "tensorstore.Schema.__init__(components)", "tensorstore.Schema.__init__(json)", "tensorstore.Schema.__repr__", "tensorstore.Schema.chunk_layout", "tensorstore.Schema.codec", "tensorstore.Schema.copy", "tensorstore.Schema.dimension_units", "tensorstore.Schema.domain", "tensorstore.Schema.dtype", "tensorstore.Schema.fill_value", "tensorstore.Schema.ndim", "tensorstore.Schema.oindex", "tensorstore.Schema.origin", "tensorstore.Schema.rank", "tensorstore.Schema.shape", "tensorstore.Schema.size", "tensorstore.Schema.to_json", "tensorstore.Schema.update", "tensorstore.Schema.vindex", "tensorstore.Spec", "tensorstore.Spec.T", "tensorstore.Spec.__eq__", "tensorstore.Spec.__getitem__(domain)", "tensorstore.Spec.__getitem__(expr)", "tensorstore.Spec.__getitem__(indices)", "tensorstore.Spec.__getitem__(transform)", "tensorstore.Spec.__new__", "tensorstore.Spec.__repr__", "tensorstore.Spec.chunk_layout", "tensorstore.Spec.codec", "tensorstore.Spec.copy", "tensorstore.Spec.dimension_units", "tensorstore.Spec.domain", "tensorstore.Spec.dtype", "tensorstore.Spec.fill_value", "tensorstore.Spec.kvstore", "tensorstore.Spec.ndim", "tensorstore.Spec.oindex", "tensorstore.Spec.origin", "tensorstore.Spec.rank", "tensorstore.Spec.schema", "tensorstore.Spec.shape", "tensorstore.Spec.size", "tensorstore.Spec.to_json", "tensorstore.Spec.transform", "tensorstore.Spec.update", "tensorstore.Spec.vindex", "tensorstore.TensorStore", "tensorstore.TensorStore.T", "tensorstore.TensorStore.__array__", "tensorstore.TensorStore.__getitem__(domain)", "tensorstore.TensorStore.__getitem__(expr)", "tensorstore.TensorStore.__getitem__(indices)", "tensorstore.TensorStore.__getitem__(transform)", "tensorstore.TensorStore.__setitem__(domain)", "tensorstore.TensorStore.__setitem__(expr)", "tensorstore.TensorStore.__setitem__(indices)", "tensorstore.TensorStore.__setitem__(transform)", "tensorstore.TensorStore.astype", "tensorstore.TensorStore.chunk_layout", "tensorstore.TensorStore.codec", "tensorstore.TensorStore.dimension_units", "tensorstore.TensorStore.domain", "tensorstore.TensorStore.dtype", "tensorstore.TensorStore.fill_value", "tensorstore.TensorStore.kvstore", "tensorstore.TensorStore.mode", "tensorstore.TensorStore.ndim", "tensorstore.TensorStore.oindex", "tensorstore.TensorStore.oindex.__setitem__", "tensorstore.TensorStore.origin", "tensorstore.TensorStore.rank", "tensorstore.TensorStore.read", "tensorstore.TensorStore.readable", "tensorstore.TensorStore.resize", "tensorstore.TensorStore.resolve", "tensorstore.TensorStore.schema", "tensorstore.TensorStore.shape", "tensorstore.TensorStore.size", "tensorstore.TensorStore.spec", "tensorstore.TensorStore.transaction", "tensorstore.TensorStore.vindex", "tensorstore.TensorStore.vindex.__setitem__", "tensorstore.TensorStore.with_transaction", "tensorstore.TensorStore.writable", "tensorstore.TensorStore.write", "tensorstore.Transaction", "tensorstore.Transaction.__init__", "tensorstore.Transaction.abort", "tensorstore.Transaction.aborted", "tensorstore.Transaction.atomic", "tensorstore.Transaction.commit_async", "tensorstore.Transaction.commit_started", "tensorstore.Transaction.commit_sync", "tensorstore.Transaction.future", "tensorstore.Transaction.open", "tensorstore.Unit", "tensorstore.Unit.__eq__", "tensorstore.Unit.__init__(components)", "tensorstore.Unit.__init__(json)", "tensorstore.Unit.__init__(multiplier)", "tensorstore.Unit.__init__(pair)", "tensorstore.Unit.__init__(unit)", "tensorstore.Unit.__mul__", "tensorstore.Unit.__truediv__", "tensorstore.Unit.base_unit", "tensorstore.Unit.multiplier", "tensorstore.Unit.to_json", "tensorstore.VirtualChunkedReadParameters", "tensorstore.VirtualChunkedReadParameters.if_not_equal", "tensorstore.VirtualChunkedReadParameters.staleness_bound", "tensorstore.VirtualChunkedWriteParameters", "tensorstore.VirtualChunkedWriteParameters.if_equal", "tensorstore.WriteFutures", "tensorstore.WriteFutures.add_done_callback", "tensorstore.WriteFutures.cancel", "tensorstore.WriteFutures.cancelled", "tensorstore.WriteFutures.commit", "tensorstore.WriteFutures.copy", "tensorstore.WriteFutures.done", "tensorstore.WriteFutures.exception", "tensorstore.WriteFutures.remove_done_callback", "tensorstore.WriteFutures.result", "tensorstore.array", "tensorstore.bfloat16", "tensorstore.bool", "tensorstore.cast", "tensorstore.complex128", "tensorstore.complex64", "tensorstore.d", "tensorstore.d.__class_getitem__", "tensorstore.downsample(spec)", "tensorstore.downsample(store)", "tensorstore.dtype", "tensorstore.dtype.__call__", "tensorstore.dtype.__init__(dtype)", "tensorstore.dtype.__init__(name)", "tensorstore.dtype.name", "tensorstore.dtype.numpy_dtype", "tensorstore.dtype.to_json", "tensorstore.dtype.type", "tensorstore.float16", "tensorstore.float32", "tensorstore.float64", "tensorstore.inf", "tensorstore.int16", "tensorstore.int32", "tensorstore.int64", "tensorstore.int8", "tensorstore.json", "tensorstore.newaxis", "tensorstore.open", "tensorstore.string", "tensorstore.uint16", "tensorstore.uint32", "tensorstore.uint64", "tensorstore.uint8", "tensorstore.ustring", "tensorstore.virtual_chunked", "Indexing", "Tutorial", "Schema", "JSON Spec"], "terms": {"configur": [0, 17, 19, 21, 22], "option": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 73, 119, 245, 252, 269, 271, 280, 281, 283, 284, 286, 292, 297, 326, 331, 360, 363, 403, 410, 413, 414], "tensorstor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 18, 19, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414], "driver": [0, 17, 26, 58, 98, 108, 176, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 245, 256, 258, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 321, 324, 326, 328, 331, 333, 334, 337, 338, 348, 378, 403, 411, 412, 413, 414], "ar": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 41, 43, 53, 55, 57, 66, 76, 98, 99, 101, 106, 107, 119, 120, 121, 124, 148, 167, 174, 175, 176, 210, 211, 213, 252, 258, 263, 269, 270, 273, 279, 280, 281, 283, 284, 286, 289, 292, 297, 298, 308, 320, 321, 326, 333, 334, 337, 338, 348, 376, 403, 404, 409, 410, 411, 413, 414], "specifi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 41, 43, 48, 49, 53, 55, 57, 58, 73, 77, 78, 79, 97, 98, 102, 103, 104, 105, 106, 107, 109, 114, 117, 119, 120, 122, 123, 125, 136, 148, 152, 153, 174, 176, 177, 179, 184, 197, 199, 204, 207, 209, 210, 211, 213, 214, 218, 241, 243, 244, 245, 252, 255, 256, 258, 261, 269, 270, 280, 281, 283, 284, 286, 287, 292, 297, 298, 299, 310, 324, 326, 331, 333, 334, 337, 348, 352, 355, 356, 360, 362, 363, 364, 378, 381, 402, 403, 410, 411, 413, 414], "us": [0, 1, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 45, 67, 68, 73, 97, 98, 102, 103, 104, 105, 108, 109, 115, 118, 119, 121, 124, 136, 145, 176, 190, 197, 211, 213, 214, 217, 241, 245, 248, 249, 250, 251, 263, 270, 271, 274, 275, 276, 277, 287, 289, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 309, 312, 317, 320, 321, 324, 326, 328, 331, 332, 333, 334, 335, 337, 338, 343, 347, 348, 354, 360, 363, 365, 375, 381, 401, 402, 404, 409, 410, 411, 412, 413], "which": [0, 2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 53, 57, 61, 69, 70, 71, 72, 73, 102, 103, 104, 105, 109, 119, 145, 199, 203, 213, 255, 305, 337, 343, 348, 357, 365, 375, 381, 410, 411, 412, 413], "allow": [0, 14, 15, 18, 19, 20, 21, 22, 98, 297, 308, 309, 331, 337, 338, 403, 413], "resourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 61, 62, 63, 67, 68, 197, 211, 214, 273, 279, 297, 331, 403, 410, 414], "cach": [0, 10, 11, 12, 13, 15, 17, 25, 26, 61, 213, 214, 299, 324, 327, 331, 337, 360, 361, 362, 403, 412], "pool": [0, 25, 214, 331, 403, 410], "concurr": [0, 10, 11, 12, 13, 15, 16, 17, 20, 21, 22, 23, 108, 214, 297, 331, 337], "execut": [0, 19, 108, 115, 403, 410], "authent": [0, 16], "credenti": [0, 21, 26, 61, 412], "json": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 31, 40, 43, 44, 45, 46, 47, 48, 49, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 119, 127, 144, 145, 154, 173, 176, 189, 191, 192, 196, 206, 211, 245, 247, 253, 254, 268, 271, 273, 278, 279, 295, 348, 351, 359, 401, 403, 413], "wai": [0, 12, 13, 15, 17, 19, 410, 413], "share": [0, 16, 17, 20, 21, 22, 26, 61, 68, 197, 211, 214, 297, 331, 403, 410], "multipl": [0, 3, 10, 12, 13, 15, 17, 18, 19, 20, 21, 22, 24, 258, 297, 306, 307, 308, 309, 321, 331, 334, 337, 338, 403, 410, 411], "object": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 89, 94, 108, 109, 114, 117, 119, 126, 131, 136, 137, 152, 153, 198, 212, 216, 241, 243, 244, 255, 301, 337, 338, 348, 365, 372, 374, 385, 386, 392, 411, 412, 413, 414], "A": [0, 12, 13, 15, 20, 98, 106, 213, 241, 252, 258, 269, 297, 313, 324, 326, 348, 381, 403, 410, 411, 413], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 43, 48, 49, 53, 55, 57, 67, 68, 71, 73, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 114, 115, 117, 118, 119, 120, 123, 124, 125, 131, 132, 133, 136, 137, 143, 145, 146, 148, 152, 157, 158, 167, 168, 171, 172, 174, 190, 197, 199, 203, 204, 205, 207, 209, 210, 213, 214, 218, 221, 222, 246, 247, 248, 249, 250, 251, 252, 258, 263, 264, 266, 267, 269, 270, 272, 273, 274, 275, 276, 277, 280, 281, 283, 284, 286, 289, 290, 292, 293, 294, 297, 298, 300, 302, 305, 306, 307, 308, 309, 312, 313, 316, 317, 320, 321, 322, 323, 324, 325, 329, 330, 331, 333, 334, 336, 337, 338, 342, 345, 347, 348, 352, 354, 357, 360, 361, 365, 401, 403, 404, 409, 410, 411, 412, 413, 414], "map": [0, 14, 18, 25, 26, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 121, 124, 145, 147, 148, 149, 150, 151, 152, 153, 154, 167, 169, 174, 176, 219, 220, 221, 222, 229, 296, 402, 411], "identifi": [0, 10, 12, 15, 18, 19, 23, 119, 120, 122, 148, 176, 199, 202, 410, 411, 413, 414], "contextresourc": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 24, 25], "specif": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 19, 20, 21, 22, 23, 24, 26, 58, 61, 64, 65, 176, 189, 197, 198, 199, 202, 214, 216, 271, 280, 281, 283, 284, 286, 292, 297, 331, 348, 403, 413, 414], "member": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 43, 45, 46, 47, 48, 49, 52, 55, 56, 66, 413, 414], "type": [0, 1, 2, 3, 10, 11, 14, 17, 25, 67, 108, 118, 145, 175, 245, 252, 260, 269, 271, 285, 297, 302, 303, 306, 308, 309, 310, 315, 316, 321, 334, 337, 338, 348, 375, 376, 377, 378, 385, 386, 387, 392, 393, 394, 395, 397, 398, 399, 400, 401, 403, 404, 407, 409, 410, 411, 412, 413, 414], "overrid": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 297, 331, 403, 414], "default": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 25, 61, 66, 68, 69, 70, 77, 78, 79, 97, 98, 109, 125, 145, 150, 152, 176, 197, 211, 214, 245, 250, 271, 276, 297, 299, 304, 308, 331, 381, 403, 410, 411, 413], "given": [0, 3, 20, 61, 67, 73, 75, 98, 102, 103, 104, 105, 411, 413], "must": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 43, 55, 68, 89, 94, 98, 106, 115, 124, 213, 248, 251, 252, 269, 274, 277, 297, 302, 305, 306, 309, 326, 331, 337, 403, 410, 411, 413, 414], "support": [0, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 23, 24, 25, 97, 108, 136, 175, 176, 204, 207, 209, 218, 258, 299, 308, 325, 336, 338, 376, 411, 412, 413, 414], "id": [0, 15, 21, 25, 67, 299, 304, 305, 312, 320, 328, 331, 333, 403, 413], "defin": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 24, 25, 26, 98, 119, 245, 376, 410, 411, 413], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 43, 53, 55, 57, 67, 73, 89, 94, 99, 100, 102, 103, 104, 105, 108, 114, 117, 118, 119, 120, 131, 136, 137, 145, 148, 151, 153, 176, 190, 197, 204, 205, 207, 209, 213, 214, 217, 218, 247, 248, 252, 258, 269, 271, 273, 274, 296, 297, 302, 313, 314, 316, 331, 335, 337, 338, 347, 348, 365, 403, 404, 409, 410, 411, 413, 414], "compat": [0, 10, 11, 12, 13, 14, 15, 16, 18, 19, 119, 136, 252, 269, 297, 306, 308, 309, 316, 321, 334, 337, 403, 411, 412, 413], "cache_pool": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 25, 63, 67, 69, 71, 72, 279, 299, 302, 303, 304, 305, 320, 331, 333, 337, 403, 410, 412], "total_bytes_limit": [0, 10, 12, 13, 15, 25, 63, 67, 69, 71, 72, 410, 412], "10000000": [0, 63, 67, 71, 72, 403], "remot": [0, 16, 17], "100000000": [0, 410, 412], "data_copy_concurr": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 25, 98, 108, 279, 299, 302, 303, 304, 305, 310, 320, 331, 333, 378, 403, 410, 411, 412], "limit": [0, 8, 17, 18, 21, 22, 23, 71, 72, 365, 410], "8": [0, 4, 13, 14, 18, 19, 25, 26, 98, 102, 103, 104, 120, 121, 124, 127, 130, 136, 148, 150, 151, 152, 154, 159, 167, 173, 174, 248, 263, 270, 274, 289, 298, 299, 302, 306, 308, 313, 320, 321, 324, 333, 334, 337, 400, 403, 408, 411, 412, 414], "string": [0, 3, 10, 11, 12, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 83, 84, 95, 129, 155, 177, 179, 182, 183, 192, 202, 206, 254, 279, 310, 348, 354, 404, 409, 413, 414], "null": [0, 8, 13, 15, 404, 409, 413], "particular": [0, 17], "One": [0, 3, 10, 12, 15, 414], "directli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 136, 145, 190, 280, 281, 283, 284, 286, 292, 306, 307, 308, 309, 321, 334, 348, 410, 411, 413, 414], "all": [0, 3, 10, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 26, 43, 53, 55, 57, 98, 102, 103, 104, 105, 106, 125, 145, 152, 210, 214, 252, 269, 297, 305, 324, 331, 337, 338, 403, 410, 411, 413, 414], "refer": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 98, 197, 214, 297, 331, 337, 411, 413, 414], "anoth": [0, 73, 74, 76, 89, 94, 119, 120, 131, 137, 145, 148, 151, 177, 178, 245, 247, 271, 273, 410, 411], "same": [0, 10, 11, 12, 13, 14, 15, 18, 19, 22, 24, 68, 100, 102, 103, 104, 105, 197, 214, 297, 312, 317, 328, 331, 337, 338, 365, 403, 410, 411, 412, 413], "current": [0, 8, 15, 18, 108, 204, 205, 207, 213, 299, 301, 324, 326, 337, 338, 410, 412], "parent": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 61, 69, 70, 71, 72, 414], "syntax": [0, 11, 19, 20, 21, 22, 24, 306, 307, 308, 309, 321, 334, 348, 411, 413], "where": [0, 3, 13, 14, 16, 18, 21, 26, 98, 101, 107, 118, 120, 136, 148, 150, 152, 154, 167, 174, 252, 269, 297, 403, 410, 411, 413, 414], "match": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 22, 24, 89, 94, 100, 102, 103, 104, 105, 120, 148, 210, 213, 218, 252, 269, 297, 331, 363, 364, 403, 410, 411, 413, 414], "thi": [0, 1, 3, 8, 10, 11, 12, 13, 15, 16, 18, 19, 20, 21, 23, 43, 55, 61, 67, 68, 71, 72, 96, 101, 107, 108, 115, 119, 120, 124, 136, 143, 145, 146, 148, 149, 151, 167, 168, 171, 172, 174, 176, 204, 205, 207, 209, 210, 213, 215, 217, 218, 246, 252, 255, 263, 264, 266, 267, 269, 270, 272, 277, 280, 281, 283, 284, 286, 289, 290, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 308, 309, 312, 317, 320, 321, 322, 323, 326, 328, 329, 330, 331, 333, 334, 335, 337, 338, 348, 352, 355, 356, 357, 365, 385, 386, 403, 410, 411, 412, 413], "new": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 17, 18, 26, 69, 70, 98, 99, 100, 102, 103, 104, 105, 112, 119, 123, 124, 176, 197, 214, 218, 241, 242, 243, 244, 248, 249, 250, 251, 252, 255, 258, 263, 269, 270, 274, 275, 276, 277, 289, 297, 298, 312, 326, 328, 331, 338, 339, 402, 410, 411, 412, 413, 414], "instanc": [0, 68, 111, 385, 386], "onli": [0, 3, 8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 43, 53, 55, 57, 98, 99, 108, 125, 152, 218, 252, 269, 280, 281, 283, 284, 286, 292, 297, 318, 324, 326, 337, 338, 365, 403, 410, 411, 412, 413], "valid": [0, 12, 18, 22, 43, 55, 98, 102, 199, 203, 213, 411, 413], "within": [0, 3, 10, 11, 12, 13, 15, 18, 21, 23, 24, 25, 27, 43, 48, 55, 114, 117, 176, 189, 195, 210, 212, 213, 299, 324, 410, 411, 413], "size": [0, 12, 13, 15, 18, 19, 30, 41, 73, 79, 82, 83, 85, 89, 94, 96, 119, 125, 143, 145, 152, 172, 245, 267, 271, 294, 299, 330, 337, 403, 410, 412, 413], "an": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26, 53, 57, 73, 80, 95, 97, 98, 99, 102, 103, 104, 108, 109, 111, 118, 119, 120, 121, 124, 125, 126, 127, 136, 145, 147, 148, 152, 153, 154, 176, 179, 182, 183, 189, 193, 202, 204, 205, 207, 210, 211, 213, 218, 219, 221, 229, 233, 241, 245, 248, 251, 252, 258, 269, 271, 274, 277, 297, 299, 301, 302, 305, 306, 308, 309, 321, 331, 334, 337, 338, 345, 348, 365, 375, 376, 381, 385, 387, 396, 401, 410, 411, 412, 413, 414], "memori": [0, 1, 10, 12, 13, 15, 17, 18, 22, 23, 26, 176, 197, 204, 205, 207, 209, 210, 211, 213, 214, 217, 218, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 321, 324, 326, 328, 331, 333, 334, 337, 338, 375, 403, 410, 412, 414], "least": [0, 12, 18, 120, 148, 411], "recent": [0, 98, 112, 123, 204, 205, 207, 213, 243, 251, 411], "lru": 0, "each": [0, 3, 10, 11, 12, 13, 14, 15, 16, 18, 22, 25, 30, 41, 68, 100, 102, 103, 104, 105, 119, 125, 132, 133, 136, 138, 145, 152, 157, 158, 162, 245, 252, 255, 258, 269, 271, 283, 297, 299, 301, 313, 403, 410, 411, 413, 414], "separ": [0, 10, 11, 12, 15, 16, 19, 21, 190, 204, 205, 207, 213, 218, 301, 337, 411, 414], "integ": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 21, 22, 25, 26, 73, 101, 121, 122, 124, 167, 263, 289, 320, 321, 397, 398, 399, 400, 405, 406, 407, 408, 413, 414], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 21, 25, 26, 43, 48, 50, 51, 54, 55, 79, 83, 89, 93, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 120, 121, 122, 123, 124, 125, 126, 131, 136, 147, 148, 149, 150, 151, 152, 153, 154, 156, 167, 173, 174, 210, 219, 220, 221, 222, 233, 237, 248, 249, 250, 251, 252, 253, 255, 259, 263, 265, 268, 270, 274, 275, 276, 277, 284, 289, 292, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 320, 321, 324, 326, 328, 331, 333, 334, 337, 338, 359, 377, 378, 382, 402, 403, 410, 411, 412, 413, 414], "soft": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 27, 28, 30, 33, 35, 39, 41, 43, 47, 48, 49, 53, 55, 57, 413, 414], "total": [0, 119, 143, 145, 172, 245, 267, 271, 294, 299, 330], "number": [0, 3, 4, 6, 7, 8, 9, 10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 28, 30, 34, 35, 37, 41, 43, 51, 55, 100, 102, 103, 104, 105, 114, 117, 119, 125, 128, 136, 141, 143, 145, 152, 172, 210, 245, 252, 267, 269, 271, 294, 297, 299, 323, 330, 348, 354, 379, 380, 403, 410, 411, 413, 414], "byte": [0, 12, 15, 25, 26, 176, 177, 184, 188, 199, 202, 205, 210, 360, 361, 363, 364, 404, 414], "data": [0, 1, 2, 3, 10, 11, 14, 17, 22, 23, 24, 25, 190, 191, 192, 193, 194, 195, 206, 208, 213, 245, 252, 260, 269, 271, 285, 297, 304, 306, 308, 309, 310, 312, 315, 316, 321, 324, 326, 331, 334, 337, 360, 361, 362, 363, 364, 375, 376, 377, 378, 385, 386, 387, 393, 394, 395, 397, 398, 399, 400, 401, 403, 404, 407, 409, 410, 411, 413, 414], "evict": 0, "from": [0, 1, 2, 3, 8, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 26, 27, 28, 31, 43, 44, 55, 58, 59, 61, 64, 65, 69, 70, 71, 72, 98, 99, 106, 119, 122, 125, 126, 127, 136, 145, 152, 153, 154, 177, 179, 189, 191, 199, 201, 210, 211, 213, 245, 252, 253, 255, 271, 278, 301, 337, 338, 348, 350, 351, 353, 354, 357, 375, 381, 382, 385, 387, 403, 411, 412, 413], "when": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 18, 19, 22, 25, 98, 109, 115, 209, 213, 258, 297, 306, 307, 308, 309, 321, 324, 331, 334, 337, 346, 365, 410, 411, 413, 414], "reach": 0, "queued_for_writeback_bytes_limit": 0, "pend": 0, "writeback": [0, 17, 337, 363, 364], "init": 0, "half": [0, 26, 73, 77, 176, 177, 179, 393, 414], "cpu": [0, 19], "core": [0, 17, 411], "copi": [0, 18, 19, 176, 177, 180, 189, 194, 208, 245, 247, 255, 257, 271, 273, 282, 326, 337, 365, 370, 411], "encod": [0, 4, 6, 9, 12, 15, 17, 19, 22, 25, 26, 58, 403, 412, 413, 414], "decod": [0, 17, 26, 58, 413], "1": [0, 1, 3, 4, 12, 13, 14, 15, 18, 19, 21, 22, 25, 26, 43, 48, 50, 51, 54, 55, 73, 74, 75, 81, 86, 87, 89, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 120, 121, 122, 123, 124, 130, 131, 134, 135, 136, 137, 138, 140, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 159, 160, 161, 162, 163, 167, 170, 173, 174, 221, 222, 233, 239, 246, 248, 249, 250, 251, 252, 253, 255, 258, 263, 265, 268, 270, 272, 276, 277, 283, 292, 295, 296, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 319, 320, 321, 323, 326, 328, 331, 333, 334, 337, 338, 348, 352, 354, 377, 378, 382, 396, 402, 403, 410, 411, 412, 413, 414], "maximum": [0, 3, 21, 22, 114, 117], "mai": [0, 3, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 73, 102, 103, 104, 105, 106, 109, 118, 119, 123, 125, 152, 176, 204, 205, 207, 211, 213, 214, 217, 241, 258, 299, 301, 306, 308, 309, 312, 321, 324, 326, 328, 331, 334, 335, 337, 343, 347, 348, 360, 362, 381, 403, 410, 411, 413, 414], "If": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 43, 48, 49, 53, 55, 57, 81, 86, 87, 92, 93, 96, 99, 100, 102, 103, 104, 105, 106, 108, 109, 111, 114, 117, 120, 123, 125, 136, 148, 152, 153, 197, 204, 205, 207, 209, 210, 213, 218, 248, 249, 250, 251, 252, 263, 269, 270, 274, 275, 276, 277, 289, 297, 298, 317, 326, 331, 337, 338, 354, 363, 364, 403, 410, 411, 413, 414], "special": [0, 13, 18, 19, 21, 22, 26, 86, 87, 92, 93, 98, 179, 182, 396, 411, 413], "valu": [0, 1, 3, 4, 9, 10, 11, 14, 16, 17, 18, 26, 43, 55, 66, 73, 76, 86, 87, 92, 93, 96, 98, 102, 108, 118, 123, 176, 184, 185, 186, 187, 188, 189, 190, 193, 194, 195, 197, 198, 199, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 233, 234, 240, 245, 252, 258, 261, 269, 271, 286, 287, 297, 299, 313, 316, 317, 326, 331, 337, 348, 352, 401, 403, 410, 411, 412, 413, 414], "global": [0, 21, 22, 410], "equal": [0, 1, 12, 13, 15, 18, 25, 26, 27, 28, 29, 42, 48, 49, 66, 73, 76, 86, 87, 92, 93, 96, 98, 99, 124, 177, 178, 199, 200, 245, 247, 248, 249, 251, 252, 269, 271, 273, 274, 275, 277, 287, 297, 302, 305, 306, 309, 312, 316, 317, 348, 349, 396, 403, 410, 411, 413], "thread": [0, 108, 109, 114, 117, 204, 205, 207, 301, 324, 410], "avail": [0, 16, 19, 360, 361, 376], "appli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 22, 43, 55, 97, 98, 101, 107, 119, 121, 145, 149, 150, 167, 174, 250, 263, 270, 276, 289, 298, 303, 314, 320, 321, 381, 403, 411, 413, 414], "file_io_concurr": [0, 20, 71, 72, 196, 206, 208], "local": [0, 16, 17, 20, 21, 23], "filesystem": [0, 17, 20, 23, 403, 412], "o": [0, 16, 17, 204, 205, 207, 280, 281, 283, 284, 286, 292, 324, 411, 412], "oper": [0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 26, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 121, 124, 145, 150, 167, 174, 175, 176, 184, 204, 207, 209, 211, 213, 217, 218, 241, 250, 263, 270, 276, 289, 298, 299, 304, 306, 307, 308, 309, 321, 326, 332, 334, 335, 337, 347, 365, 403, 410], "4": [0, 1, 3, 4, 9, 12, 13, 14, 15, 18, 19, 74, 81, 87, 92, 98, 101, 103, 104, 105, 106, 107, 120, 122, 123, 124, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 148, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 173, 251, 258, 277, 305, 308, 309, 319, 323, 326, 334, 338, 354, 378, 403, 410, 411, 412, 413], "fewer": [0, 411], "than": [0, 10, 11, 12, 13, 15, 18, 19, 43, 48, 49, 55, 98, 123, 213, 360, 362, 410, 411, 413], "back": [1, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 17, 20, 23, 338, 412], "contigu": [1, 73, 324], "via": [1, 3, 12, 13, 14, 15, 17, 19, 48, 49, 411], "small": [1, 13], "constant": [1, 18, 26, 219, 220, 233, 237, 396, 411], "c": [1, 17, 20, 43, 48, 55, 98, 106, 209, 280, 292, 299, 304, 305, 320, 324, 331, 333, 403, 411, 413], "python": [1, 3, 15, 17, 26, 73, 83, 308, 309, 401, 404, 409, 411], "api": [1, 16, 17, 21], "adapt": 1, "exist": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 98, 102, 120, 148, 152, 153, 204, 205, 207, 209, 211, 213, 218, 252, 258, 269, 297, 306, 308, 309, 321, 326, 331, 334, 337, 363, 364, 385, 387, 410, 411, 413, 414], "extend": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 20, 21, 22, 24, 25], "open": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 73, 77, 108, 176, 177, 179, 197, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 258, 271, 297, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 321, 324, 326, 328, 331, 333, 334, 337, 338, 347, 410, 411, 412, 413, 414], "creat": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 17, 19, 26, 61, 64, 65, 67, 176, 197, 211, 214, 241, 242, 258, 271, 297, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 321, 324, 326, 328, 331, 333, 334, 337, 338, 339, 410, 412, 413, 414], "requir": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 125, 152, 297, 324, 331, 403, 412, 413, 414], "dtype": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 26, 98, 108, 245, 247, 252, 253, 254, 257, 260, 265, 268, 269, 271, 282, 284, 285, 286, 292, 297, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 326, 328, 331, 333, 334, 337, 338, 375, 376, 377, 378, 379, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414], "nest": [1, 14, 18, 197, 211, 297], "rank": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 27, 28, 30, 36, 37, 41, 43, 48, 50, 51, 53, 55, 57, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 119, 120, 121, 124, 125, 128, 132, 133, 136, 139, 141, 145, 148, 149, 150, 151, 152, 153, 154, 164, 166, 167, 170, 174, 229, 231, 232, 245, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 260, 262, 263, 265, 268, 269, 270, 271, 277, 288, 291, 292, 296, 297, 299, 305, 306, 309, 319, 323, 326, 328, 402, 403, 410, 411, 413, 414], "initi": [1, 19, 21, 22, 326, 410, 411], "context": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 98, 108, 196, 197, 206, 208, 211, 214, 273, 279, 297, 299, 301, 302, 303, 304, 305, 310, 317, 320, 331, 333, 337, 338, 375, 378, 403, 410, 411, 412, 414], "augment": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 414], "32": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 18, 21, 22, 26, 398, 399, 406, 413, 414], "transform": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 26, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 119, 121, 124, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 173, 174, 219, 220, 221, 222, 229, 245, 248, 249, 250, 251, 252, 263, 269, 270, 271, 274, 275, 276, 277, 289, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 309, 310, 314, 320, 331, 333, 378, 402, 403, 410, 412, 414], "also": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 43, 55, 76, 97, 102, 103, 104, 105, 176, 211, 252, 269, 297, 317, 326, 337, 338, 376, 403, 410, 411, 412, 413, 414], "input": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 26, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 123, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 174, 219, 222, 252, 269, 296, 297, 381, 402, 403, 410, 411, 414], "otherwis": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 21, 22, 25, 77, 78, 79, 109, 120, 125, 148, 152, 345, 413, 414], "constraint": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 18, 27, 28, 30, 33, 35, 38, 39, 41, 43, 46, 47, 48, 49, 53, 55, 57, 245, 252, 255, 256, 258, 269, 271, 280, 281, 283, 284, 286, 292, 297, 331, 348, 403, 410, 413, 414], "indextransform": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 26, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 119, 121, 124, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 219, 220, 221, 222, 229, 233, 245, 250, 251, 263, 270, 271, 274, 275, 276, 277, 289, 296, 298, 299, 302, 303, 305, 309, 402, 411, 414], "schema": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 18, 26, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 292, 297, 299, 328, 403, 410, 414], "fail": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 213, 326, 338, 410, 411, 414], "do": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 25, 411, 414], "ani": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 21, 22, 26, 27, 28, 31, 40, 43, 44, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 98, 101, 105, 107, 108, 114, 119, 120, 123, 127, 136, 144, 145, 148, 154, 167, 173, 174, 176, 189, 190, 191, 196, 197, 204, 205, 207, 209, 211, 213, 214, 218, 241, 242, 245, 253, 263, 268, 270, 271, 273, 278, 280, 281, 283, 284, 286, 289, 292, 295, 297, 298, 304, 306, 308, 309, 314, 320, 321, 324, 326, 331, 333, 334, 337, 338, 347, 348, 351, 359, 403, 410, 411, 412, 413, 414], "chunk_layout": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 245, 248, 249, 250, 251, 252, 253, 255, 263, 265, 268, 269, 270, 271, 280, 292, 297, 299, 311, 328, 403, 410, 413, 414], "ignor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 53, 57, 413, 414], "suitabl": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 403, 413, 414], "select": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 26, 89, 94, 97, 98, 99, 100, 102, 103, 104, 105, 106, 119, 123, 131, 137, 258, 381, 382, 414], "automat": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 115, 299, 301, 338, 403, 413, 414], "base": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 20, 21, 22, 25, 26, 118, 175, 176, 189, 192, 195, 206, 212, 245, 247, 254, 271, 273, 279, 297, 310, 331, 348, 350, 353, 357, 378, 379, 380, 383, 384, 403, 411, 413, 414], "combin": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 348, 403, 411, 413, 414], "previous": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 24, 25, 108, 116, 211, 403, 410], "It": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 24, 25, 98, 120, 148, 297, 348, 403, 411, 413], "normal": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 22, 25, 120, 148, 252, 269, 297, 337, 338, 403, 411], "more": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 23, 25, 98, 123, 305, 337, 410, 411, 414], "conveni": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 25, 305], "2": [1, 3, 11, 12, 13, 14, 15, 18, 19, 22, 25, 26, 50, 51, 54, 73, 81, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 120, 121, 122, 123, 124, 125, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 147, 148, 149, 150, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 167, 173, 174, 221, 222, 233, 236, 248, 249, 250, 251, 252, 253, 255, 257, 263, 265, 268, 270, 277, 288, 291, 292, 296, 299, 304, 305, 307, 308, 309, 310, 311, 319, 320, 321, 323, 326, 331, 333, 334, 337, 338, 355, 356, 378, 382, 396, 402, 403, 410, 411, 412, 413], "3": [1, 3, 9, 12, 13, 14, 15, 18, 19, 22, 25, 50, 51, 73, 81, 89, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 173, 174, 221, 247, 248, 249, 250, 251, 252, 253, 257, 258, 260, 262, 263, 265, 268, 269, 270, 276, 277, 289, 292, 298, 304, 305, 307, 309, 310, 319, 320, 323, 326, 333, 334, 338, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 378, 382, 402, 403, 410, 411, 412], "5": [1, 12, 14, 15, 18, 19, 53, 57, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 101, 102, 103, 104, 105, 106, 107, 120, 121, 122, 123, 124, 125, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 148, 149, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 220, 221, 222, 241, 243, 244, 248, 249, 250, 251, 254, 263, 270, 274, 275, 276, 277, 289, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 319, 320, 321, 323, 324, 328, 331, 333, 334, 337, 338, 350, 351, 352, 353, 356, 358, 378, 402, 403, 410, 411, 412, 413], "6": [1, 3, 4, 12, 13, 14, 15, 18, 19, 53, 57, 75, 81, 98, 101, 102, 103, 104, 105, 107, 120, 121, 122, 123, 124, 126, 130, 131, 132, 133, 136, 137, 148, 150, 153, 157, 158, 159, 167, 174, 248, 249, 250, 274, 275, 276, 299, 302, 303, 304, 305, 306, 307, 308, 309, 319, 321, 323, 326, 334, 337, 338, 403, 410, 411, 412, 413], "int32": [1, 2, 12, 13, 14, 15, 26, 98, 247, 319, 323, 398, 403, 411, 414], "virtual": [2, 3, 17, 19, 145, 299, 302, 303, 304, 305, 320, 333, 383, 384, 410], "read": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 22, 25, 26, 27, 28, 43, 52, 53, 55, 176, 184, 185, 205, 211, 213, 217, 218, 297, 299, 301, 304, 305, 306, 307, 308, 309, 310, 318, 321, 324, 325, 326, 331, 332, 334, 335, 337, 338, 360, 361, 362, 365, 375, 378, 410, 411, 413], "write": [2, 10, 11, 12, 14, 15, 17, 18, 21, 25, 26, 27, 28, 43, 55, 56, 57, 176, 204, 207, 209, 211, 213, 217, 218, 299, 305, 306, 307, 308, 309, 310, 318, 321, 324, 326, 332, 334, 335, 336, 337, 338, 363, 365, 375, 378, 410, 411, 413], "view": [2, 3, 17, 145, 146, 176, 217, 229, 245, 246, 271, 272, 299, 300, 302, 303, 304, 305, 310, 320, 333, 335, 378, 383, 384, 410, 411, 412], "perform": [2, 3, 13, 17, 18, 97, 204, 207, 209, 211, 217, 218, 280, 281, 283, 284, 286, 292, 306, 307, 308, 309, 321, 324, 334, 335, 403, 410, 411, 412, 413], "element": [2, 3, 13, 27, 28, 30, 34, 35, 41, 43, 48, 49, 54, 55, 98, 119, 143, 145, 172, 245, 267, 271, 279, 294, 299, 326, 330, 411, 413], "wise": [2, 12, 15, 26, 410], "convers": [2, 299, 301, 412], "top": [2, 25, 412, 413], "level": [2, 7, 12, 15, 16, 17, 213, 412, 413], "compos": [2, 17, 18, 124, 145, 151, 251, 277], "under": [2, 10, 15, 20, 411], "convert": [2, 4, 12, 27, 28, 40, 43, 54, 55, 58, 60, 108, 109, 123, 189, 196, 197, 214, 245, 252, 268, 269, 271, 295, 297, 306, 308, 309, 321, 331, 334, 337, 348, 359, 375, 403, 411], "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 17, 18, 22, 23, 26, 97, 101, 107, 108, 121, 124, 136, 145, 150, 152, 154, 167, 174, 219, 221, 233, 236, 245, 250, 261, 263, 270, 271, 276, 279, 286, 289, 297, 298, 299, 301, 304, 305, 306, 307, 308, 309, 310, 314, 315, 316, 319, 320, 321, 323, 324, 326, 331, 333, 334, 337, 338, 375, 376, 378, 381, 410, 412, 413, 414], "zarr": [2, 3, 10, 17, 256, 274, 275, 276, 277, 280, 281, 284, 286, 289, 292, 298, 299, 301, 304, 305, 308, 309, 311, 312, 315, 316, 320, 321, 324, 326, 328, 331, 333, 334, 337, 403, 411, 413], "kvstore": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 321, 324, 326, 328, 331, 333, 334, 337, 338, 403, 410, 412], "gc": [2, 3, 11, 15, 23, 24, 198, 212, 216, 337, 403, 412], "bucket": [2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 15, 21, 25, 198, 212, 216, 403, 412], "my": [2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 15, 21, 22, 25, 198, 212, 216], "fly": 3, "comput": [3, 14, 18, 21, 119, 131, 204, 205, 207, 248, 274, 299, 302, 303, 304, 305, 320, 333, 410, 411], "exactli": [3, 12, 13, 15, 98, 403, 410, 411], "posit": [3, 14, 18, 252, 269, 297, 299, 316, 403, 411, 412], "alwai": [3, 10, 11, 12, 13, 15, 98, 102, 306, 307, 308, 309, 321, 334, 411, 413], "respect": [3, 13, 30, 41, 73, 99, 102, 337, 411], "origin": [3, 12, 13, 15, 18, 27, 43, 46, 47, 55, 97, 102, 103, 104, 105, 119, 135, 140, 145, 163, 168, 197, 214, 245, 252, 264, 269, 271, 290, 297, 299, 322, 331, 381, 403, 410, 411, 413], "dimens": [3, 14, 15, 17, 18, 26, 27, 28, 30, 37, 41, 43, 51, 53, 55, 57, 73, 77, 78, 79, 80, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 119, 121, 122, 123, 125, 126, 128, 132, 133, 136, 138, 141, 145, 146, 149, 152, 157, 158, 162, 174, 219, 222, 245, 246, 248, 249, 252, 258, 269, 270, 271, 272, 274, 275, 283, 288, 291, 295, 296, 297, 298, 299, 300, 302, 303, 307, 313, 323, 333, 334, 338, 348, 352, 381, 382, 402, 403, 410, 412], "To": [3, 10, 12, 13, 15, 17, 19, 21, 68, 190, 211, 297, 304, 331, 403, 410, 411], "differ": [3, 10, 12, 13, 15, 18, 22, 23, 101, 107, 108, 167, 174, 213, 252, 263, 269, 270, 289, 297, 298, 320, 321, 328, 331, 333, 334, 403, 404, 409, 410], "translat": [3, 12, 15, 18, 97, 103, 104, 105, 381, 411], "domain": [3, 14, 17, 26, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 165, 167, 168, 171, 172, 174, 245, 246, 248, 249, 250, 251, 252, 258, 259, 263, 264, 266, 267, 269, 270, 271, 272, 274, 277, 283, 284, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 313, 314, 321, 322, 323, 324, 326, 328, 329, 330, 333, 334, 337, 381, 396, 402, 403, 410, 411, 412, 413], "properti": [3, 12, 15, 17, 23, 25, 157, 158, 159, 160, 161, 162, 163, 165, 255, 338, 403, 410, 413, 414], "offset": [3, 14, 18, 27, 53, 57, 97, 103, 104, 124, 151, 152, 153, 154, 170, 173, 219, 220, 221, 222, 227, 295, 381, 411, 412, 413], "equival": [3, 4, 12, 15, 19, 22, 43, 55, 73, 82, 98, 99, 102, 103, 104, 106, 119, 124, 136, 146, 168, 171, 172, 213, 246, 252, 264, 266, 267, 269, 272, 290, 293, 294, 297, 300, 301, 305, 322, 323, 329, 330, 331, 337, 345, 352, 403, 410, 411, 413], "downsample_factor": [3, 26, 383, 384], "howev": [3, 15, 19, 21, 98, 108, 145, 410], "factor": 3, "length": [3, 12, 15, 18, 26, 147, 326, 404, 409, 411, 413], "indic": [3, 12, 13, 15, 18, 26, 66, 73, 77, 78, 79, 80, 81, 88, 90, 91, 95, 97, 98, 101, 102, 106, 107, 119, 120, 125, 132, 133, 136, 145, 147, 148, 150, 152, 157, 158, 167, 174, 177, 179, 181, 182, 183, 184, 187, 202, 213, 218, 233, 245, 250, 251, 252, 258, 263, 269, 270, 271, 276, 277, 279, 289, 297, 298, 299, 304, 305, 308, 309, 313, 320, 321, 325, 326, 331, 333, 334, 336, 337, 338, 341, 342, 344, 347, 348, 365, 381, 382, 396, 403, 410, 411, 413], "downsample_method": 3, "downsamplemethod": [3, 383, 384], "mean": [3, 10, 11, 12, 13, 15, 411], "follow": [3, 12, 13, 14, 15, 16, 18, 19, 21, 22, 118, 120, 148, 252, 269, 297, 348, 403, 410, 411, 413, 414], "method": [3, 12, 15, 21, 26, 219, 226, 233, 305, 383, 384, 411, 412], "stride": [3, 18, 97, 102, 152, 154, 173, 219, 221, 222, 228, 381], "median": 3, "mode": [3, 19, 98, 101, 107, 271, 297, 299, 318, 331, 338, 403], "min": [3, 18, 326], "max": [3, 326], "quit": 3, "effici": [3, 13, 17, 18, 27, 52, 53, 56, 57, 337, 338, 413, 414], "addit": [3, 10, 11, 12, 13, 15, 16, 18, 19, 21, 22, 23, 25, 27, 28, 41, 55, 76, 97, 98, 189, 193, 245, 252, 269, 271, 297, 338, 347, 348, 365, 403, 410, 411, 413], "buffer": [3, 15, 410], "index": [3, 4, 5, 6, 7, 8, 9, 13, 17, 25, 27, 51, 73, 75, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 120, 121, 122, 123, 124, 125, 126, 127, 136, 141, 147, 148, 149, 150, 151, 152, 153, 154, 156, 167, 169, 174, 175, 219, 221, 229, 233, 248, 250, 251, 252, 258, 263, 269, 270, 274, 276, 277, 284, 289, 296, 297, 298, 302, 304, 305, 306, 308, 309, 313, 320, 321, 333, 334, 381, 396, 402, 403, 410, 413], "while": [3, 4, 12, 13, 15, 18, 19, 22, 43, 48, 55, 204, 207, 301, 348, 404, 409, 410, 411, 412, 413], "offer": 3, "function": [3, 18, 25, 26, 119, 410, 412], "uniform": [3, 17, 413], "other": [3, 12, 13, 15, 18, 19, 27, 28, 29, 30, 41, 42, 53, 57, 68, 73, 75, 76, 89, 94, 98, 119, 120, 125, 131, 137, 145, 177, 178, 199, 200, 204, 205, 207, 245, 247, 271, 273, 305, 326, 348, 349, 403, 410, 411, 413], "simpler": 3, "note": [3, 12, 13, 98], "For": [3, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 53, 57, 102, 121, 145, 301, 337, 365, 410, 413], "dimension": [3, 17, 18, 26, 98, 119, 299, 411], "etc": [3, 16, 19, 21, 22, 328], "return": [3, 10, 11, 12, 13, 15, 18, 26, 62, 63, 64, 66, 67, 68, 69, 70, 73, 83, 84, 85, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 114, 117, 119, 122, 123, 124, 128, 129, 144, 145, 147, 155, 173, 176, 177, 180, 189, 190, 192, 193, 194, 205, 206, 208, 209, 210, 213, 217, 218, 229, 231, 232, 245, 248, 249, 250, 251, 254, 255, 257, 263, 270, 271, 274, 275, 276, 277, 279, 282, 289, 291, 298, 299, 301, 302, 303, 304, 305, 310, 317, 318, 324, 326, 331, 335, 337, 343, 345, 375, 378, 383, 384, 403, 410, 413], "rectangular": [3, 13, 18], "region": [3, 13, 18, 411, 412], "non": [3, 10, 11, 12, 13, 15, 18, 19, 21, 25, 89, 94, 98, 106, 120, 148, 176, 211, 252, 269, 297, 338, 363, 364, 365, 403, 410, 411, 413], "complex": [3, 26, 379, 380, 411, 414], "numer": [3, 18, 348, 411, 413], "bool": [3, 15, 26, 27, 28, 29, 40, 42, 43, 55, 58, 60, 62, 63, 64, 66, 73, 74, 75, 76, 77, 78, 79, 80, 85, 88, 90, 91, 98, 108, 111, 112, 113, 119, 125, 132, 133, 145, 152, 157, 158, 176, 177, 178, 181, 189, 196, 197, 199, 200, 214, 245, 247, 268, 271, 273, 295, 297, 299, 325, 326, 327, 331, 336, 338, 339, 341, 342, 344, 347, 348, 349, 365, 367, 368, 371, 377, 403, 411, 414], "present": [3, 12, 18], "In": [3, 15, 16, 18, 19, 21, 22, 23, 24, 76, 136, 179, 183, 305, 338, 348, 365, 411, 412, 413], "case": [3, 15, 16, 18, 19, 21, 22, 102, 103, 104, 105, 120, 136, 145, 148, 179, 182, 213, 305, 411, 413], "contain": [3, 11, 16, 18, 19, 73, 74, 75, 81, 98, 102, 119, 131, 177, 181, 326, 354, 410, 411, 412, 413], "odd": 3, "lower": [3, 4, 18, 73, 77, 78, 79, 80, 87, 90, 93, 99, 102, 105, 119, 125, 132, 135, 136, 140, 145, 152, 157, 161, 163, 168, 177, 179, 183, 245, 264, 271, 290, 299, 322, 411, 413], "most": [3, 13, 15, 16, 18, 21, 23, 98, 112, 123, 125, 152, 176, 204, 205, 207, 213, 243, 251, 305, 337, 411, 413], "frequent": 3, "tie": 3, "lowest": 3, "among": 3, "set": [3, 4, 9, 13, 14, 16, 19, 21, 22, 24, 26, 43, 55, 97, 100, 102, 176, 213, 252, 269, 297, 331, 381, 403, 410, 411], "common": [3, 10, 14, 16, 23, 43, 55, 145, 411], "chosen": [3, 12, 13, 15, 403], "lexicograph": [3, 43, 48, 55, 176, 177, 179, 183, 324, 413], "smallest": [3, 13, 15], "unspecifi": [3, 10, 12, 13, 15, 18, 28, 37, 43, 53, 55, 57, 184, 185, 187, 202, 210, 213, 245, 259, 260, 265, 271, 285, 291, 296, 297, 331, 403, 410, 411, 413], "determinist": 3, "version": [3, 16, 19, 199, 202, 403, 410, 411], "arithmet": 3, "averag": 3, "over": [3, 16, 18, 21, 73, 81, 124, 152, 153, 337, 411, 413], "bound": [3, 10, 12, 13, 14, 15, 18, 22, 26, 73, 76, 77, 78, 79, 80, 86, 87, 89, 90, 91, 92, 93, 94, 98, 99, 101, 102, 105, 107, 119, 120, 125, 130, 131, 132, 133, 134, 135, 136, 137, 140, 145, 148, 150, 152, 154, 157, 158, 159, 160, 161, 163, 167, 168, 174, 176, 177, 179, 182, 183, 197, 211, 213, 214, 215, 217, 245, 252, 264, 269, 271, 273, 279, 290, 297, 299, 314, 317, 322, 326, 327, 331, 335, 360, 362, 403, 410, 411, 413], "round": [3, 13, 18, 411], "nearest": 3, "even": [3, 11, 17, 22, 66, 204, 207, 326, 411], "block": [3, 12, 13, 15, 20, 109, 114, 117, 204, 205, 207, 301, 306, 307, 308, 309, 321, 324, 334, 337, 338, 410, 413], "start": [3, 19, 26, 98, 106, 108, 122, 210, 338, 344, 347, 381, 410, 411], "interv": [3, 18, 21, 26, 53, 57, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 92, 93, 96, 176, 177], "9": [3, 12, 13, 15, 18, 19, 76, 98, 120, 124, 136, 148, 222, 248, 249, 274, 275, 302, 303, 306, 307, 308, 326, 403, 411, 412, 413], "minimum": [3, 19, 119, 131], "imag": [4, 5, 6, 7, 8, 9, 13], "file": [4, 5, 7, 8, 9, 11, 12, 13, 15, 16, 17, 19, 21, 23, 24, 190, 191, 192, 193, 194, 195, 196, 206, 208, 337, 338, 403, 412], "volum": [4, 5, 6, 7, 8, 9, 13, 25], "height": [4, 5, 6, 7, 8, 9], "y": [4, 5, 6, 7, 8, 9, 12, 13, 15, 18, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 120, 121, 122, 123, 126, 127, 131, 137, 138, 148, 149, 154, 156, 162, 164, 166, 170, 173, 181, 211, 248, 249, 250, 251, 259, 263, 270, 274, 275, 296, 302, 303, 306, 307, 314, 403, 411, 412], "width": [4, 5, 6, 7, 8, 9], "x": [4, 5, 6, 7, 8, 9, 12, 13, 15, 18, 19, 73, 77, 78, 79, 80, 83, 84, 89, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 120, 121, 122, 123, 127, 131, 137, 138, 148, 149, 151, 154, 156, 162, 164, 166, 170, 173, 181, 211, 248, 249, 250, 251, 259, 263, 270, 274, 275, 296, 302, 303, 306, 307, 314, 382, 403, 411, 412], "channel": [4, 5, 6, 7, 8, 9, 13, 403, 412], "between": [4, 9, 18, 21, 403, 410], "yuv": [4, 9], "plane": 4, "vari": 4, "bit": [4, 12, 15, 18, 25, 26, 397, 398, 399, 400, 405, 406, 407, 408, 414], "represent": [4, 18, 20, 21, 22, 23, 24, 26, 27, 28, 31, 40, 44, 54, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 83, 84, 127, 129, 144, 154, 155, 173, 191, 192, 196, 198, 206, 216, 247, 253, 254, 268, 273, 278, 279, 295, 299, 326, 348, 351, 359, 385, 411, 413, 414], "them": [4, 19, 337], "regardless": [4, 10, 11, 12, 13, 15, 411], "depth": 4, "grei": 4, "greya": 4, "rgb": [4, 9], "rgba": [4, 9], "underli": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 23, 25, 145, 271, 287, 297, 299, 317, 337, 338, 365, 403, 413], "storag": [4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 17, 21, 26, 27, 43, 48, 49, 55, 176, 199, 200, 201, 218, 271, 287, 297, 299, 317, 328, 337, 338, 365, 403, 413], "mechan": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 176, 365, 411], "uint8": [4, 5, 6, 7, 8, 9, 12, 13, 15, 26, 252, 253, 254, 257, 260, 265, 268, 269, 282, 285, 408, 414], "quantiz": 4, "unus": [4, 6, 7, 9], "higher": [4, 9, 12, 15, 213], "qualiti": [4, 6, 9, 13], "speed": [4, 19], "g": [4, 5, 6, 7, 8, 9, 13, 15, 16, 21, 23, 25, 26, 98, 102, 103, 104, 105, 198, 214, 216, 255, 331, 338, 410, 411, 412], "path": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 176, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 216, 218, 287, 317, 338, 403, 412], "experiment": [5, 8, 21], "75": [6, 13], "rang": [6, 18, 73, 97, 103, 104, 105, 106, 176, 177, 178, 179, 180, 181, 182, 183, 209, 210, 221, 222, 337, 381, 382, 411], "100": [6, 9, 12, 13, 15, 18, 53, 54, 57, 128, 139, 141, 248, 249, 250, 251, 259, 263, 270, 280, 288, 291, 292, 295, 296, 297, 312, 313, 316, 317, 328, 410, 412], "jpg": 6, "compression_level": 7, "compress": [7, 15, 302, 303, 338, 403, 412, 413], "veri": [8, 13, 25, 121, 124], "subset": [8, 18, 19, 108, 119, 123, 411], "page": 8, "either": [9, 10, 12, 13, 15, 18, 19, 21, 26, 73, 120, 123, 148, 306, 307, 308, 309, 321, 326, 334, 337, 338, 346, 381, 403, 411], "lossi": 9, "422": 9, "incur": 9, "some": [9, 12, 18, 19, 338, 348, 403, 413], "perceptu": 9, "loss": 9, "lossless": 9, "boolean": [9, 10, 12, 13, 15, 24, 26, 101, 167, 263, 289, 320, 321, 377, 414], "true": [9, 10, 11, 12, 13, 15, 24, 68, 73, 74, 75, 76, 77, 78, 79, 80, 83, 85, 88, 90, 91, 98, 112, 132, 133, 157, 158, 181, 196, 197, 214, 241, 243, 244, 297, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 321, 324, 326, 328, 331, 333, 334, 337, 338, 349, 403, 411, 412], "avif": [9, 10, 414], "95": 9, "better": [9, 301, 410], "cast": [10, 26, 310, 378, 414], "downsampl": [10, 26, 383, 384, 414], "stack": [10, 19, 414], "bmp": [10, 414], "jpeg": [10, 13, 19, 25, 414], "png": [10, 19, 414], "tiff": [10, 19, 414], "webp": [10, 414], "n5": [10, 17, 273, 278, 279, 282, 283, 285, 287, 288, 291, 295, 296, 297, 302, 303, 306, 307, 313, 314, 317, 338, 403, 413], "neuroglancer_precomput": [10, 25, 258, 403, 412, 413], "keyvaluestorebackedchunkdriv": [10, 12, 13, 15, 414], "subtyp": [10, 12, 15, 23, 413, 414], "kvstoreurl": [10, 11, 12, 13, 15, 20, 21, 22, 23, 24], "join": [10, 11, 12, 13, 15, 189, 193], "compon": [10, 11, 12, 13, 15, 22, 27, 43, 119, 125, 145, 152, 189, 193, 245, 252, 414], "after": [10, 11, 12, 13, 15, 19, 213, 252, 269, 297, 326, 337, 354, 365, 403, 410, 411, 413], "backward": [10, 11, 12, 13, 15, 97, 103, 381, 411], "should": [10, 11, 12, 13, 15, 16, 19, 21, 22, 23, 24, 25, 109, 326, 337, 363, 364, 410, 413], "instead": [10, 11, 12, 13, 15, 16, 19, 108, 136, 145, 190, 213, 297, 305, 331, 337, 403, 410, 411], "neither": [10, 11, 12, 13, 15, 18, 331, 403, 410], "nor": [10, 12, 13, 15, 18, 331, 403, 410], "fals": [10, 12, 13, 15, 24, 28, 40, 58, 60, 62, 63, 64, 66, 74, 75, 77, 78, 79, 80, 88, 90, 91, 96, 98, 109, 112, 132, 133, 157, 158, 181, 189, 196, 197, 214, 241, 243, 244, 245, 268, 271, 295, 297, 299, 326, 327, 331, 338, 339, 403, 411, 413], "both": [10, 12, 13, 15, 18, 19, 43, 55, 120, 148, 252, 269, 297, 403, 410, 413], "permit": [10, 11, 12, 13, 15, 18, 97, 98, 106, 121, 124, 252, 269, 297, 326, 403, 410, 411], "doe": [10, 12, 13, 15, 16, 18, 19, 20, 22, 68, 98, 100, 102, 103, 104, 105, 136, 145, 280, 281, 283, 284, 286, 287, 292, 297, 304, 317, 331, 337, 348, 376, 403, 411, 413], "alreadi": [10, 12, 13, 15, 18, 19, 111, 197, 211, 252, 269, 297, 338, 340, 343, 344, 403, 410], "delete_exist": [10, 12, 13, 15, 297, 331, 338, 403, 412], "delet": [10, 12, 13, 15, 21, 176, 204, 207, 209, 218, 297, 326, 331, 403], "befor": [10, 12, 13, 15, 213, 297, 331, 403], "assume_metadata": [10, 12, 13, 15, 297, 331], "skip": [10, 12, 13, 15, 19, 297, 331, 360, 361, 411], "metadata": [10, 12, 13, 15, 21, 25, 258, 280, 281, 283, 284, 285, 286, 288, 291, 292, 295, 296, 297, 299, 302, 303, 304, 305, 320, 326, 331, 333, 338, 412], "possibl": [10, 12, 13, 15, 18, 19, 297, 331, 403, 410], "just": [10, 12, 13, 15, 18, 297, 331, 403, 411, 412], "assum": [10, 11, 12, 13, 15, 18, 297, 331, 403, 413], "necessari": [10, 12, 13, 15, 16, 18, 120, 148, 297, 331, 403, 414], "spec": [10, 12, 13, 15, 17, 22, 61, 64, 65, 66, 68, 69, 70, 72, 98, 175, 176, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 211, 212, 214, 247, 248, 260, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 312, 331, 383, 403], "can": [10, 12, 13, 15, 16, 17, 18, 19, 21, 136, 210, 248, 252, 258, 269, 274, 297, 302, 331, 337, 338, 360, 361, 403, 410, 411, 412, 413], "lead": [10, 12, 13, 15, 18, 19, 109, 297, 331, 354, 403, 413], "corrupt": [10, 12, 13, 15, 297, 331, 403], "store": [10, 11, 12, 13, 15, 16, 18, 23, 26, 176, 189, 190, 193, 194, 195, 198, 199, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 258, 271, 287, 297, 299, 310, 311, 312, 313, 316, 317, 326, 328, 331, 337, 338, 348, 378, 403, 410, 412, 413], "writer": [10, 12, 13, 15, 297, 331, 403], "recheck_cached_metadata": [10, 12, 13, 15], "cacherevalidationbound": [10, 11, 12, 13, 15], "time": [10, 11, 12, 13, 15, 18, 21, 199, 201, 203, 213, 410, 413], "fresh": [10, 11, 12, 13, 15], "older": [10, 11, 12, 13, 15, 213, 360, 362], "revalid": [10, 11, 12, 13, 15, 22], "prior": [10, 11, 12, 13, 15, 19, 100, 102, 103, 104, 105, 326, 410, 411], "check": [10, 12, 13, 15, 73, 74, 75, 343, 411], "everi": [10, 11, 12, 13, 15, 17, 18, 22, 25, 99, 403, 410, 413], "With": [10, 11, 12, 13, 15], "recheck": [10, 11, 12, 13, 15], "recheck_cached_data": [10, 11, 12, 13, 15, 412], "being": [10, 11, 12, 13, 15, 19, 213, 338, 410], "partial": [10, 12, 13, 15, 18, 403], "consist": [10, 11, 12, 13, 15, 17, 98, 136, 213, 411], "enabl": [10, 12, 13, 15, 17, 19, 21, 73, 81, 145, 337, 410, 411], "you": [10, 12, 13, 15, 16, 19, 21, 22, 68, 337, 403, 410, 412], "zero": [10, 12, 13, 15, 18, 25, 73, 85, 98, 99, 125, 152, 252, 269, 297, 403, 410, 411, 413], "explicit": [10, 18, 73, 119, 124, 125, 132, 133, 145, 152, 157, 158, 245, 248, 251, 252, 269, 271, 274, 277, 297, 299, 302, 305, 306, 309, 337, 403, 410, 411, 413], "determin": [10, 12, 18, 25, 120, 148, 176, 403, 413], "what": 10, "circumst": 10, "never": [10, 324, 337, 411], "wa": [10, 16, 61, 72, 114, 117, 211, 213, 255, 343, 403, 410, 412], "second": [10, 18, 21, 114, 117, 199, 203, 213], "sinc": [10, 18, 98, 114, 117, 136, 199, 203, 213, 410, 411, 412], "unix": [10, 21, 23, 24, 25, 114, 117, 199, 203, 213], "epoch": [10, 114, 117, 199, 203, 213], "provid": [11, 12, 13, 15, 16, 17, 19, 20, 21, 108, 337, 338, 365, 403, 411], "access": [11, 12, 13, 15, 17, 18, 20, 21, 22, 23, 48, 49, 255, 365, 403, 411, 412], "kei": [11, 12, 13, 15, 17, 26, 61, 67, 176, 177, 179, 181, 184, 188, 189, 190, 193, 194, 195, 198, 199, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 271, 287, 297, 299, 317, 337, 338, 403, 412, 413], "layer": [11, 12, 13, 15, 337, 413], "itself": [11, 19, 337, 365, 411], "still": [11, 13, 15, 18, 121, 124, 338, 347, 410, 411], "expos": 11, "singl": [11, 12, 13, 15, 16, 18, 26, 98, 106, 119, 122, 176, 204, 205, 207, 210, 213, 218, 219, 222, 252, 258, 269, 279, 297, 313, 348, 394, 403, 410, 411, 412, 413, 414], "sub": [11, 19, 412], "pointer": 11, "rfc": [11, 22], "6901": 11, "guarante": [11, 17, 204, 207, 209, 213, 218, 337, 338, 365, 376], "presenc": 11, "becaus": [11, 13, 19, 337, 410, 411], "implement": [11, 15, 17, 19, 25, 213], "atom": [11, 17, 24, 338, 339, 342, 410], "modifi": [11, 18, 119, 189, 197, 255, 299, 326, 337], "individu": [11, 13, 14, 411, 413], "two": [11, 18, 26, 27, 28, 29, 42, 199, 200, 337, 338, 348, 349, 365, 397, 398, 399, 400, 411, 413, 414], "process": [11, 17, 20, 301], "overlap": [11, 14], "lost": 11, "json_point": 11, "entir": [11, 13, 15, 18, 25, 120, 148, 301, 337, 354, 411, 413, 414], "empti": [11, 12, 18, 73, 85, 89, 94, 95, 120, 148, 177, 179, 181, 182, 183, 202, 218, 252, 269, 297, 348, 363, 364, 403, 410, 411, 413], "full": [11, 15, 18, 24, 98, 331, 411, 413], "b": [11, 19, 76, 106, 120, 148, 151, 176, 181, 185, 194, 202, 204, 205, 207, 208, 209, 210, 211, 213, 217, 218, 247, 257, 273, 282, 403, 411], "42": [11, 15, 109, 247, 261, 286, 299, 306, 316, 328, 337, 338, 403, 410], "error": [11, 12, 13, 14, 15, 18, 21, 22, 108, 109, 114, 117, 120, 148, 204, 205, 207, 213, 241, 243, 252, 269, 297, 345, 403, 410, 411], "attempt": [11, 21, 22, 403, 410, 411], "ancestor": 11, "inconsist": 11, "attribut": [11, 12, 411], "dataset": [12, 20, 21, 24, 196, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 314, 315, 319, 320, 321, 323, 324, 326, 331, 333, 334, 337, 338], "resiz": [12, 13, 15, 18, 73, 90, 91, 299, 326], "metdata": 12, "except": [12, 13, 15, 102, 108, 109, 112, 114, 115, 204, 205, 207, 241, 243, 252, 269, 273, 297, 338, 365, 372, 403, 410, 411, 413], "obtain": [12, 15, 98, 119, 255, 299, 327, 411, 412], "arbitrari": [12, 18, 22, 26, 401, 410, 411], "ones": 12, "list": [12, 16, 18, 19, 21, 81, 122, 176, 209, 210, 213, 383, 384, 403, 411], "here": 12, "thei": [12, 14, 24, 66, 121, 124, 404, 409, 410, 411], "includ": [12, 13, 15, 16, 17, 19, 22, 24, 26, 66, 119, 123, 271, 280, 281, 283, 284, 286, 292, 306, 308, 309, 321, 324, 331, 334, 337, 411, 413], "ident": [12, 13, 18, 25, 124, 152, 153, 214, 273, 331, 403, 412], "500": [12, 13, 15], "blocksiz": [12, 15, 299, 302, 303, 304, 305, 312, 320, 328, 331, 333, 338, 403, 412], "have": [12, 13, 14, 15, 18, 19, 21, 22, 73, 100, 120, 148, 197, 214, 248, 252, 269, 274, 297, 302, 314, 331, 338, 376, 403, 411, 412, 413], "accord": [12, 13, 15, 18, 19, 120, 148, 176, 177, 179, 183], "64": [12, 13, 15, 18, 25, 26, 403, 407, 412, 414], "datatyp": [12, 285, 302, 303, 338, 403, 412], "uint16": [12, 13, 15, 26, 282, 292, 338, 405, 414], "uint32": [12, 13, 15, 26, 108, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 320, 321, 324, 326, 328, 331, 333, 334, 337, 378, 406, 410, 412, 414], "uint64": [12, 13, 15, 25, 26, 403, 407, 412, 414], "int8": [12, 13, 15, 26, 400, 414], "int16": [12, 13, 15, 26, 397, 414], "int64": [12, 15, 26, 399, 414], "float32": [12, 13, 15, 26, 286, 311, 378, 380, 394, 403, 414], "float64": [12, 15, 26, 379, 395, 414], "ax": [12, 296, 302, 303], "label": [12, 13, 15, 17, 18, 26, 73, 76, 77, 78, 79, 80, 83, 84, 89, 94, 95, 97, 98, 99, 100, 106, 119, 121, 122, 123, 125, 126, 127, 131, 137, 138, 145, 149, 152, 162, 248, 249, 250, 251, 252, 259, 263, 269, 270, 274, 297, 302, 303, 306, 307, 314, 381, 382, 403, 410, 413], "unlabel": [12, 18, 73, 95, 125, 152, 413], "order": [12, 13, 18, 19, 21, 25, 26, 27, 43, 48, 49, 55, 98, 106, 145, 146, 176, 177, 179, 183, 210, 245, 246, 271, 272, 280, 292, 299, 300, 304, 305, 320, 324, 331, 333, 337, 403, 411, 413, 414], "As": [12, 15, 18, 98, 122, 179, 182, 376, 411], "overridden": [12, 19, 197, 211, 297, 403], "z": [12, 13, 18, 98, 100, 101, 102, 103, 104, 105, 106, 107, 120, 121, 122, 123, 127, 138, 148, 154, 156, 162, 164, 166, 170, 173, 248, 249, 250, 251, 259, 263, 270, 274, 275, 302, 303, 306, 307, 403, 411, 412], "physic": [12, 26, 245, 252, 258, 269, 271, 283, 297, 299, 313, 348, 403, 410, 413], "nm": [12, 13, 258, 283, 313, 349, 350, 351, 353, 354, 355, 356, 357, 359, 413], "": [12, 14, 16, 19, 26, 397, 398, 399, 400, 411, 414], "resolut": [12, 13, 283, 403, 412, 413], "multipli": [12, 13, 18, 348, 350, 352, 353, 354, 355, 358, 413], "dimension_unit": [12, 13, 14, 245, 252, 258, 269, 271, 283, 297, 299, 313, 403, 410, 413], "consid": [12, 337, 413], "40": [12, 13], "remain": [12, 15, 18, 98, 105, 197, 211, 297, 326, 347, 354, 411, 413], "blosc": [12, 15, 19, 299, 302, 303, 304, 305, 312, 320, 328, 331, 333, 403, 413], "bzip2": [12, 15, 19], "gzip": [12, 13, 15, 25, 403, 412, 413], "raw": [12, 25, 338], "xz": [12, 19], "compressor": [12, 256, 281, 286, 299, 304, 305, 312, 320, 328, 331, 333, 403, 413], "big": [12, 15, 25, 414], "endian": [12, 13, 15, 25, 414], "without": [12, 18, 21, 22, 97, 103, 104, 105, 190, 204, 205, 207, 211, 213, 218, 337, 338, 381, 403, 410, 411, 412, 413], "zlib": [12, 15, 19], "header": [12, 15, 22], "fastest": [12, 15, 19], "indicaet": 12, "best": [12, 13, 15], "slowest": [12, 15], "usezlib": [12, 413], "100kb": 12, "preset": 12, "correspond": [12, 13, 15, 18, 21, 22, 23, 24, 25, 26, 30, 41, 43, 55, 89, 94, 98, 99, 108, 109, 131, 136, 137, 241, 252, 258, 269, 297, 313, 365, 376, 377, 379, 380, 393, 394, 395, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414], "worst": [12, 13], "cname": [12, 15, 299, 302, 303, 304, 305, 312, 320, 328, 331, 333, 403, 413], "blosclz": [12, 15], "lz4": [12, 15, 19, 299, 302, 303, 304, 305, 312, 320, 328, 331, 333, 403, 413], "lz4hc": [12, 15], "snappi": [12, 15, 19], "zstd": [12, 15, 19], "clevel": [12, 15, 299, 302, 303, 304, 305, 312, 320, 328, 331, 333, 403, 413], "slower": [12, 15], "achiev": [12, 15], "shuffl": [12, 15, 299, 302, 303, 304, 305, 312, 320, 328, 331, 333, 403, 413], "No": [12, 15], "1000": [12, 13, 15, 248, 249, 250, 251, 263, 270, 284, 292, 299, 311, 403, 412], "2000": [12, 13, 15, 248, 249, 250, 251, 263, 270, 284, 292, 311, 403], "3000": [12, 13, 15, 248, 249, 250, 251, 263, 270, 284, 292, 311, 403], "200": [12, 13, 15, 53, 54, 57, 128, 139, 141, 248, 249, 250, 251, 259, 263, 270, 280, 283, 288, 291, 292, 295, 296, 297, 313, 317], "300": [12, 13, 15, 53, 57, 128, 139, 141, 248, 249, 250, 251, 259, 263, 270, 280, 283, 292, 297], "grid_origin": [12, 13, 15, 27, 43, 46, 47, 53, 55, 57, 248, 249, 250, 251, 252, 253, 255, 263, 265, 268, 270, 292, 311, 328, 413], "inner_ord": [12, 13, 15, 27, 43, 48, 49, 50, 51, 54, 55, 248, 249, 250, 251, 252, 253, 255, 263, 268, 270, 292, 311, 328, 403, 413], "read_chunk": [12, 13, 15, 27, 43, 52, 53, 54, 55, 292, 311, 328, 413], "write_chunk": [12, 13, 15, 27, 43, 54, 55, 56, 57, 292, 311, 328, 413], "exclusive_max": [12, 13, 15, 18, 73, 74, 75, 76, 77, 78, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 96, 119, 120, 121, 122, 123, 124, 125, 127, 130, 131, 132, 133, 136, 137, 148, 152, 153, 159, 173, 177, 179, 182, 248, 249, 250, 263, 270, 274, 292, 297, 302, 306, 326, 328, 411], "inclusive_min": [12, 13, 15, 18, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 119, 120, 121, 122, 123, 124, 125, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 148, 152, 153, 161, 173, 177, 179, 183, 248, 249, 250, 263, 270, 274, 292, 297, 302, 306, 326, 328, 396], "name": [12, 13, 15, 19, 22, 233, 235, 238, 385, 388, 389, 410, 411], "intern": [12, 13, 213], "format": [12, 13, 15, 16, 17, 25, 403, 413, 414], "upper": [12, 15, 18, 73, 77, 78, 79, 80, 86, 91, 92, 99, 119, 125, 130, 133, 134, 136, 145, 152, 158, 159, 160, 177, 179, 182, 411], "e": [12, 13, 15, 16, 18, 19, 21, 26, 43, 48, 55, 96, 98, 102, 103, 104, 105, 120, 124, 148, 213, 214, 255, 324, 331, 338, 410, 411, 413], "implicit": [12, 13, 14, 15, 18, 26, 73, 77, 78, 79, 80, 89, 90, 91, 94, 98, 99, 119, 120, 125, 131, 132, 133, 137, 145, 148, 152, 157, 158, 252, 269, 297, 403, 410, 411, 413], "nativ": [12, 15, 17, 411], "ha": [12, 13, 14, 15, 18, 21, 98, 105, 106, 108, 111, 112, 113, 197, 209, 214, 252, 269, 287, 297, 316, 331, 337, 338, 340, 341, 343, 344, 346, 347, 365, 403, 410, 411], "indexdomain": [12, 13, 15, 18, 26, 27, 53, 57, 73, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 153, 156, 245, 248, 249, 250, 251, 252, 259, 263, 269, 270, 271, 274, 284, 297, 299, 302, 303, 306, 307, 314, 403, 410, 411, 413], "chunklayout": [12, 13, 15, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 245, 248, 249, 250, 251, 252, 255, 263, 265, 268, 269, 270, 271, 280, 297, 299, 311, 403, 410, 413], "grid": [12, 13, 15, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 52, 55, 56, 337, 413], "hard": [12, 13, 15, 18, 27, 28, 30, 38, 41, 43, 46, 48, 49, 53, 55, 57, 413], "codec_chunk": [12, 13, 15, 27, 43, 45, 55, 413], "colexicograph": [12, 13, 43, 48, 55, 324, 413], "fortran": [12, 13, 43, 48, 55, 324, 413], "constrain": [12, 13, 14, 17, 18, 252, 269, 297, 403, 410, 411, 413], "explicitli": [12, 13, 15, 115, 411, 413], "implicitli": [12, 13, 15, 18, 411, 412, 413], "aspect_ratio": [12, 13, 15, 28, 30, 32, 41, 43, 55, 413], "million": [12, 13, 15], "per": [12, 13, 15, 18, 19, 21, 25, 28, 30, 34, 35, 41, 413], "t": [12, 13, 14, 15, 19, 50, 51, 53, 54, 57, 63, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 173, 174, 176, 181, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 220, 221, 222, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 326, 328, 331, 333, 334, 337, 338, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 378, 382, 396, 402, 403, 410, 411, 412], "result": [12, 13, 14, 15, 17, 18, 19, 26, 98, 99, 100, 107, 108, 109, 114, 115, 117, 118, 120, 148, 151, 174, 176, 184, 185, 197, 204, 205, 207, 210, 213, 214, 241, 243, 244, 248, 270, 274, 297, 298, 301, 302, 304, 306, 307, 308, 309, 321, 324, 331, 333, 334, 337, 338, 345, 346, 365, 374, 403, 410, 411, 412, 413], "102": [12, 15, 311, 403, 410, 412], "chunk_shap": [12, 15, 43, 55, 403], "chunk_aspect_ratio": [12, 13, 15, 43, 55, 403], "128": [12, 15], "chunk_el": [12, 15, 43, 55, 403], "2000000": [12, 13, 15], "79": [12, 13, 15], "159": [12, 13, 15], "paramet": [12, 13, 15, 21, 22, 23, 26, 30, 41, 43, 55, 58, 66, 67, 69, 70, 77, 78, 79, 80, 89, 94, 100, 102, 103, 104, 105, 106, 109, 114, 117, 121, 122, 123, 124, 125, 126, 131, 137, 147, 152, 153, 179, 197, 204, 205, 207, 209, 210, 211, 213, 214, 218, 248, 251, 252, 269, 274, 277, 297, 302, 305, 306, 308, 309, 321, 324, 326, 331, 334, 337, 375, 403, 410, 413, 414], "repres": [12, 13, 15, 18, 24, 26, 73, 118, 145, 219, 241, 324, 337, 348, 411, 413, 414], "leav": [12, 102, 103, 104, 410], "one": [12, 15, 16, 18, 19, 21, 25, 98, 99, 120, 125, 148, 152, 252, 269, 297, 305, 403, 410, 411, 413], "assign": [12, 13, 18, 306, 307, 308, 309, 321, 334, 410, 411, 412], "dimensionless": [12, 348, 413], "varlength": 12, "neuroglanc": [13, 17, 25, 403, 412, 413], "precomput": [13, 17, 25, 413], "multiscal": 13, "scale": [13, 21, 258], "scale_index": [13, 403, 412], "first": [13, 18, 19, 98, 99, 107, 174, 270, 298, 333, 334, 403, 411, 413], "left": [13, 18, 120, 148, 403, 410], "multiscale_metadata": [13, 403, 412], "independ": [13, 18, 26, 245, 403, 413], "info": 13, "bear": 13, "pick": 13, "data_typ": 13, "num_channel": [13, 403, 412], "scale_metadata": [13, 25, 403, 412], "chunk_siz": [13, 403, 412], "take": [13, 16, 17, 43, 55, 252, 269, 297, 403, 410, 411, 413], "place": [13, 16, 98], "serv": [13, 120, 148, 258, 410, 413], "rel": [13, 22, 106, 209, 411, 413], "xre": 13, "_": 13, "yre": 13, "zre": 13, "voxel": [13, 413], "xyz": 13, "voxel_offset": [13, 403, 412], "nanomet": 13, "compressed_segment": [13, 403, 412], "jpeg_qual": 13, "ijg": 13, "group": [13, 25, 26, 338], "recommend": [13, 19, 25, 306, 307, 308, 309, 321, 334, 348, 411, 413], "largest": 13, "compressed_segmentation_block_s": [13, 403, 412], "neuroglancer_uint64_shard": [13, 23], "shardingspec": [13, 25], "4nm": [13, 258, 354, 413], "40nm": 13, "4_4_40": 13, "40000": 13, "50000": 13, "10000": 13, "neuroglancer_multiscale_volum": 13, "8_8_8": 13, "20": [13, 18, 88, 98, 103, 104, 105, 250, 263, 270, 276, 289, 298, 301, 304, 320, 333], "30": [13, 98, 314], "1020": 13, "2030": 13, "3040": 13, "neuroglancer_uint64_sharded_v1": [13, 25, 403, 412], "data_encod": [13, 25, 403, 412], "hash": [13, 25, 403, 412], "minishard_bit": [13, 25, 403, 412], "minishard_index_encod": [13, 25, 403, 412], "preshift_bit": [13, 25, 403, 412], "shard_bit": [13, 25, 403, 412], "15": [13, 19, 79, 105, 403, 411, 412], "34432": [13, 403, 412], "39552": [13, 403, 412], "51508": 13, "2048": 13, "shard_data_encod": 13, "34452": 13, "39582": 13, "51548": 13, "littl": [13, 15, 414], "well": [13, 14, 15, 19, 98, 376, 403], "granular": [13, 413], "unchunk": 13, "up": [13, 19, 21, 413], "along": [13, 252, 258, 269, 297, 313, 403, 410, 413], "satisfi": [13, 324, 411], "due": [13, 20, 25, 213], "512": 13, "81": 13, "codecspec": [13, 26, 58, 59, 60, 245, 252, 256, 269, 271, 281, 297, 299, 312, 403], "read_chunk_el": [13, 43, 54, 55], "write_chunk_el": [13, 43, 55], "1000000000": [13, 25], "1113": 13, "1264": 13, "632": 13, "read_chunk_shap": [13, 43, 53, 55, 410], "write_chunk_shap": [13, 43, 55, 57], "three": [13, 18, 120, 148, 413], "final": [13, 43, 55], "1nm": [13, 413], "updat": [13, 27, 28, 41, 55, 189, 197, 245, 247, 255, 256, 257, 258, 259, 261, 265, 269, 271, 273, 279, 282, 297, 299, 326, 327, 331, 403], "rewrit": 13, "ineffici": 13, "unless": [13, 21, 25, 348, 411, 413], "care": [13, 403], "taken": [13, 14, 53, 57, 76, 413], "temporari": [13, 19], "therefor": [13, 16], "advis": 13, "kept": [13, 19], "avoid": [13, 15, 109, 120, 148, 403, 411], "excess": 13, "sequenc": [14, 30, 41, 43, 55, 97, 98, 100, 102, 103, 104, 105, 120, 123, 125, 126, 145, 147, 148, 152, 153, 252, 269, 297, 326, 381, 382, 403, 410, 411], "describ": [14, 18, 23, 26, 27, 28], "staic": 14, "deriv": [14, 348, 357], "subsequ": [14, 98, 337, 365, 403, 410, 411], "earlier": [14, 19], "demand": 14, "input_inclusive_min": [14, 18, 98, 102, 103, 104, 108, 145, 148, 152, 154, 157, 158, 159, 160, 161, 162, 163, 173, 274, 275, 276, 277, 289, 295, 297, 298, 299, 302, 303, 304, 305, 310, 320, 331, 333, 378, 403, 411, 412], "output": [14, 19, 26, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 121, 124, 145, 147, 148, 149, 150, 151, 152, 153, 154, 167, 169, 170, 173, 174, 219, 220, 221, 222, 229, 231, 232, 233, 251, 252, 269, 276, 277, 289, 295, 296, 297, 298, 304, 305, 309, 320, 333, 381, 402, 403, 410, 411, 412], "input_dimens": [14, 18, 124, 151, 152, 153, 154, 173, 219, 222, 225, 276, 295, 304, 333, 411, 412], "input_exclusive_max": [14, 18, 98, 108, 145, 148, 152, 154, 157, 158, 159, 173, 274, 275, 276, 277, 289, 295, 297, 298, 299, 302, 303, 304, 305, 310, 320, 331, 333, 378, 403, 411, 412], "propag": [14, 89, 94, 131, 137], "caus": [14, 15, 411], "incompat": [14, 53, 57, 252, 269, 297, 403, 410], "effect": [14, 18, 98, 120, 148, 197, 214, 271, 280, 281, 283, 284, 286, 292, 297, 331, 340, 343, 411], "hull": [14, 73, 89, 119, 131], "unbound": [14, 18, 26, 53, 57, 73, 80, 86, 87, 92, 93, 96, 125, 152, 197, 297, 396], "omit": [14, 403, 411], "unit": [14, 26, 245, 252, 258, 269, 271, 283, 297, 299, 313, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 403, 410], "unset": 14, "long": 14, "scheama": 14, "fill_valu": [14, 15, 245, 247, 252, 261, 269, 271, 286, 297, 299, 304, 305, 316, 320, 328, 331, 333, 403, 413], "codec": [14, 27, 28, 43, 45, 55, 245, 252, 256, 269, 271, 281, 292, 297, 299, 312, 328, 403], "numpi": [15, 18, 26, 97, 98, 101, 102, 107, 119, 136, 145, 150, 167, 174, 245, 250, 251, 263, 270, 271, 276, 277, 289, 298, 299, 301, 304, 308, 320, 321, 333, 334, 376, 377, 379, 380, 381, 385, 387, 390, 393, 394, 395, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 412], "model": 15, "field": [15, 89, 94, 413], "pack": 15, "togeth": 15, "fulli": [15, 17, 18, 145, 197, 214, 297, 331, 337, 403], "zarrai": [15, 403], "zarr_format": [15, 299, 304, 305, 320, 331, 333, 403], "extens": [15, 19, 98, 376], "bfloat16": [15, 26, 376, 414], "f": [15, 108, 299, 324, 337, 403, 410], "disabl": [15, 16], "filter": [15, 256, 299, 304, 305, 312, 320, 328, 331, 333, 403, 413], "dimension_separ": [15, 299, 304, 305, 320, 331, 333, 403], "nesteddirectorystor": 15, "metadata_kei": 15, "By": [15, 18, 19, 176, 211, 331, 403, 410], "rare": [15, 411], "problem": [15, 21, 22], "dot": 15, "awar": [15, 411], "break": 15, "key_encod": 15, "deprec": [15, 411], "i2": 15, "bz2": 15, "u2": [15, 284, 292], "f4": [15, 286, 403], "aqacaamabaafaayaaaagqqaameeaaebbaabqqqaaye": 15, "10": [15, 18, 19, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 84, 86, 87, 88, 92, 93, 98, 103, 104, 105, 120, 127, 136, 148, 173, 249, 250, 263, 270, 275, 276, 289, 298, 299, 301, 303, 304, 306, 307, 308, 320, 321, 324, 333, 334, 337, 403, 411], "11": [15, 19, 78, 86, 98, 121, 154, 221, 222, 411], "12": [15, 18, 98, 103, 104, 121, 324, 411], "13": [15, 104, 121, 173, 222], "14": [15, 19, 105, 124], "b1": 15, "u1": 15, "i1": 15, "i4": [15, 403], "u8": 15, "i8": 15, "float16": [15, 26, 393, 414], "f2": 15, "f8": 15, "complex64": [15, 26, 380, 414], "c8": 15, "complex128": [15, 26, 379, 414], "c16": 15, "standard": [15, 19], "On": [15, 16, 19, 21, 120, 148], "platform": [15, 19], "offici": 15, "librari": [15, 17, 136, 145, 411], "capabl": [15, 411], "been": [15, 18, 108, 112, 113, 252, 269, 287, 297, 314, 337, 338, 340, 341, 343, 346, 347, 403, 410], "regist": [15, 108, 110, 116], "tensorflow": [15, 376], "jax": [15, 376], "datetim": 15, "timedelta": 15, "subarrai": 15, "persist": [15, 299, 326, 338], "extent": [15, 18, 143, 204, 207, 209, 218, 413], "inner": [15, 48, 49, 73, 74], "latter": 15, "broadcast": [15, 98, 107, 174, 248, 252, 269, 270, 274, 297, 298, 302, 306, 308, 309, 316, 321, 333, 334, 337, 403, 411, 413], "optim": [15, 19], "written": [15, 19, 26, 252, 269, 297, 299, 316, 337, 403, 410, 412], "runtim": [16, 19, 21, 22], "behavior": [16, 18, 19, 24, 98, 120, 148, 213, 324, 337, 411], "libcurl": 16, "make": [16, 19, 413], "secur": [16, 21, 22], "connect": [16, 17, 21, 22], "server": [16, 21, 22], "m": [16, 18, 19, 413], "window": [16, 19, 20], "mac": 16, "facil": 16, "system": [16, 19, 21, 22, 23, 337], "linux": [16, 19], "bsd": 16, "built": [16, 19, 376, 411], "bundl": [16, 19], "expect": [16, 19, 118, 258, 411], "find": [16, 19], "author": [16, 21, 22], "pem": 16, "ssl": [16, 19, 21, 22], "cert": [16, 21, 22], "crt": [16, 21, 22], "locat": [16, 21, 22, 328, 403], "distribut": [16, 19, 403], "altern": [16, 337, 411], "directori": [16, 19, 20, 21, 22, 23, 24, 25], "tensorstore_ca_bundl": 16, "tensorstore_ca_path": 16, "concaten": 16, "mani": [16, 18, 21, 22, 98, 145, 403, 411], "document": [16, 23, 413, 414], "detail": [16, 17, 21, 22], "prepar": 16, "openssl": 16, "c_rehash": 16, "command": [16, 19], "tensoprstor": 16, "dynam": 16, "link": [16, 19, 241, 242, 243, 244], "tensorstore_system_lib": [16, 19], "se_curl": [16, 19], "depend": [16, 21, 22, 98, 324, 326, 337, 411, 414], "how": [16, 21, 22, 413], "like": [16, 17, 19, 21, 22, 121, 124, 258, 403, 411], "all_proxi": 16, "http_proxi": 16, "preced": [16, 43, 55, 252, 269, 297, 403, 410, 413], "https_proxi": 16, "no_proxi": 16, "comma": [16, 19], "hostnam": 16, "ip": 16, "address": 16, "tensorstore_curl_verbos": 16, "verbos": [16, 411], "inform": [16, 19, 21, 22, 403], "print": [16, 77, 78, 79, 80, 84, 108, 256, 258, 259, 260, 261, 265, 285, 288, 291, 296, 410], "stderr": 16, "sslkeylogfil": 16, "decrypt": 16, "traffic": 16, "save": 16, "wireshark": 16, "google_application_credenti": [16, 21], "section": [16, 17, 21, 22], "tensorstore_gcs_http_url": [16, 21], "googleapi": 16, "com": [16, 19, 21, 22], "oauth2": 16, "trust": 16, "tensorstore_gcs_request_concurr": [16, 21], "gcs_request_concurr": [16, 21, 403, 412], "larg": [17, 210, 301], "multi": [17, 19, 24, 26, 299], "googl": [17, 19, 21, 337, 412], "cloud": [17, 21, 23, 337, 403, 412], "network": [17, 20, 21, 22], "transact": [17, 24, 25, 26, 204, 207, 209, 210, 211, 213, 215, 217, 218, 306, 307, 308, 309, 317, 321, 324, 332, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 365, 403], "strong": 17, "isol": [17, 338], "durabl": [17, 204, 207, 209, 218, 337, 365], "acid": 17, "safe": [17, 20, 21, 337, 403], "machin": [17, 20, 21, 403], "optimist": 17, "high": [17, 403], "advantag": [17, 337], "satur": 17, "bandwidth": 17, "asynchron": [17, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 241, 299, 306, 307, 308, 309, 321, 324, 334, 337, 338, 343, 365, 412], "throughput": 17, "latenc": [17, 337, 403], "advanc": [17, 26, 97, 411], "tutori": 17, "guid": 17, "setup": [17, 19], "instruct": 17, "build": 17, "instal": [17, 21], "abstract": [17, 26, 118, 145, 175], "interfac": [17, 25, 176, 241, 306, 307, 308, 309, 321, 334, 365], "done": [17, 19, 21, 102, 108, 109, 113, 241, 243, 244, 252, 269, 297, 365, 371, 403, 411], "analog": 17, "url": [17, 19, 20, 21, 22, 23, 24, 176, 189, 191, 198, 211, 216], "databas": 17, "introduc": 17, "through": [17, 18, 21, 23, 145], "express": [17, 26, 73, 83, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 119, 121, 136, 145, 149, 245, 249, 271, 275, 299, 303, 307, 381, 402], "chunk": [17, 25, 26, 28, 29, 30, 32, 33, 34, 35, 38, 39, 41, 42, 43, 45, 48, 52, 53, 55, 56, 57, 245, 252, 255, 269, 271, 280, 292, 297, 299, 304, 305, 311, 320, 326, 331, 333, 337, 403, 410], "layout": [17, 26, 27, 28, 42, 43, 50, 51, 53, 54, 55, 57, 245, 252, 255, 269, 271, 280, 297, 299, 311, 324, 403, 410], "fill": [17, 106, 245, 252, 261, 269, 271, 286, 297, 299, 316, 326, 403, 412, 413], "queri": [17, 22, 108, 112, 113], "n": [18, 26, 98, 119, 411], "close": [18, 73, 78], "62": [18, 26, 73, 396], "pm": 18, "infti": 18, "reserv": 18, "sign": [18, 26, 397, 398, 399, 400, 414], "less": [18, 252, 258, 269, 297, 313, 348, 352, 403, 410, 411, 413], "impos": [18, 348, 413], "uniqu": [18, 68, 410], "inclus": [18, 73, 77, 78, 79, 92, 93, 119, 125, 134, 135, 140, 145, 152, 160, 161, 163, 168, 177, 179, 183, 245, 264, 271, 290, 299, 322, 326, 411], "below": [18, 19, 87, 93, 96, 411], "abov": [18, 86, 92, 96, 98, 411], "mark": [18, 73, 111, 241, 243, 244, 411], "certain": [18, 23], "chang": [18, 19, 97, 100, 213, 271, 297, 326, 338, 381, 411], "unknown": [18, 252, 258, 269, 297, 312, 313, 316, 403, 410, 413], "infinit": [18, 73, 136, 252, 269, 297, 403, 410, 413], "similar": [18, 101, 102, 107, 167, 174, 263, 270, 289, 298, 320, 321, 333, 334, 411], "finit": [18, 73, 80, 81, 88, 96, 136, 252, 269, 297, 403, 410, 413], "out": [18, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 148, 149, 150, 151, 152, 153, 154, 167, 174, 296, 326, 402, 411], "serial": 18, "shape": [18, 27, 28, 30, 32, 33, 38, 39, 41, 43, 53, 55, 57, 119, 125, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 152, 165, 171, 245, 248, 249, 250, 251, 252, 259, 263, 266, 269, 270, 271, 284, 292, 293, 297, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 321, 324, 326, 328, 329, 331, 333, 334, 337, 403, 410, 411, 413], "receiv": [18, 21, 22, 114, 117], "At": [18, 125, 152, 411], "inclusive_max": [18, 73, 76, 78, 86, 87, 91, 92, 93, 96, 119, 125, 134, 160, 396], "none": [18, 21, 22, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 46, 47, 48, 49, 53, 54, 55, 57, 61, 68, 69, 70, 73, 77, 78, 79, 80, 98, 102, 103, 104, 105, 108, 109, 110, 114, 115, 116, 117, 119, 125, 136, 145, 152, 153, 176, 189, 197, 204, 207, 209, 210, 211, 213, 214, 215, 217, 218, 219, 223, 224, 225, 228, 241, 243, 244, 245, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 262, 263, 265, 269, 270, 271, 274, 275, 276, 277, 281, 283, 284, 285, 286, 287, 288, 289, 291, 296, 297, 298, 299, 301, 304, 305, 306, 307, 308, 309, 312, 313, 316, 317, 320, 326, 328, 331, 332, 333, 335, 338, 340, 343, 345, 346, 365, 366, 369, 370, 372, 373, 374, 375, 402, 403, 410, 411], "leq": 18, "exclus": [18, 73, 77, 86, 87, 119, 125, 130, 145, 152, 159, 177, 179, 182, 326, 411], "7": [18, 19, 53, 57, 96, 98, 103, 120, 121, 124, 127, 134, 136, 148, 150, 152, 153, 154, 160, 167, 173, 174, 221, 222, 263, 270, 289, 298, 320, 326, 333, 355, 411], "occur": [18, 108, 204, 205, 207, 411], "onc": [18, 26, 123, 218, 326, 337, 338, 347, 365, 410], "vector": [18, 97, 98, 107, 119, 125, 145, 147, 152, 174, 245, 270, 271, 298, 299, 333, 334, 381], "its": [18, 19, 20, 61, 64, 65, 69, 119, 127, 145, 154, 213, 245, 253, 348, 351, 411, 413], "j": [18, 120, 148], "form": [18, 67, 305, 411], "mathtt": 18, "cdot": 18, "_dimens": 18, "_arrai": 18, "composit": 18, "complet": [18, 108, 110, 111, 113, 114, 117, 204, 205, 207, 209, 213, 218, 241, 243, 244, 306, 307, 308, 309, 321, 324, 326, 334, 337, 365, 411, 412], "suffic": 18, "low": [18, 25], "cost": 18, "need": [18, 19, 98, 145, 348, 411, 413], "larger": [18, 412], "tabl": [18, 24], "relationship": 18, "sourc": [18, 19, 299, 306, 307, 308, 309, 321, 334, 337, 365, 375], "target": [18, 19, 28, 30, 34, 35, 41, 43, 55, 97, 106, 381, 411, 413], "input_rank": [18, 98, 124, 145, 147, 148, 149, 151, 152, 157, 158, 164, 166, 220, 222, 251, 277, 305, 402, 411], "input_inclusive_max": [18, 102, 145, 152, 160], "input_shap": [18, 99, 103, 104, 105, 106, 145, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 173, 221, 251, 274, 275, 276, 277, 289, 298, 305, 309, 411], "input_label": [18, 98, 99, 101, 102, 103, 104, 105, 106, 107, 145, 148, 152, 154, 156, 162, 164, 166, 170, 173, 274, 275, 302, 303, 403, 411, 412], "outputindexmap": [18, 26, 124, 145, 151, 152, 153, 169, 170, 173, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 251, 277, 305, 309], "logic": [18, 119, 337, 414], "index_arrai": [18, 154, 173, 219, 221, 223, 251, 276, 277, 289, 298, 304, 305, 309, 320, 333], "conjunct": [18, 297, 331, 403, 413], "index_array_bound": [18, 154], "indexinterv": 18, "inf": [18, 26, 53, 57, 73, 77, 78, 80, 84, 86, 87, 92, 93, 98, 99, 100, 101, 105, 107, 124, 125, 127, 149, 150, 151, 152, 154, 167, 174, 185, 201, 213, 396, 402, 410, 411], "immedi": [18, 109, 118, 411], "correctli": 18, "trip": 18, "manual": [18, 19], "involv": [18, 411], "permut": [18, 27, 43, 48, 49, 55, 413], "rule": [18, 19], "m1": 18, "last": [18, 98, 112, 122, 123, 204, 205, 207, 213, 243, 251, 411], "_rank": 18, "m2": 18, "unmatch": 18, "right": [18, 21, 22, 120, 148], "v1": [18, 403, 412], "_shape": 18, "neq": 18, "drop": [18, 337], "step": [18, 19, 98, 337, 411], "v3": 18, "v2": 18, "v4": 18, "_origin": 18, "succe": 18, "a1": 18, "single_input_dimens": [18, 233, 239], "a2": 18, "rightarrow": 18, "mathrm": [18, 25], "mismatch": 18, "w": [18, 318], "addition": [18, 19, 73, 197, 211, 258, 297, 338, 410, 411], "There": [19, 401, 404, 409, 412, 414], "sever": [19, 108], "intend": [19, 21, 23, 24, 25], "later": [19, 20, 403], "bind": [19, 197, 211, 214, 297, 331, 410], "pip": 19, "environ": [19, 21, 22], "latest": 19, "vv": 19, "show": 19, "progress": 19, "python3": 19, "py": [19, 119, 126, 150, 326], "simplest": 19, "aren": 19, "code": 19, "pre": 19, "binari": 19, "your": 19, "tool": 19, "simultan": [19, 403], "git": 19, "repositori": 19, "clone": 19, "http": [19, 21, 23], "github": 19, "cd": 19, "invok": [19, 108, 110], "modul": [19, 410], "re": [19, 25, 176, 197, 214, 297, 299, 331, 403, 410], "rebuild": 19, "increment": [19, 252, 258, 269, 297, 313, 403, 410, 413], "much": 19, "faster": 19, "work": [19, 21, 22], "tree": 19, "prevent": 19, "affect": [19, 97, 103, 104, 105, 121, 124, 255, 326, 337, 381, 410, 411, 413], "variabl": [19, 21, 22, 26, 404, 409], "tensorstore_bazelisk": 19, "bazelisk": 19, "script": 19, "pass": [19, 26, 360, 363], "bazelisk_hom": 19, "download": 19, "tensorstore_bazel_compilation_mod": 19, "compil": 19, "opt": 19, "tensorstore_bazel_startup_opt": 19, "startup": 19, "space": [19, 26, 27, 51, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 119, 141, 145, 148, 149, 150, 151, 152, 153, 154, 164, 166, 167, 170, 174, 252, 269, 296, 297, 402, 403, 410, 411, 413], "charact": [19, 22, 414], "posix": [19, 20], "escap": 19, "shlex": 19, "split": 19, "output_user_root": 19, "bazel_cach": 19, "tensorstore_bazel_build_opt": 19, "archflag": 19, "maco": 19, "architectur": 19, "cross": 19, "arch": 19, "x86_64": 19, "arm64": 19, "universal2": 19, "macosx_deployment_target": 19, "tensorstore_prebuilt_dir": 19, "invoc": [19, 411], "build_ext": 19, "tmp": [19, 20, 190, 191, 192, 193, 194, 195, 196, 206, 208, 338, 412], "prebuilt": 19, "wheel": 19, "sdist": 19, "bdist_wheel": 19, "dist": 19, "project": [19, 21], "ad": [19, 21, 99, 100, 101, 102, 103, 104, 105, 106, 107, 174, 270, 298, 333, 334], "so": [19, 412], "static": [19, 176, 211, 241, 242], "part": [19, 27, 43, 245, 252, 258, 381], "overal": 19, "add": [19, 27, 28, 41, 55, 98, 245, 269, 271, 297, 411], "workspac": 19, "load": 19, "bazel_tool": 19, "build_def": 19, "repo": 19, "bzl": 19, "http_archiv": 19, "util": 19, "mayb": 19, "com_google_tensorstor": 19, "strip_prefix": 19, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx": 19, "archiv": 19, "tar": 19, "gz": 19, "sha256": 19, "yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyi": 19, "17": [19, 103, 127, 154], "flag": [19, 89, 94, 131, 137], "bazelrc": 19, "toolchain": 19, "fetchcont": 19, "fetchcontent_declar": 19, "url_hash": 19, "call": [19, 21, 68, 98, 108, 109, 112, 115, 123, 204, 205, 207, 213, 243, 251, 255, 304, 324, 337, 340, 343, 410, 411], "fetchcontent_makeavail": 19, "target_link_librari": 19, "my_target": 19, "privat": 19, "all_driv": 19, "ninja": 19, "config": [19, 21], "makefil": 19, "visual": 19, "studio": 19, "xcode": 19, "pull": 19, "basi": 19, "tensorstore_use_system_": 19, "line": [19, 22], "dtensorstore_use_system_": 19, "ON": 19, "vendor": 19, "symbol": 19, "collis": 19, "crash": [19, 337], "incorrect": 19, "exampl": [19, 191, 211, 338, 410, 412], "dtensorstore_use_system_curl": 19, "curl": [19, 21, 22], "dtensorstore_use_system_zlib": 19, "ensur": [19, 108, 115, 190, 258, 337, 338, 403, 411], "safest": 19, "often": [19, 21, 337], "help": [19, 25], "sccach": 19, "dcmake_": 19, "cxx": 19, "_compiler_launch": 19, "ccach": 19, "doc": [19, 21], "build_doc": 19, "gcc": 19, "clang": 19, "microsoft": 19, "2019": 19, "16": [19, 26, 104, 397, 405, 414], "msvc": 19, "29": 19, "30037": 19, "cl": 19, "appl": 19, "bug": 19, "relat": [19, 21, 22, 404, 409], "align": [19, 120, 148, 248, 274, 302, 306, 334, 337, 413], "don": 19, "org": 19, "tl": 19, "certif": 19, "applic": [19, 21, 312, 316, 326, 410, 413], "readm": 19, "rtf": 19, "fetch": 19, "effort": 19, "reduc": [19, 305, 326], "date": [19, 22], "com_google_boringssl": 19, "boringssl": 19, "098695591f3a": 19, "com_google_brotli": 19, "brotli": 19, "6d03dfbedda1": 19, "org_sourceware_bzip2": 19, "com_github_cares_car": 19, "6654436a307a": 19, "org_blosc_cblosc": 19, "21": [19, 411], "net_zlib": 19, "chromium": 19, "2d44c51ada6d325b85b53427b02dabf44648bca4": 19, "86": 19, "org_aomedia_avif": 19, "libavif": 19, "88d98ec7a85d": 19, "libjpeg": 19, "turbo": 19, "libpng": 19, "37": 19, "libwebp": 19, "org_lz4": 19, "nasm": 19, "05": 19, "org_nghttp2": 19, "nghttp2": 19, "50": [19, 314, 410], "com_github_nlohmann_json": 19, "nlohmann": 19, "com_github_pybind_pybind11": 19, "pybind11": 19, "com_google_snappi": 19, "984b191f0fef": 19, "libtiff": 19, "org_tukaani_xz": 19, "3alpha": 19, "net_zstd": 19, "export": 19, "24": 19, "perl": 19, "libaom": 19, "Not": 19, "dtensorstore_use_system_libaom": 19, "dav1d": 19, "gnu": 19, "patch": 19, "root": 20, "content": [20, 26, 403, 410], "lock": 20, "protocol": [20, 411], "reader": [20, 338], "scheme": [20, 21, 22, 23, 24], "wide": 20, "user": 20, "abc": [20, 30, 41, 43, 55, 97, 100, 102, 103, 104, 105, 110, 116, 119, 125, 126, 145, 147, 152, 153, 190, 193, 194, 196, 197, 208, 211, 214, 252, 269, 287, 297, 317, 326, 366, 373, 381, 403, 410], "rs1": 20, "relianc": 20, "semant": [20, 97, 98, 101, 107, 145, 150, 167, 174, 245, 250, 263, 270, 271, 276, 289, 298, 299, 304, 308, 320, 321, 333, 334, 381, 411], "condit": [21, 120, 148, 213, 218, 363, 364], "account": [21, 53, 57, 76, 413], "appropri": [21, 410], "permiss": 21, "requestor": 21, "pai": 21, "bill": 21, "gcs_user_project": [21, 403, 412], "prefix": [21, 23, 24, 25, 176, 189, 195, 212, 411], "style": [21, 23, 24, 25, 97, 98, 101, 102, 107, 136, 145, 150, 167, 174, 245, 250, 251, 263, 270, 271, 276, 277, 289, 298, 299, 304, 308, 320, 321, 333, 334, 381], "end": [21, 22, 23, 24, 25, 106, 136, 411], "gcs_request_retri": [21, 403, 412], "request": [21, 22, 108, 111, 213, 326, 360, 361, 403, 410], "project_id": 21, "own": 21, "retri": [21, 22], "handl": [21, 22, 26, 61, 62, 67, 108, 233, 235, 241, 299, 365, 410], "transient": [21, 22, 24], "exponenti": 21, "delai": [21, 22], "consecut": [21, 98, 411], "max_retri": [21, 22], "initial_delai": [21, 22], "backoff": [21, 22], "max_delai": [21, 22], "experimental_gcs_rate_limit": 21, "rate": [21, 413], "read_rat": 21, "issu": [21, 337], "see": 21, "ramp": 21, "write_r": 21, "doubling_tim": 21, "2x": 21, "gsutil": 21, "public": [21, 412], "allus": 21, "servic": 21, "sdk": 21, "run": [21, 109, 114, 117, 410], "gcloud": 21, "auth": 21, "login": 21, "application_default_credenti": 21, "cloudsdk_config": 21, "develop": 21, "engin": 21, "gce": 21, "retriev": [21, 61, 67, 412], "77": [21, 22], "verifi": [21, 22], "cafil": [21, 22], "capath": [21, 22], "fake": 21, "localhost": 21, "4443": 21, "base_url": 22, "fragment": 22, "percent": 22, "8000": 22, "begin": [22, 98, 108, 115, 411], "treat": [22, 109, 213, 411, 413], "absolut": 22, "interpret": [22, 136, 184, 187, 348, 411, 413, 414], "append": [22, 189, 190, 204, 205, 207, 213, 218], "unlik": [22, 98, 108, 411], "restrict": [22, 210], "treatment": 22, "slightli": 22, "web": 22, "browser": 22, "20data": 22, "send": 22, "insensit": 22, "sensit": 22, "7230": 22, "obsolet": 22, "fold": 22, "crlf": 22, "sp": 22, "htab": 22, "bearer": 22, "xxxxx": 22, "http_request_concurr": 22, "http_request_retri": 22, "regular": [22, 27, 28, 337, 338, 411, 413], "8080": 22, "20base": 22, "stale": 22, "respons": 22, "control": [22, 337], "etag": 22, "varieti": 23, "concis": 23, "exclud": 23, "pair": [24, 241, 242, 348, 353], "manipul": 24, "test": [24, 108], "memory_key_value_stor": [24, 197, 214, 279, 299, 302, 303, 304, 305, 317, 320, 331, 333, 403], "purpos": [24, 121, 410, 411], "custom": 24, "shard": [25, 403, 412, 413], "minishard": 25, "contribut": 25, "murmurhash3_x86_128": 25, "_bit": 25, "good": 25, "choic": 25, "1gb": 25, "strongli": 25, "signific": [25, 337], "amplif": [25, 413], "repeatedli": 25, "class": [26, 28, 58, 62, 64, 73, 97, 108, 118, 119, 126, 145, 175, 177, 184, 189, 199, 219, 229, 233, 241, 245, 271, 299, 338, 348, 360, 363, 365, 381, 385, 411], "manag": [26, 61, 338], "stage": [26, 338], "modif": [26, 338], "commit": [26, 204, 207, 209, 213, 218, 324, 337, 338, 343, 344, 345, 346, 347, 365, 369, 410], "abort": [26, 213, 338, 340, 341, 343, 345, 346, 347], "futur": [26, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 176, 209, 210, 211, 213, 218, 241, 242, 243, 244, 299, 324, 326, 327, 337, 338, 343, 346, 365, 366, 369, 370, 373, 403, 412], "int": [26, 27, 28, 30, 34, 35, 36, 37, 38, 39, 41, 43, 46, 47, 48, 49, 50, 51, 55, 73, 75, 77, 78, 79, 82, 86, 87, 92, 93, 96, 102, 103, 104, 105, 108, 116, 119, 122, 125, 128, 130, 134, 135, 139, 140, 141, 142, 143, 145, 147, 152, 159, 160, 161, 163, 164, 165, 166, 168, 170, 171, 172, 210, 219, 220, 221, 222, 225, 227, 228, 229, 230, 231, 232, 233, 234, 240, 245, 252, 262, 264, 265, 266, 267, 269, 271, 288, 290, 291, 293, 294, 297, 299, 319, 322, 323, 326, 329, 330, 365, 373, 383, 384, 396, 403, 410, 411], "4611686018427387903": [26, 92, 93, 396], "dim": [26, 53, 57, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 119, 120, 122, 126, 148, 152, 173, 219, 221, 224, 396], "d": [26, 73, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 120, 121, 146, 147, 148, 149, 246, 249, 272, 275, 295, 296, 300, 303, 307, 381, 382, 396, 411, 412], "outputindexmethod": [26, 219, 226, 229, 233, 234, 235, 236, 237, 238, 239, 240], "dimexpress": [26, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 119, 121, 145, 149, 245, 249, 271, 275, 299, 303, 307, 381, 411], "newaxi": [26, 98, 99, 402, 411], "alia": [26, 27, 28, 36, 50, 119, 135, 139, 145, 157, 158, 159, 160, 161, 162, 163, 165, 166, 245, 262, 271, 288, 299, 319, 402], "singleton": [26, 99, 402], "quantiti": [26, 252, 258, 269, 297, 313, 348, 352, 403, 410, 413], "arraylik": [26, 98, 219, 221, 223, 245, 252, 261, 269, 271, 286, 297, 299, 301, 306, 307, 308, 309, 316, 321, 324, 334, 337, 375, 403, 410], "virtualchunkedreadparamet": [26, 360, 361, 362, 410], "callback": [26, 110, 116, 360, 363, 365, 366, 373, 410], "virtual_chunk": [26, 360, 363, 410], "virtualchunkedwriteparamet": [26, 363, 364, 410], "bool_": [26, 377], "complement": [26, 397, 398, 399, 400, 414], "unsign": [26, 405, 406, 407, 408, 414], "ieee": [26, 393, 394, 395, 414], "754": [26, 393, 394, 395, 414], "binary16": [26, 393, 414], "precis": [26, 43, 55, 337, 348, 393, 394, 395, 401, 404, 409, 413, 414], "float": [26, 28, 30, 32, 33, 41, 43, 55, 108, 114, 117, 199, 201, 203, 213, 348, 350, 352, 353, 355, 356, 358, 360, 362, 365, 372, 374, 376, 393, 394, 395, 410, 413, 414], "point": [26, 337, 338, 348, 376, 393, 394, 395, 413, 414], "binary32": [26, 394, 414], "binary64": [26, 395, 414], "doubl": [26, 348, 395, 413, 414], "ustr": [26, 409, 414], "unicod": [26, 409, 414], "str": [26, 61, 67, 73, 77, 78, 79, 80, 83, 84, 95, 97, 100, 119, 122, 125, 129, 138, 145, 152, 155, 162, 176, 177, 179, 182, 183, 185, 189, 190, 192, 193, 195, 198, 199, 201, 204, 205, 206, 207, 212, 213, 216, 218, 233, 235, 238, 245, 252, 254, 269, 271, 279, 297, 299, 318, 348, 350, 353, 354, 357, 381, 385, 388, 389, 391, 403, 409, 410, 411], "consum": [26, 98, 108, 210, 365, 411], "promis": [26, 108, 112, 241, 242, 243, 244], "produc": [26, 108, 114, 117, 241, 411], "writefutur": [26, 108, 299, 337, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "futurelik": [26, 108, 109, 118, 410], "construct": [27, 28, 30, 31, 43, 44, 58, 59, 61, 68, 69, 70, 72, 73, 77, 78, 79, 80, 119, 125, 126, 127, 145, 152, 153, 154, 177, 179, 184, 185, 189, 191, 199, 201, 219, 220, 221, 222, 245, 252, 253, 271, 278, 348, 350, 351, 352, 353, 354, 381, 382, 385, 386, 387, 388], "to_json": [27, 28, 40, 54, 58, 60, 62, 63, 64, 66, 71, 119, 144, 145, 173, 189, 196, 245, 268, 271, 295, 348, 359, 385, 391], "ndim": [27, 28, 36, 50, 119, 139, 145, 166, 245, 262, 271, 288, 299, 319], "tupl": [27, 28, 32, 33, 38, 39, 46, 47, 48, 49, 119, 130, 132, 133, 134, 135, 136, 138, 140, 142, 145, 147, 157, 158, 159, 160, 161, 162, 163, 165, 168, 171, 241, 242, 245, 252, 258, 264, 266, 269, 271, 283, 290, 293, 297, 299, 313, 322, 329, 348, 353, 403, 410, 411], "innermost": [27, 43, 48, 55, 413], "inner_order_soft_constraint": [27, 43, 48, 49, 55, 413], "grid_origin_soft_constraint": [27, 43, 47, 53, 55, 57, 413], "write_chunk_templ": [27, 53, 57], "read_chunk_templ": [27, 53, 57], "__eq__": [27, 28, 29, 42, 73, 76, 177, 178, 199, 200, 245, 247, 271, 273, 348, 349], "compar": [27, 28, 29, 42, 73, 76, 177, 178, 199, 200, 245, 247, 271, 273, 348, 349], "include_default": [28, 40, 58, 60, 62, 63, 64, 66, 189, 196, 245, 268, 271, 295], "shape_soft_constraint": [28, 30, 39, 41, 43, 54, 55, 413], "aspect": [28, 30, 32, 33, 41, 43, 55, 413], "ratio": [28, 30, 32, 33, 41, 43, 55, 413], "aspect_ratio_soft_constraint": [28, 30, 33, 41, 43, 55, 413], "elements_soft_constraint": [28, 30, 35, 41, 43, 55, 413], "self": [29, 40, 41, 42, 53, 54, 55, 57, 60, 63, 66, 67, 74, 75, 76, 81, 82, 83, 84, 86, 87, 89, 92, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 128, 129, 131, 137, 144, 146, 147, 148, 149, 150, 151, 155, 167, 168, 171, 172, 173, 174, 178, 180, 190, 192, 193, 194, 196, 197, 200, 204, 205, 206, 207, 208, 209, 210, 213, 214, 217, 218, 230, 231, 233, 235, 243, 244, 246, 247, 248, 249, 250, 251, 254, 257, 263, 264, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 279, 282, 289, 290, 293, 294, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 316, 320, 321, 322, 323, 324, 326, 327, 329, 330, 331, 333, 334, 335, 337, 340, 343, 345, 349, 355, 356, 359, 366, 367, 368, 371, 372, 373, 374, 386, 391], "collect": [30, 41, 43, 55, 97, 100, 102, 103, 104, 105, 110, 116, 119, 125, 126, 145, 147, 152, 153, 252, 269, 297, 326, 366, 373, 381, 403, 410], "grid_soft_constraint": [30, 41], "merg": [30, 41, 252, 269, 297, 403, 410, 413], "retain": [30, 41, 106, 214, 331, 411, 413], "chunk_shape_soft_constraint": [43, 55], "write_chunk_shape_soft_constraint": [43, 54, 55], "read_chunk_shape_soft_constraint": [43, 55], "codec_chunk_shap": [43, 55], "codec_chunk_shape_soft_constraint": [43, 55], "chunk_aspect_ratio_soft_constraint": [43, 55], "write_chunk_aspect_ratio": [43, 55], "write_chunk_aspect_ratio_soft_constraint": [43, 55], "read_chunk_aspect_ratio": [43, 55], "read_chunk_aspect_ratio_soft_constraint": [43, 55], "codec_chunk_aspect_ratio": [43, 55], "codec_chunk_aspect_ratio_soft_constraint": [43, 55], "chunk_elements_soft_constraint": [43, 55], "write_chunk_elements_soft_constraint": [43, 55], "read_chunk_elements_soft_constraint": [43, 55], "codec_chunk_el": [43, 55], "codec_chunk_elements_soft_constraint": [43, 55], "row": [43, 48, 55, 324, 413], "major": [43, 48, 55, 324, 413], "column": [43, 48, 55, 324, 413], "prefer": [43, 55, 413], "rather": [43, 48, 49, 55, 98, 411, 413], "clear": [43, 55], "105": [53, 57, 295, 296, 410], "206": [53, 57], "307": [53, 57], "207": [53, 57], "rais": [53, 57, 81, 100, 102, 103, 104, 105, 108, 114, 117, 123, 136, 204, 205, 207, 210, 213, 248, 249, 250, 251, 252, 263, 269, 270, 274, 275, 276, 277, 289, 297, 298, 338, 345, 403, 410], "valueerror": [53, 57, 81, 123, 136, 210, 248, 249, 250, 251, 263, 270, 274, 275, 276, 277, 289, 298], "1000000": 54, "framework": 61, "pars": [61, 64, 70, 176, 189, 354, 413], "inherit": [61, 69, 70, 71], "__getitem__": [61, 67, 97, 98, 101, 107, 119, 120, 121, 122, 123, 124, 145, 148, 149, 150, 151, 167, 174, 176, 204, 205, 207, 213, 229, 230, 245, 248, 249, 250, 251, 263, 270, 271, 274, 275, 276, 277, 289, 298, 299, 302, 303, 304, 305, 307, 320, 333, 381], "whether": [66, 77, 78, 79, 80, 98, 108, 112, 113, 119, 125, 132, 133, 145, 152, 157, 158, 331, 338, 341, 342, 344, 347, 411], "primarili": [67, 73, 121, 124], "introspect": 67, "constructor": 68, "5000000": [69, 71, 72], "child": [71, 72], "assert": [71, 109, 247, 273, 396], "associ": [73, 109, 184, 186, 188, 205, 213, 218, 271, 287, 297, 299, 317, 332, 343, 403], "implicit_low": [73, 76, 77, 78, 79, 80, 90], "intersect": [73, 94, 99, 119, 137], "exclusive_min": [73, 87, 93], "implicit_upp": [73, 76, 77, 78, 79, 80, 83, 91], "__len__": [73, 82, 119, 128, 229, 231], "__contains__": [73, 74, 75], "__iter__": [73, 81], "iter": [73, 81], "__str__": [73, 84, 233, 235], "__repr__": [73, 83, 119, 129, 145, 155, 176, 189, 192, 206, 245, 254, 271, 279], "4611686018427387904": [86, 87], "9223372036854775807": 96, "particularli": [96, 410], "meaning": 96, "cannot": [97, 98, 251, 338], "plain": 97, "numpyindexingspec": [97, 98, 101, 107, 145, 150, 167, 174, 245, 250, 263, 270, 271, 276, 289, 298, 299, 304, 308, 320, 321, 333, 334, 381], "oindex": [97, 101, 145, 150, 167, 245, 250, 251, 263, 270, 271, 276, 277, 289, 298, 299, 304, 305, 308, 309, 320, 321, 333, 334, 381], "outer": [97, 101, 145, 167, 245, 263, 271, 289, 299, 320, 321, 381], "vindex": [97, 98, 107, 145, 150, 174, 245, 250, 251, 263, 270, 271, 276, 277, 289, 298, 299, 304, 305, 308, 309, 320, 321, 333, 334, 381], "translate_to": [97, 105, 381], "translate_bi": [97, 98, 100, 104, 121, 147, 149, 295, 296, 381], "shift": [97, 103, 104, 381, 411], "translate_backward_bi": [97, 103, 381], "amount": [97, 102, 210, 381, 411], "transpos": [97, 99, 106, 145, 146, 245, 246, 271, 272, 299, 300, 381], "dimselectionlik": [97, 106, 119, 123, 381, 382], "diagon": [97, 99, 381], "extract": [97, 99, 381, 411], "term": [98, 101, 107, 167, 174, 263, 270, 289, 298, 308, 320, 321, 333, 334, 411], "scalar": [98, 102, 103, 104, 105, 306, 308, 309, 321, 334, 337, 376, 385, 386, 411], "stop": [98, 411], "slice": [98, 102, 119, 120, 136, 145, 148, 411, 412], "dummi": [98, 411], "necessarili": [98, 411, 413], "traceback": [98, 112, 123, 204, 205, 207, 213, 243, 251, 411], "indexerror": [98, 100, 102, 103, 104, 105, 251, 411], "chain": [98, 411], "sole": 98, "coordin": [98, 411], "direct": 98, "nonzero": [98, 411], "gener": [98, 176, 184, 186, 199, 200, 201, 202, 203, 213, 218, 305, 348, 360, 361, 363, 364, 410, 411, 413], "th": [98, 120, 148, 411], "remov": 99, "newli": 99, "simpli": [99, 109, 143, 365, 410, 411], "would": [100, 136, 326], "duplic": [100, 411], "orthogon": [101, 167, 263, 289, 320, 321, 411], "expr": [102, 119, 121, 145, 149, 245, 249, 251, 271, 275, 277, 299, 303, 305, 307, 309, 411], "irrespect": [102, 213], "unchang": [102, 103, 104, 105, 197, 211, 297, 411], "23": 104, "28": 104, "18": 104, "25": 105, "revers": [106, 145, 146, 245, 246, 271, 272, 299, 300], "neg": [106, 122, 136, 411, 413], "reorder": 106, "k": [106, 120, 148], "uncondition": [107, 174, 270, 298, 333, 334, 411], "pattern": 108, "asyncio": [108, 109, 111, 337, 410, 412], "await": [108, 109, 176, 206, 208, 209, 211, 212, 213, 214, 216, 217, 218, 299, 301, 302, 303, 304, 305, 311, 312, 313, 314, 315, 316, 317, 320, 324, 326, 328, 331, 333, 337, 338, 378, 403, 410, 411, 412], "keyword": 108, "synchron": [108, 204, 205, 207, 299, 301, 306, 307, 308, 309, 321, 324, 334, 337, 338, 345, 410, 412], "add_done_callback": [108, 110, 115, 365, 366], "lambda": 108, "forc": [108, 115], "wait": [108, 337, 410, 412], "those": [108, 305], "upon": [108, 110, 411], "remove_done_callback": [108, 116, 365, 373], "unregist": [108, 116], "timeout": [108, 114, 117, 365, 372, 374], "until": [108, 114, 117, 204, 205, 207, 209, 218, 338, 347, 365, 410, 411], "cancel": [108, 111, 112, 113, 337, 365, 367, 368], "loop": [109, 410], "abstracteventloop": [109, 410], "async": [109, 338, 410, 412], "def": [109, 410], "get_valu": 109, "event": [109, 410], "coroutin": [109, 118, 410], "get_running_loop": [109, 410], "resolv": [109, 118, 210, 213, 218, 299, 326, 327, 411], "deadlock": [109, 410], "callabl": [110, 116, 366, 373, 410], "unsuccessfulli": [111, 117, 241, 243], "cancellederror": [111, 112], "deadlin": [114, 117, 372, 374], "successfulli": [114, 241, 244, 337, 346, 365], "timeouterror": [114, 117], "did": [114, 117], "becom": [114, 117, 209, 337, 346], "readi": [114, 117, 209, 337, 346], "keyboardinterrupt": [114, 117], "main": [114, 117], "keyboard": [114, 117], "interrupt": [114, 117], "success": [117, 205, 343, 345], "cartesian": 119, "product": [119, 143], "immut": [119, 348, 410, 411], "implicit_lower_bound": [119, 125, 132, 145, 152, 157, 173, 411], "implicit_upper_bound": [119, 125, 133, 145, 152, 158, 173], "index_exp": [119, 136, 410], "box": [119, 131], "strictli": [120, 148], "discrep": [120, 148], "behav": 121, "consequ": [121, 124, 197, 214, 297, 331], "though": [121, 124, 410], "output_rank": [124, 145, 147, 170, 251, 277, 305, 306, 309], "len": 128, "arr": 136, "np": [136, 301, 326, 410, 412], "actual": [136, 176, 204, 207, 209, 218, 252, 269, 297, 304, 337, 403, 411, 413], "count": 136, "60": [143, 274, 275, 302, 303, 306, 307, 333, 413], "indirectli": [145, 413], "input_origin": [145, 161, 163], "__call__": [145, 147, 385, 386], "obj": [150, 411], "index_rang": [152, 173, 219, 221, 224], "timestampedstoragegener": [176, 184, 185, 186, 199, 200, 201, 202, 203, 211, 213, 218, 410], "readresult": [176, 184, 185, 186, 187, 188, 211, 213, 218], "state": [176, 184, 185, 187, 211, 213, 218], "stamp": [176, 184, 185, 186, 211, 213, 218], "miss": [176, 184, 185, 187, 213, 218, 413], "txn": [176, 217, 308, 337, 338], "with_transact": [176, 211, 217, 299, 308, 335, 337, 338, 403, 410], "commit_sync": [176, 308, 338, 343, 345], "keyrang": [176, 177, 178, 179, 180, 181, 182, 183, 209, 210], "timestamp": [176, 184, 186, 199, 200, 410], "retain_context": [176, 214, 331], "delete_rang": [176, 209], "__setitem__": [176, 204, 205, 207, 213, 218, 299, 306, 307, 308, 309, 321, 334], "__delitem__": [176, 204, 205, 207, 213, 218], "usual": [179, 183, 411], "r": [181, 318], "unbind_context": [189, 197, 214, 297, 331], "__add__": [189, 190], "suffix": [189, 190], "__truediv__": [189, 190, 193, 348, 356], "dataabc": 190, "strip_context": [197, 297, 331], "captur": [197, 214, 297, 331], "graph": [197, 214, 297, 331], "interdepend": [197, 214, 297, 331], "isomorph": [197, 214, 297, 331], "extern": [197, 213, 214, 297, 331, 338], "replac": [197, 297, 411], "won": [197, 211, 297], "entri": [199, 202], "del": 204, "keyerror": [204, 205, 207, 213], "record": [204, 207, 209, 218], "continu": [204, 205, 207], "found": 205, "aa": 209, "cc": 209, "strip_prefix_length": 210, "strip": [210, 354, 413], "if_not_equ": [213, 360, 361, 410], "staleness_bound": [213, 360, 362], "reflect": [213, 304, 314, 324, 337, 365], "made": [213, 338, 410], "fraction": 213, "ag": 213, "commit_async": [217, 337, 338, 340, 343, 345], "if_equ": [218, 363, 364], "arg0": [229, 230, 385, 386], "signal": 241, "set_result": [241, 244], "set_except": [241, 243], "comparison": [247, 252, 269, 273, 297, 403], "real": [252, 269, 297, 403, 410, 414], "unconstrain": [258, 403], "desir": 258, "3nm": [258, 349, 359], "impli": [271, 280, 281, 283, 284, 286, 292], "context_a": 273, "context_b": 273, "70": [274, 275, 276, 277, 289, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 314, 315, 320, 321, 324, 331, 333, 334, 337], "80": [274, 275, 276, 277, 289, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 314, 315, 320, 321, 324, 331, 333, 334, 337, 412], "um": 283, "20000": [299, 412], "1049": 299, "u4": [299, 304, 305, 320, 331, 333], "readabl": [299, 325], "writabl": [299, 336], "yet": [299, 316, 324], "astyp": [299, 310], "__array__": [299, 301, 324], "ndarrai": [299, 301, 410, 411, 412], "interoper": [299, 301, 376, 412], "fix_resizable_bound": [299, 327], "subject": [299, 327, 365], "polici": [299, 327], "partit": [301, 413], "mere": [304, 337, 365], "subscript": [306, 307, 308, 309, 321, 334, 411, 412], "fine": [306, 307, 308, 309, 321, 334], "grain": [306, 307, 308, 309, 321, 334], "shorthand": [308, 309], "5nm": [313, 355, 357, 358], "8nm": 313, "rw": 318, "uncommit": [324, 337, 338], "resize_metadata_onli": 326, "resize_tied_bound": 326, "expand_onli": 326, "shrink_onli": 326, "param": 326, "shrunk": 326, "outsid": [326, 338, 411], "expand": 326, "arang": 326, "reshap": 326, "ti": 326, "caution": 326, "increas": 326, "possibli": 328, "minimal_spec": 331, "track": 337, "fsync": 337, "surviv": 337, "acknowledg": 337, "jointli": 337, "accomplish": 337, "keep": 337, "mind": 337, "fix": [337, 404, 409], "arrang": 337, "perfectli": [337, 411], "disjoint": 337, "improv": [337, 338], "coalesc": [337, 338], "now": [337, 403], "visibl": 338, "roll": 338, "observ": [338, 410], "usag": 338, "43": 338, "44": 338, "45": 338, "exit": 338, "commit_start": [338, 344], "quaniti": [348, 413], "base_unit": [348, 350, 352, 354, 357, 358, 413], "udunits2": [348, 413], "deviat": [348, 413], "__mul__": [348, 355], "divisor": [348, 356], "divid": [348, 356, 411], "portion": [354, 413], "trail": [354, 413], "whitespac": [354, 413], "3e5": 354, "300000": 354, "7nm": 356, "u": [357, 358], "newer": [360, 361], "fulfil": [360, 362], "hold": 365, "longer": 365, "forward": 365, "numpy_dtyp": [385, 390], "object_": [401, 404, 409], "unshar": [403, 410], "minim": [403, 411], "janelia": 403, "flyem": 403, "hemibrain": 403, "segment": [403, 412, 413], "0x8": [403, 412], "41408": [403, 412], "1414": 403, "707": 403, "characterist": 403, "confirm": 403, "redund": [403, 413], "store2": 403, "unverifi": 403, "know": 403, "parallel": 403, "termin": [404, 409], "read_funct": 410, "write_funct": 410, "do_read": 410, "read_param": 410, "101": 410, "103": 410, "104": 410, "106": 410, "read_context": 410, "do_writ": 410, "write_context": 410, "indefinit": 410, "recomput": 410, "100mb": [410, 412], "unmodifi": 410, "broader": 410, "wish": 410, "cloudpickl": 410, "preserv": 410, "unpickl": 410, "free": 410, "basic": 411, "integr": 411, "array_lik": 411, "__index__": 411, "pep": 411, "357": 411, "toward": 411, "silent": 411, "unequ": 411, "domin": 411, "interleav": 411, "legaci": 411, "inlin": 411, "wherebi": 411, "confus": 411, "mix": 411, "were": 411, "perfect": 411, "few": 411, "shortcut": 411, "truncat": 411, "predecessor": 411, "contrast": 411, "potenti": 411, "dask": 411, "propos": 411, "enhanc": 411, "previou": 411, "power": 411, "sel": 411, "op1": 411, "opn": 411, "liter": 411, "denot": 411, "lightweight": 411, "argument": 411, "defer": 411, "easili": 411, "flatten": 411, "sum": 411, "plu": 411, "likewis": 411, "intermedi": 411, "insert": 411, "dexpr": 411, "iexpr": 411, "arg": 411, "onto": 411, "suffici": 411, "squar": 411, "import": 412, "write_futur": 412, "82": 412, "99": 412, "83": 412, "demonstr": 412, "flyeem": 412, "suppli": 412, "dataset_futur": 412, "100_000_000": 412, "0x": 412, "dataset_3d": 412, "100x100x1": 412, "middl": 412, "15000": 412, "15100": 412, "read_futur": 412, "1194100437": 412, "1408314276": 412, "1161117856": 412, "1132030694": 412, "5813054053": 412, "hit": 412, "choos": 413, "against": 413, "recurs": 413, "third": 413, "hierarch": 413, "chunkss": 413, "unshard": 413, "evenli": 413, "subdivid": 413, "boundari": 413, "further": 413, "9223372036854775808": 413, "486000": 413, "90": 413, "canon": 413, "5e": 413, "9m": 413, "reli": 414, "char": 414, "occupi": 414, "ascii": 414, "imaginari": 414, "utf": 414}, "objects": {"": [[10, 0, 1, "json-CacheRevalidationBound", "CacheRevalidationBound", ""], [413, 0, 1, "json-ChunkLayout", "ChunkLayout", ""], [413, 0, 1, "json-ChunkLayout/Grid", "ChunkLayout/Grid", "Constraints on the write/read/codec chunk grids."], [413, 0, 1, "json-Codec", "Codec", ""], [0, 0, 1, "json-Context", "Context", ""], [0, 0, 1, "json-ContextResource", "ContextResource", ""], [3, 0, 1, "json-DownsampleMethod", "DownsampleMethod", "Downsample method"], [18, 0, 1, "json-IndexDomain", "IndexDomain", ""], [18, 0, 1, "json-IndexInterval", "IndexInterval", "Specifies a closed interval of integer index values."], [18, 0, 1, "json-IndexTransform", "IndexTransform", ""], [10, 0, 1, "json-KeyValueStoreBackedChunkDriver", "KeyValueStoreBackedChunkDriver", ""], [23, 0, 1, "json-KvStore", "KvStore", "Key-value store specification."], [23, 0, 1, "json-KvStoreUrl", "KvStoreUrl", "URL representation of a key-value store."], [20, 0, 1, "json-KvStoreUrl/file", "KvStoreUrl/file", "file:// KvStore URL scheme"], [21, 0, 1, "json-KvStoreUrl/gs", "KvStoreUrl/gs", "gs:// KvStore URL scheme"], [22, 0, 1, "json-KvStoreUrl/http", "KvStoreUrl/http", "http:// and https:// KvStore URL scheme"], [24, 0, 1, "json-KvStoreUrl/memory", "KvStoreUrl/memory", "memory:// KvStore URL scheme"], [18, 0, 1, "json-OutputIndexMap", "OutputIndexMap", "Specifies a transform from an input space to a single output index."], [413, 0, 1, "json-Schema", "Schema", ""], [414, 0, 1, "json-TensorStore", "TensorStore", "Specifies a TensorStore to open/create."], [413, 0, 1, "json-Unit", "Unit", "Specifies a physical quantity/unit."], [1, 0, 1, "json-driver/array", "driver/array", ""], [4, 0, 1, "json-driver/avif", "driver/avif", ""], [5, 0, 1, "json-driver/bmp", "driver/bmp", ""], [2, 0, 1, "json-driver/cast", "driver/cast", ""], [3, 0, 1, "json-driver/downsample", "driver/downsample", ""], [6, 0, 1, "json-driver/jpeg", "driver/jpeg", ""], [11, 0, 1, "json-driver/json", "driver/json", ""], [12, 0, 1, "json-driver/n5", "driver/n5", ""], [12, 0, 1, "json-driver/n5/Codec", "driver/n5/Codec", ""], [12, 0, 1, "json-driver/n5/Compression", "driver/n5/Compression", ""], [12, 0, 1, "json-driver/n5/Compression/blosc", "driver/n5/Compression/blosc", ""], [12, 0, 1, "json-driver/n5/Compression/bzip2", "driver/n5/Compression/bzip2", ""], [12, 0, 1, "json-driver/n5/Compression/gzip", "driver/n5/Compression/gzip", ""], [12, 0, 1, "json-driver/n5/Compression/raw", "driver/n5/Compression/raw", ""], [12, 0, 1, "json-driver/n5/Compression/xz", "driver/n5/Compression/xz", ""], [13, 0, 1, "json-driver/neuroglancer_precomputed", "driver/neuroglancer_precomputed", ""], [13, 0, 1, "json-driver/neuroglancer_precomputed/Codec", "driver/neuroglancer_precomputed/Codec", "Neuroglancer Precomputed Codec"], [7, 0, 1, "json-driver/png", "driver/png", ""], [14, 0, 1, "json-driver/stack", "driver/stack", ""], [8, 0, 1, "json-driver/tiff", "driver/tiff", ""], [9, 0, 1, "json-driver/webp", "driver/webp", ""], [15, 0, 1, "json-driver/zarr", "driver/zarr", ""], [15, 0, 1, "json-driver/zarr/Codec", "driver/zarr/Codec", ""], [15, 0, 1, "json-driver/zarr/Compressor", "driver/zarr/Compressor", "Compressor"], [15, 0, 1, "json-driver/zarr/Compressor/blosc", "driver/zarr/Compressor/blosc", ""], [15, 0, 1, "json-driver/zarr/Compressor/bz2", "driver/zarr/Compressor/bz2", ""], [15, 0, 1, "json-driver/zarr/Compressor/zlib", "driver/zarr/Compressor/zlib", ""], [414, 0, 1, "json-dtype", "dtype", "Specifies a TensorStore data type."], [20, 0, 1, "json-kvstore/file", "kvstore/file", "JSON specification of file-backed key-value store."], [21, 0, 1, "json-kvstore/gcs", "kvstore/gcs", ""], [22, 0, 1, "json-kvstore/http", "kvstore/http", ""], [24, 0, 1, "json-kvstore/memory", "kvstore/memory", ""], [25, 0, 1, "json-kvstore/neuroglancer_uint64_sharded", "kvstore/neuroglancer_uint64_sharded", "JSON specification of neuroglancer_uint64_sharded key-value store."], [25, 0, 1, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec", "kvstore/neuroglancer_uint64_sharded/ShardingSpec", "Sharding metadata"], [19, 9, 1, 1, "ARCHFLAGS", "macOS only.  Specifies the CPU architecture to target for cross-compilation. May be -arch x86_64 or -arch arm64.  Universal2 builds (specified by -arch arm64 -arch x86_64 are not supported)."], [19, 9, 1, 1, "BAZELISK_HOME", "Duplicate explicit target name: \"bazelisk\"."], [16, 9, 1, 1, "GOOGLE_APPLICATION_CREDENTIALS", "Specifies the local path to a Google Cloud JSON credentials file.  Refer to the Google Cloud Storage Authentication section for details."], [19, 9, 1, 1, "MACOSX_DEPLOYMENT_TARGET", "macOS only.  Specifies the minimum required macOS version to target.  Must not be earlier than 10.14.  If not specified, defaults to the same macOS version required by the Python binary itself, or 10.14 if later."], [16, 9, 1, 1, "SSLKEYLOGFILE", "Specifies the path to a local file where information necessary to decrypt TensorStore's TLS traffic will be saved in a format compatible with Wireshark.  Refer to the libcurl documentation for more details."], [19, 9, 1, 1, "TENSORSTORE_BAZELISK", "Path to Bazelisk script that is invoked in order to execute the build.  By default the bundled bazelisk.py is used, but this environment variable allows that to be overridden in order to pass additional options, etc."], [19, 9, 1, 1, "TENSORSTORE_BAZEL_BUILD_OPTIONS", "Additional Bazel build options to specify when building.  The encoding is the same as for TENSORSTORE_BAZEL_STARTUP_OPTIONS."], [19, 9, 1, 1, "TENSORSTORE_BAZEL_COMPILATION_MODE", "Bazel compilation mode to use.  Defaults to opt (optimized build)."], [19, 9, 1, 1, "TENSORSTORE_BAZEL_STARTUP_OPTIONS", "Additional Bazel startup options to specify when building.  Multiple options may be separated by spaces; options containing spaces or other special characters should be encoded according to Posix shell escaping rules as implemented by shlex.split()."], [16, 9, 1, 1, "TENSORSTORE_CA_BUNDLE", "Specifies the path to a local file containing one or more CA certificates concatenated into a single file in PEM format.  On many Linux distributions, the system certificate bundle is available at /etc/ssl/certs/ca-certificates.crt.  Refer to the libcurl documentation for more details."], [16, 9, 1, 1, "TENSORSTORE_CA_PATH", "Specifies the path of a local directory containing one or more CA certificates in PEM format.  Each file in the directory must contain a single certificate, and the directory must be prepared using the OpenSSL c_rehash command.  Refer to the libcurl documentation for more details. Note that this is not the most common format for the system CA certificate store.  In most cases, the system CA certificate store should instead be specified using TENSORSTORE_CA_BUNDLE."], [16, 9, 1, 1, "TENSORSTORE_CURL_VERBOSE", "If set to any value, verbose debugging information will be printed to stderr for all HTTP requests."], [16, 9, 1, 1, "TENSORSTORE_GCS_HTTP_URL", "Specifies to connect to an alternative server in place of https://storage.googleapis.com.  Note that the normal Google oauth2 credentials are included in requests, and therefore only trusted servers should be used."], [16, 9, 1, 1, "TENSORSTORE_GCS_REQUEST_CONCURRENCY", "Specifies the concurrency level used by the shared Context Context.gcs_request_concurrency resource. Defaults to 32."], [19, 9, 1, 1, "TENSORSTORE_PREBUILT_DIR", "If specified, building is skipped, and instead setup.py expects to find the pre-built extension module in the specified directory, from a prior invocation of build_ext:"], [19, 9, 1, 1, "TENSORSTORE_SYSTEM_LIBS", "To use system-provided libraries, set the TENSORSTORE_SYSTEM_LIBS environment variable to a comma-separated list of the following identifiers prior to invoking Bazel:"], [16, 9, 1, 1, "all_proxy", "Specifies a proxy server to use for making any HTTP or HTTPS request.  Refer to the libcurl documentation for more details."], [16, 9, 1, 1, "http_proxy", "Specifies a proxy server to use for making HTTP (not HTTPS) requests.  Takes precedence over all_proxy.  Refer to the libcurl documentation for more details."], [16, 9, 1, 1, "https_proxy", "Specifies a proxy server to use for making HTTPS requests.  Takes precedence over all_proxy.  Refer to the libcurl documentation for more details."], [16, 9, 1, 1, "no_proxy", "Specifies a comma-separated list of hostnames or ip addresses for which proxying is disabled.  Refer to the libcurl documentation for more details."]], "ChunkLayout": [[413, 1, 2, "json-ChunkLayout.chunk", "chunk", "Combined constraints on write/read/codec chunks."], [413, 1, 2, "json-ChunkLayout.codec_chunk", "codec_chunk", "Constraints on the chunk grid used by the codec, if applicable."], [413, 1, 2, "json-ChunkLayout.grid_origin", "grid_origin", "Specifies hard constraints on the origin of the chunk grid."], [413, 1, 2, "json-ChunkLayout.grid_origin_soft_constraint", "grid_origin_soft_constraint", "Specifies preferred values for the origin of the chunk grid rather than hard constraints."], [413, 1, 2, "json-ChunkLayout.inner_order", "inner_order", "Permutation specifying the element storage order within the innermost chunks."], [413, 1, 2, "json-ChunkLayout.inner_order_soft_constraint", "inner_order_soft_constraint", "Specifies a preferred value for inner_order rather than a hard constraint.  If inner_order is also specified, it takes precedence."], [413, 1, 2, "json-ChunkLayout.rank", "rank", "Number of dimensions."], [413, 1, 2, "json-ChunkLayout.read_chunk", "read_chunk", "Constraints on the chunk grid over which reads may be efficiently partitioned."], [413, 1, 2, "json-ChunkLayout.write_chunk", "write_chunk", "Constraints on the chunk grid over which writes may be efficiently partitioned."]], "ChunkLayout/Grid": [[413, 1, 2, "json-ChunkLayout/Grid.aspect_ratio", "aspect_ratio", "Aspect ratio of the chunk shape."], [413, 1, 2, "json-ChunkLayout/Grid.aspect_ratio_soft_constraint", "aspect_ratio_soft_constraint", "Soft constraint on aspect ratio, lower precedence than aspect_ratio."], [413, 1, 2, "json-ChunkLayout/Grid.elements", "elements", "Preferred number of elements per chunk."], [413, 1, 2, "json-ChunkLayout/Grid.elements_soft_constraint", "elements_soft_constraint", "Preferred number of elements per chunk, lower precedence than elements."], [413, 1, 2, "json-ChunkLayout/Grid.shape", "shape", "Hard constraints on the chunk size for each dimension."], [413, 1, 2, "json-ChunkLayout/Grid.shape_soft_constraint", "shape_soft_constraint", "Preferred chunk sizes for each dimension."]], "Codec": [[413, 1, 2, "json-Codec.driver", "driver", "Driver identifier"]], "Context": [[0, 1, 2, "json-Context.<resource-type>", "&lt;resource-type&gt;", ""], [0, 1, 2, "json-Context.<resource-type>#<id>", "&lt;resource-type&gt;#&lt;id&gt;", ""], [0, 0, 1, "json-Context.cache_pool", "cache_pool", ""], [0, 0, 1, "json-Context.data_copy_concurrency", "data_copy_concurrency", ""], [21, 0, 1, "json-Context.experimental_gcs_rate_limiter", "experimental_gcs_rate_limiter", ""], [0, 0, 1, "json-Context.file_io_concurrency", "file_io_concurrency", ""], [21, 0, 1, "json-Context.gcs_request_concurrency", "gcs_request_concurrency", ""], [21, 0, 1, "json-Context.gcs_request_retries", "gcs_request_retries", ""], [21, 0, 1, "json-Context.gcs_user_project", "gcs_user_project", ""], [22, 0, 1, "json-Context.http_request_concurrency", "http_request_concurrency", ""], [22, 0, 1, "json-Context.http_request_retries", "http_request_retries", ""], [24, 0, 1, "json-Context.memory_key_value_store", "memory_key_value_store", ""]], "Context.cache_pool": [[0, 1, 2, "json-Context.cache_pool.queued_for_writeback_bytes_limit", "queued_for_writeback_bytes_limit", ""], [0, 1, 2, "json-Context.cache_pool.total_bytes_limit", "total_bytes_limit", ""]], "Context.data_copy_concurrency": [[0, 1, 2, "json-Context.data_copy_concurrency.limit", "limit", ""]], "Context.experimental_gcs_rate_limiter": [[21, 1, 2, "json-Context.experimental_gcs_rate_limiter.doubling_time", "doubling_time", ""], [21, 1, 2, "json-Context.experimental_gcs_rate_limiter.read_rate", "read_rate", ""], [21, 1, 2, "json-Context.experimental_gcs_rate_limiter.write_rate", "write_rate", ""]], "Context.file_io_concurrency": [[0, 1, 2, "json-Context.file_io_concurrency.limit", "limit", ""]], "Context.gcs_request_concurrency": [[21, 1, 2, "json-Context.gcs_request_concurrency.limit", "limit", ""]], "Context.gcs_request_retries": [[21, 1, 2, "json-Context.gcs_request_retries.initial_delay", "initial_delay", ""], [21, 1, 2, "json-Context.gcs_request_retries.max_delay", "max_delay", ""], [21, 1, 2, "json-Context.gcs_request_retries.max_retries", "max_retries", ""]], "Context.gcs_user_project": [[21, 1, 2, "json-Context.gcs_user_project.project_id", "project_id", "Google Cloud project id, e.g. \"my-project\".  The Google Cloud account that is used must have appropriate permissions to bill to the specified project."]], "Context.http_request_concurrency": [[22, 1, 2, "json-Context.http_request_concurrency.limit", "limit", ""]], "Context.http_request_retries": [[22, 1, 2, "json-Context.http_request_retries.initial_delay", "initial_delay", ""], [22, 1, 2, "json-Context.http_request_retries.max_delay", "max_delay", ""], [22, 1, 2, "json-Context.http_request_retries.max_retries", "max_retries", ""]], "DownsampleMethod": [[3, 1, 2, "json-DownsampleMethod.max", "max", ""], [3, 1, 2, "json-DownsampleMethod.mean", "mean", ""], [3, 1, 2, "json-DownsampleMethod.median", "median", ""], [3, 1, 2, "json-DownsampleMethod.min", "min", ""], [3, 1, 2, "json-DownsampleMethod.mode", "mode", ""], [3, 1, 2, "json-DownsampleMethod.stride", "stride", ""]], "IndexDomain": [[18, 1, 2, "json-IndexDomain.exclusive_max", "exclusive_max", "Exclusive upper bounds of the domain."], [18, 1, 2, "json-IndexDomain.inclusive_max", "inclusive_max", "Inclusive upper bounds of the domain."], [18, 1, 2, "json-IndexDomain.inclusive_min", "inclusive_min", "Inclusive lower bounds of the domain."], [18, 1, 2, "json-IndexDomain.labels", "labels", "Dimension labels for each dimension."], [18, 1, 2, "json-IndexDomain.rank", "rank", "Number of dimensions."], [18, 1, 2, "json-IndexDomain.shape", "shape", "Extent of each dimension of the domain."]], "IndexTransform": [[18, 1, 2, "json-IndexTransform.input_exclusive_max", "input_exclusive_max", "Exclusive upper bounds of the input domain."], [18, 1, 2, "json-IndexTransform.input_inclusive_max", "input_inclusive_max", "Inclusive upper bounds of the input domain."], [18, 1, 2, "json-IndexTransform.input_inclusive_min", "input_inclusive_min", "Inclusive lower bounds of the input domain."], [18, 1, 2, "json-IndexTransform.input_labels", "input_labels", "Dimension labels for each input domain dimension."], [18, 1, 2, "json-IndexTransform.input_rank", "input_rank", "Number of input dimensions."], [18, 1, 2, "json-IndexTransform.input_shape", "input_shape", "Extent of each dimension of the input domain."], [18, 1, 2, "json-IndexTransform.output", "output", "Specifies the output index map for each output dimension."]], "KeyValueStoreBackedChunkDriver": [[10, 1, 2, "json-KeyValueStoreBackedChunkDriver.assume_metadata", "assume_metadata", ""], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.cache_pool", "cache_pool", ""], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.context", "context", "Specifies context resources that augment/override the parent context."], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.create", "create", ""], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.data_copy_concurrency", "data_copy_concurrency", ""], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.delete_existing", "delete_existing", ""], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.driver", "driver", "Driver identifier"], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.dtype", "dtype", "Specifies the data type."], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.kvstore", "kvstore", ""], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.open", "open", ""], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.path", "path", "Additional path within the KvStore specified by kvstore."], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.rank", "rank", "Specifies the rank of the TensorStore."], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.recheck_cached_data", "recheck_cached_data", ""], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.recheck_cached_metadata", "recheck_cached_metadata", ""], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.schema", "schema", "Specifies constraints on the schema."], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.transform", "transform", "Specifies a transform."]], "KvStore": [[23, 1, 2, "json-KvStore.context", "context", ""], [23, 1, 2, "json-KvStore.driver", "driver", "Key-value store driver identifier"], [23, 1, 2, "json-KvStore.path", "path", "Key prefix within the key-value store."]], "OutputIndexMap": [[18, 1, 2, "json-OutputIndexMap.index_array", "index_array", "If present, indicates that this output dimension uses an index array map, with the index array specified as a nested list of rank equal to the input_rank."], [18, 1, 2, "json-OutputIndexMap.index_array_bounds", "index_array_bounds", ""], [18, 1, 2, "json-OutputIndexMap.input_dimension", "input_dimension", "If present, indicates that this output dimension uses a single input dimension map with the specified input dimension.  Must not be specified in conjunction with index_array."], [18, 1, 2, "json-OutputIndexMap.offset", "offset", "Specifies an offset for this output dimension.  If neither input_dimension nor index_array is specified, this specifies the constant value to which this output dimension maps."], [18, 1, 2, "json-OutputIndexMap.stride", "stride", "Multiplier for the input index specified by input_dimension or the index array value specified by index_array."]], "Schema": [[413, 1, 2, "json-Schema.chunk_layout", "chunk_layout", "Data storage layout constraints."], [413, 1, 2, "json-Schema.codec", "codec", ""], [413, 1, 2, "json-Schema.dimension_units", "dimension_units", "Physical units of each dimension."], [413, 1, 2, "json-Schema.domain", "domain", "Domain of the TensorStore, including bounds and optional dimension labels."], [413, 1, 2, "json-Schema.dtype", "dtype", "Specifies the data type of the TensorStore."], [413, 1, 2, "json-Schema.fill_value", "fill_value", "Fill value to use for missing data."], [413, 1, 2, "json-Schema.rank", "rank", "Number of dimensions."]], "TensorStore": [[414, 1, 2, "json-TensorStore.context", "context", "Specifies context resources that augment/override the parent context."], [414, 1, 2, "json-TensorStore.driver", "driver", "Driver identifier"], [414, 1, 2, "json-TensorStore.dtype", "dtype", "Specifies the data type."], [414, 1, 2, "json-TensorStore.rank", "rank", "Specifies the rank of the TensorStore."], [414, 1, 2, "json-TensorStore.schema", "schema", "Specifies constraints on the schema."], [414, 1, 2, "json-TensorStore.transform", "transform", "Specifies a transform."]], "driver/array": [[1, 1, 2, "json-driver/array.array", "array", "Nested array of rank equal to rank specifying the initial value."], [1, 1, 2, "json-driver/array.context", "context", "Specifies context resources that augment/override the parent context."], [1, 1, 2, "json-driver/array.data_copy_concurrency", "data_copy_concurrency", ""], [1, 1, 2, "json-driver/array.driver", "driver", ""], [1, 1, 2, "json-driver/array.dtype", "dtype", "Specifies the data type."], [1, 1, 2, "json-driver/array.rank", "rank", "Specifies the rank of the TensorStore."], [1, 1, 2, "json-driver/array.schema", "schema", "Specifies constraints on the schema."], [1, 1, 2, "json-driver/array.transform", "transform", "Specifies a transform."]], "driver/avif": [[4, 1, 2, "json-driver/avif.cache_pool", "cache_pool", ""], [4, 1, 2, "json-driver/avif.context", "context", "Specifies context resources that augment/override the parent context."], [4, 1, 2, "json-driver/avif.data_copy_concurrency", "data_copy_concurrency", ""], [4, 1, 2, "json-driver/avif.driver", "driver", ""], [4, 1, 2, "json-driver/avif.dtype", "dtype", ""], [4, 1, 2, "json-driver/avif.kvstore", "kvstore", ""], [4, 1, 2, "json-driver/avif.quantizer", "quantizer", ""], [4, 1, 2, "json-driver/avif.rank", "rank", "Specifies the rank of the TensorStore."], [4, 1, 2, "json-driver/avif.schema", "schema", "Specifies constraints on the schema."], [4, 1, 2, "json-driver/avif.speed", "speed", ""], [4, 1, 2, "json-driver/avif.transform", "transform", "Specifies a transform."]], "driver/bmp": [[5, 1, 2, "json-driver/bmp.cache_pool", "cache_pool", ""], [5, 1, 2, "json-driver/bmp.context", "context", "Specifies context resources that augment/override the parent context."], [5, 1, 2, "json-driver/bmp.data_copy_concurrency", "data_copy_concurrency", ""], [5, 1, 2, "json-driver/bmp.driver", "driver", ""], [5, 1, 2, "json-driver/bmp.dtype", "dtype", ""], [5, 1, 2, "json-driver/bmp.kvstore", "kvstore", ""], [5, 1, 2, "json-driver/bmp.rank", "rank", "Specifies the rank of the TensorStore."], [5, 1, 2, "json-driver/bmp.schema", "schema", "Specifies constraints on the schema."], [5, 1, 2, "json-driver/bmp.transform", "transform", "Specifies a transform."]], "driver/cast": [[2, 1, 2, "json-driver/cast.base", "base", "Base TensorStore to convert."], [2, 1, 2, "json-driver/cast.context", "context", "Specifies context resources that augment/override the parent context."], [2, 1, 2, "json-driver/cast.driver", "driver", ""], [2, 1, 2, "json-driver/cast.dtype", "dtype", "Specifies the data type under which to view the base TensorStore."], [2, 1, 2, "json-driver/cast.rank", "rank", "Specifies the rank of the TensorStore."], [2, 1, 2, "json-driver/cast.schema", "schema", "Specifies constraints on the schema."], [2, 1, 2, "json-driver/cast.transform", "transform", "Specifies a transform."]], "driver/downsample": [[3, 1, 2, "json-driver/downsample.base", "base", "Base TensorStore to downsample."], [3, 1, 2, "json-driver/downsample.context", "context", "Specifies context resources that augment/override the parent context."], [3, 1, 2, "json-driver/downsample.downsample_factors", "downsample_factors", ""], [3, 1, 2, "json-driver/downsample.downsample_method", "downsample_method", ""], [3, 1, 2, "json-driver/downsample.driver", "driver", ""], [3, 1, 2, "json-driver/downsample.dtype", "dtype", "Specifies the data type."], [3, 1, 2, "json-driver/downsample.rank", "rank", "Specifies the rank of the TensorStore."], [3, 1, 2, "json-driver/downsample.schema", "schema", "Specifies constraints on the schema."], [3, 1, 2, "json-driver/downsample.transform", "transform", "Specifies a transform."]], "driver/jpeg": [[6, 1, 2, "json-driver/jpeg.cache_pool", "cache_pool", ""], [6, 1, 2, "json-driver/jpeg.context", "context", "Specifies context resources that augment/override the parent context."], [6, 1, 2, "json-driver/jpeg.data_copy_concurrency", "data_copy_concurrency", ""], [6, 1, 2, "json-driver/jpeg.driver", "driver", ""], [6, 1, 2, "json-driver/jpeg.dtype", "dtype", ""], [6, 1, 2, "json-driver/jpeg.kvstore", "kvstore", ""], [6, 1, 2, "json-driver/jpeg.quality", "quality", ""], [6, 1, 2, "json-driver/jpeg.rank", "rank", "Specifies the rank of the TensorStore."], [6, 1, 2, "json-driver/jpeg.schema", "schema", "Specifies constraints on the schema."], [6, 1, 2, "json-driver/jpeg.transform", "transform", "Specifies a transform."]], "driver/json": [[11, 1, 2, "json-driver/json.cache_pool", "cache_pool", ""], [11, 1, 2, "json-driver/json.context", "context", "Specifies context resources that augment/override the parent context."], [11, 1, 2, "json-driver/json.data_copy_concurrency", "data_copy_concurrency", ""], [11, 1, 2, "json-driver/json.driver", "driver", ""], [11, 1, 2, "json-driver/json.dtype", "dtype", ""], [11, 1, 2, "json-driver/json.json_pointer", "json_pointer", ""], [11, 1, 2, "json-driver/json.kvstore", "kvstore", ""], [11, 1, 2, "json-driver/json.path", "path", "Additional path to the JSON file within the KvStore specified by kvstore."], [11, 1, 2, "json-driver/json.rank", "rank", ""], [11, 1, 2, "json-driver/json.recheck_cached_data", "recheck_cached_data", ""], [11, 1, 2, "json-driver/json.schema", "schema", "Specifies constraints on the schema."], [11, 1, 2, "json-driver/json.transform", "transform", "Specifies a transform."]], "driver/n5": [[12, 1, 2, "json-driver/n5.assume_metadata", "assume_metadata", ""], [12, 1, 2, "json-driver/n5.cache_pool", "cache_pool", ""], [12, 1, 2, "json-driver/n5.context", "context", "Specifies context resources that augment/override the parent context."], [12, 1, 2, "json-driver/n5.create", "create", ""], [12, 1, 2, "json-driver/n5.data_copy_concurrency", "data_copy_concurrency", ""], [12, 1, 2, "json-driver/n5.delete_existing", "delete_existing", ""], [12, 1, 2, "json-driver/n5.driver", "driver", ""], [12, 1, 2, "json-driver/n5.dtype", "dtype", "Specifies the data type."], [12, 1, 2, "json-driver/n5.kvstore", "kvstore", ""], [12, 1, 2, "json-driver/n5.metadata", "metadata", "N5 array metadata."], [12, 1, 2, "json-driver/n5.open", "open", ""], [12, 1, 2, "json-driver/n5.path", "path", "Additional path within the KvStore specified by kvstore."], [12, 1, 2, "json-driver/n5.rank", "rank", "Specifies the rank of the TensorStore."], [12, 1, 2, "json-driver/n5.recheck_cached_data", "recheck_cached_data", ""], [12, 1, 2, "json-driver/n5.recheck_cached_metadata", "recheck_cached_metadata", ""], [12, 1, 2, "json-driver/n5.schema", "schema", "Specifies constraints on the schema."], [12, 1, 2, "json-driver/n5.transform", "transform", "Specifies a transform."]], "driver/n5.metadata": [[12, 1, 2, "json-driver/n5.metadata.axes", "axes", "Specifies a label for each dimension of the dataset."], [12, 1, 2, "json-driver/n5.metadata.blockSize", "blockSize", "Chunk dimensions."], [12, 1, 2, "json-driver/n5.metadata.compression", "compression", "Specifies the chunk compression method."], [12, 1, 2, "json-driver/n5.metadata.dataType", "dataType", "Specifies the data type."], [12, 1, 2, "json-driver/n5.metadata.dimensions", "dimensions", "Dimensions of the dataset."], [12, 1, 2, "json-driver/n5.metadata.resolution", "resolution", "Specifies the multiplier for the physical units."], [12, 1, 2, "json-driver/n5.metadata.units", "units", "Specifies the base physical unit for each dimension."]], "driver/n5/Codec": [[12, 1, 2, "json-driver/n5/Codec.compression", "compression", "Specifies the chunk compression method."], [12, 1, 2, "json-driver/n5/Codec.driver", "driver", ""]], "driver/n5/Compression": [[12, 1, 2, "json-driver/n5/Compression.type", "type", ""]], "driver/n5/Compression/blosc": [[12, 1, 2, "json-driver/n5/Compression/blosc.clevel", "clevel", "Specifies the Blosc compression level to use."], [12, 1, 2, "json-driver/n5/Compression/blosc.cname", "cname", ""], [12, 1, 2, "json-driver/n5/Compression/blosc.shuffle", "shuffle", ""], [12, 1, 2, "json-driver/n5/Compression/blosc.type", "type", ""]], "driver/n5/Compression/bzip2": [[12, 1, 2, "json-driver/n5/Compression/bzip2.blockSize", "blockSize", "Specifies the bzip2 block size to use (in units of 100KB), which also determine the compression level."], [12, 1, 2, "json-driver/n5/Compression/bzip2.type", "type", ""]], "driver/n5/Compression/gzip": [[12, 1, 2, "json-driver/n5/Compression/gzip.level", "level", "Specifies the zlib compression level to use."], [12, 1, 2, "json-driver/n5/Compression/gzip.type", "type", ""], [12, 1, 2, "json-driver/n5/Compression/gzip.useZlib", "useZlib", ""]], "driver/n5/Compression/raw": [[12, 1, 2, "json-driver/n5/Compression/raw.type", "type", ""]], "driver/n5/Compression/xz": [[12, 1, 2, "json-driver/n5/Compression/xz.preset", "preset", ""], [12, 1, 2, "json-driver/n5/Compression/xz.type", "type", ""]], "driver/neuroglancer_precomputed": [[13, 1, 2, "json-driver/neuroglancer_precomputed.assume_metadata", "assume_metadata", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.cache_pool", "cache_pool", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.context", "context", "Specifies context resources that augment/override the parent context."], [13, 1, 2, "json-driver/neuroglancer_precomputed.create", "create", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.data_copy_concurrency", "data_copy_concurrency", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.delete_existing", "delete_existing", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.driver", "driver", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.dtype", "dtype", "Specifies the data type."], [13, 1, 2, "json-driver/neuroglancer_precomputed.kvstore", "kvstore", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.multiscale_metadata", "multiscale_metadata", "Scale-independent metadata."], [13, 1, 2, "json-driver/neuroglancer_precomputed.open", "open", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.path", "path", "Additional path within the KvStore specified by kvstore."], [13, 1, 2, "json-driver/neuroglancer_precomputed.rank", "rank", "Specifies the rank of the TensorStore."], [13, 1, 2, "json-driver/neuroglancer_precomputed.recheck_cached_data", "recheck_cached_data", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.recheck_cached_metadata", "recheck_cached_metadata", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.scale_index", "scale_index", "Zero-based index of the scale to open or create."], [13, 1, 2, "json-driver/neuroglancer_precomputed.scale_metadata", "scale_metadata", "Per-scale metadata."], [13, 1, 2, "json-driver/neuroglancer_precomputed.schema", "schema", "Specifies constraints on the schema."], [13, 1, 2, "json-driver/neuroglancer_precomputed.transform", "transform", "Specifies a transform."]], "driver/neuroglancer_precomputed.multiscale_metadata": [[13, 1, 2, "json-driver/neuroglancer_precomputed.multiscale_metadata.data_type", "data_type", "Specifies the data type."], [13, 1, 2, "json-driver/neuroglancer_precomputed.multiscale_metadata.num_channels", "num_channels", "Number of channels."], [13, 1, 2, "json-driver/neuroglancer_precomputed.multiscale_metadata.type", "type", "Specifying the type of volume."]], "driver/neuroglancer_precomputed.scale_metadata": [[13, 1, 2, "json-driver/neuroglancer_precomputed.scale_metadata.chunk_size", "chunk_size", "Chunk dimensions (XYZ order)."], [13, 1, 2, "json-driver/neuroglancer_precomputed.scale_metadata.compressed_segmentation_block_size", "compressed_segmentation_block_size", "Block size for compressed segmentation encoding."], [13, 1, 2, "json-driver/neuroglancer_precomputed.scale_metadata.encoding", "encoding", "Specifies the chunk encoding."], [13, 1, 2, "json-driver/neuroglancer_precomputed.scale_metadata.jpeg_quality", "jpeg_quality", "JPEG encoding quality."], [13, 1, 2, "json-driver/neuroglancer_precomputed.scale_metadata.key", "key", "Specifies the scale key (relative to path)."], [13, 1, 2, "json-driver/neuroglancer_precomputed.scale_metadata.resolution", "resolution", "Voxel size in nanometers (XYZ order)."], [13, 1, 2, "json-driver/neuroglancer_precomputed.scale_metadata.sharding", "sharding", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.scale_metadata.size", "size", "Voxel dimensions of the volume (XYZ order)."], [13, 1, 2, "json-driver/neuroglancer_precomputed.scale_metadata.voxel_offset", "voxel_offset", "Voxel origin of the volume (XYZ order)."]], "driver/neuroglancer_precomputed/Codec": [[13, 1, 2, "json-driver/neuroglancer_precomputed/Codec.driver", "driver", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed/Codec.encoding", "encoding", "Specifies the chunk encoding."], [13, 1, 2, "json-driver/neuroglancer_precomputed/Codec.jpeg_quality", "jpeg_quality", "JPEG encoding quality."], [13, 1, 2, "json-driver/neuroglancer_precomputed/Codec.shard_data_encoding", "shard_data_encoding", "Additional data compression when using the sharded format."]], "driver/png": [[7, 1, 2, "json-driver/png.cache_pool", "cache_pool", ""], [7, 1, 2, "json-driver/png.compression_level", "compression_level", ""], [7, 1, 2, "json-driver/png.context", "context", "Specifies context resources that augment/override the parent context."], [7, 1, 2, "json-driver/png.data_copy_concurrency", "data_copy_concurrency", ""], [7, 1, 2, "json-driver/png.driver", "driver", ""], [7, 1, 2, "json-driver/png.dtype", "dtype", ""], [7, 1, 2, "json-driver/png.kvstore", "kvstore", ""], [7, 1, 2, "json-driver/png.rank", "rank", "Specifies the rank of the TensorStore."], [7, 1, 2, "json-driver/png.schema", "schema", "Specifies constraints on the schema."], [7, 1, 2, "json-driver/png.transform", "transform", "Specifies a transform."]], "driver/stack": [[14, 1, 2, "json-driver/stack.context", "context", "Specifies context resources that augment/override the parent context."], [14, 1, 2, "json-driver/stack.data_copy_concurrency", "data_copy_concurrency", ""], [14, 1, 2, "json-driver/stack.driver", "driver", ""], [14, 1, 2, "json-driver/stack.dtype", "dtype", "Specifies the data type."], [14, 1, 2, "json-driver/stack.layers", "layers", "Array of layered tensorstore drivers."], [14, 1, 2, "json-driver/stack.rank", "rank", "Specifies the rank of the TensorStore."], [14, 1, 2, "json-driver/stack.schema", "schema", "Specifies constraints on the schema."], [14, 1, 2, "json-driver/stack.transform", "transform", "Specifies a transform."]], "driver/tiff": [[8, 1, 2, "json-driver/tiff.cache_pool", "cache_pool", ""], [8, 1, 2, "json-driver/tiff.context", "context", "Specifies context resources that augment/override the parent context."], [8, 1, 2, "json-driver/tiff.data_copy_concurrency", "data_copy_concurrency", ""], [8, 1, 2, "json-driver/tiff.driver", "driver", ""], [8, 1, 2, "json-driver/tiff.dtype", "dtype", ""], [8, 1, 2, "json-driver/tiff.kvstore", "kvstore", ""], [8, 1, 2, "json-driver/tiff.page", "page", ""], [8, 1, 2, "json-driver/tiff.rank", "rank", "Specifies the rank of the TensorStore."], [8, 1, 2, "json-driver/tiff.schema", "schema", "Specifies constraints on the schema."], [8, 1, 2, "json-driver/tiff.transform", "transform", "Specifies a transform."]], "driver/webp": [[9, 1, 2, "json-driver/webp.cache_pool", "cache_pool", ""], [9, 1, 2, "json-driver/webp.context", "context", "Specifies context resources that augment/override the parent context."], [9, 1, 2, "json-driver/webp.data_copy_concurrency", "data_copy_concurrency", ""], [9, 1, 2, "json-driver/webp.driver", "driver", ""], [9, 1, 2, "json-driver/webp.dtype", "dtype", ""], [9, 1, 2, "json-driver/webp.kvstore", "kvstore", ""], [9, 1, 2, "json-driver/webp.lossless", "lossless", ""], [9, 1, 2, "json-driver/webp.quality", "quality", ""], [9, 1, 2, "json-driver/webp.rank", "rank", "Specifies the rank of the TensorStore."], [9, 1, 2, "json-driver/webp.schema", "schema", "Specifies constraints on the schema."], [9, 1, 2, "json-driver/webp.transform", "transform", "Specifies a transform."]], "driver/zarr": [[15, 1, 2, "json-driver/zarr.assume_metadata", "assume_metadata", ""], [15, 1, 2, "json-driver/zarr.cache_pool", "cache_pool", ""], [15, 1, 2, "json-driver/zarr.context", "context", "Specifies context resources that augment/override the parent context."], [15, 1, 2, "json-driver/zarr.create", "create", ""], [15, 1, 2, "json-driver/zarr.data_copy_concurrency", "data_copy_concurrency", ""], [15, 1, 2, "json-driver/zarr.delete_existing", "delete_existing", ""], [15, 1, 2, "json-driver/zarr.driver", "driver", ""], [15, 1, 2, "json-driver/zarr.dtype", "dtype", "Specifies the data type."], [15, 1, 2, "json-driver/zarr.field", "field", "Name of field to open."], [15, 1, 2, "json-driver/zarr.key_encoding", "key_encoding", "Specifies the encoding of chunk indices into key-value store keys."], [15, 1, 2, "json-driver/zarr.kvstore", "kvstore", ""], [15, 1, 2, "json-driver/zarr.metadata", "metadata", "Zarr array metadata."], [15, 1, 2, "json-driver/zarr.metadata_key", "metadata_key", "Specifies the key under which to store the array metadata in JSON format."], [15, 1, 2, "json-driver/zarr.open", "open", ""], [15, 1, 2, "json-driver/zarr.path", "path", "Additional path within the KvStore specified by kvstore."], [15, 1, 2, "json-driver/zarr.rank", "rank", "Specifies the rank of the TensorStore."], [15, 1, 2, "json-driver/zarr.recheck_cached_data", "recheck_cached_data", ""], [15, 1, 2, "json-driver/zarr.recheck_cached_metadata", "recheck_cached_metadata", ""], [15, 1, 2, "json-driver/zarr.schema", "schema", "Specifies constraints on the schema."], [15, 1, 2, "json-driver/zarr.transform", "transform", "Specifies a transform."]], "driver/zarr.metadata": [[15, 1, 2, "json-driver/zarr.metadata.chunks", "chunks", "Chunk dimensions."], [15, 1, 2, "json-driver/zarr.metadata.compressor", "compressor", "Specifies the chunk compression method."], [15, 1, 2, "json-driver/zarr.metadata.dimension_separator", "dimension_separator", "Specifies the encoding of chunk indices into key-value store keys."], [15, 1, 2, "json-driver/zarr.metadata.dtype", "dtype", "Specifies the scalar or structured data type."], [15, 1, 2, "json-driver/zarr.metadata.fill_value", "fill_value", "Specifies the fill value."], [15, 1, 2, "json-driver/zarr.metadata.filters", "filters", "Specifies the filters to apply to chunks."], [15, 1, 2, "json-driver/zarr.metadata.order", "order", "Specifies the data layout for encoded chunks."], [15, 1, 2, "json-driver/zarr.metadata.shape", "shape", "Chunked dimensions of the array."], [15, 1, 2, "json-driver/zarr.metadata.zarr_format", "zarr_format", ""]], "driver/zarr/Codec": [[15, 1, 2, "json-driver/zarr/Codec.compressor", "compressor", "Specifies the chunk compression method."], [15, 1, 2, "json-driver/zarr/Codec.driver", "driver", ""], [15, 1, 2, "json-driver/zarr/Codec.filters", "filters", "Specifies the filters to apply to chunks."]], "driver/zarr/Compressor": [[15, 1, 2, "json-driver/zarr/Compressor.id", "id", ""]], "driver/zarr/Compressor/blosc": [[15, 1, 2, "json-driver/zarr/Compressor/blosc.blocksize", "blocksize", "Specifies the Blosc blocksize."], [15, 1, 2, "json-driver/zarr/Compressor/blosc.clevel", "clevel", "Specifies the Blosc compression level to use."], [15, 1, 2, "json-driver/zarr/Compressor/blosc.cname", "cname", ""], [15, 1, 2, "json-driver/zarr/Compressor/blosc.id", "id", ""], [15, 1, 2, "json-driver/zarr/Compressor/blosc.shuffle", "shuffle", ""]], "driver/zarr/Compressor/bz2": [[15, 1, 2, "json-driver/zarr/Compressor/bz2.id", "id", ""], [15, 1, 2, "json-driver/zarr/Compressor/bz2.level", "level", "Specifies the bzip2 buffer size/compression level to use."]], "driver/zarr/Compressor/zlib": [[15, 1, 2, "json-driver/zarr/Compressor/zlib.id", "id", ""], [15, 1, 2, "json-driver/zarr/Compressor/zlib.level", "level", "Specifies the zlib compression level to use."]], "dtype": [[414, 1, 2, "json-dtype.bfloat16", "bfloat16", "bfloat16 floating-point format number."], [414, 1, 2, "json-dtype.bool", "bool", "Boolean value (0 or 1)."], [414, 1, 2, "json-dtype.byte", "byte", "Single byte."], [414, 1, 2, "json-dtype.char", "char", "Single byte, interpreted as an ASCII character."], [414, 1, 2, "json-dtype.complex128", "complex128", "Complex number, where the real and imaginary components are each represented by a float64."], [414, 1, 2, "json-dtype.complex64", "complex64", "Complex number, where the real and imaginary components are each represented by a float32."], [414, 1, 2, "json-dtype.float16", "float16", "IEEE 754 binary16 half-precision floating-point number."], [414, 1, 2, "json-dtype.float32", "float32", "IEEE 754 binary32 single-precision floating-point number."], [414, 1, 2, "json-dtype.float64", "float64", "IEEE 754 binary64 double-precision floating-point number."], [414, 1, 2, "json-dtype.int16", "int16", "16-bit signed two's-complement integer."], [414, 1, 2, "json-dtype.int32", "int32", "32-bit signed two's-complement integer."], [414, 1, 2, "json-dtype.int64", "int64", "64-bit signed two's-complement integer."], [414, 1, 2, "json-dtype.int8", "int8", "8-bit signed two's-complement integer."], [414, 1, 2, "json-dtype.json", "json", "JSON value."], [414, 1, 2, "json-dtype.string", "string", "Byte string."], [414, 1, 2, "json-dtype.uint16", "uint16", "16-bit unsigned integer."], [414, 1, 2, "json-dtype.uint32", "uint32", "32-bit unsigned integer."], [414, 1, 2, "json-dtype.uint64", "uint64", "64-bit unsigned integer."], [414, 1, 2, "json-dtype.uint8", "uint8", "8-bit unsigned integer."], [414, 1, 2, "json-dtype.ustring", "ustring", "Unicode string (represented in memory as UTF-8)."]], "kvstore/file": [[20, 1, 2, "json-kvstore/file.context", "context", ""], [20, 1, 2, "json-kvstore/file.driver", "driver", ""], [20, 1, 2, "json-kvstore/file.file_io_concurrency", "file_io_concurrency", ""], [20, 1, 2, "json-kvstore/file.path", "path", "Path to root directory on local filesystem."]], "kvstore/gcs": [[21, 1, 2, "json-kvstore/gcs.bucket", "bucket", "Google Cloud Storage bucket to use."], [21, 1, 2, "json-kvstore/gcs.context", "context", ""], [21, 1, 2, "json-kvstore/gcs.driver", "driver", ""], [21, 1, 2, "json-kvstore/gcs.gcs_request_concurrency", "gcs_request_concurrency", ""], [21, 1, 2, "json-kvstore/gcs.gcs_request_retries", "gcs_request_retries", ""], [21, 1, 2, "json-kvstore/gcs.gcs_user_project", "gcs_user_project", ""], [21, 1, 2, "json-kvstore/gcs.path", "path", "Key prefix within the key-value store."]], "kvstore/http": [[22, 1, 2, "json-kvstore/http.base_url", "base_url", "Base URL."], [22, 1, 2, "json-kvstore/http.context", "context", ""], [22, 1, 2, "json-kvstore/http.driver", "driver", ""], [22, 1, 2, "json-kvstore/http.headers", "headers", "Additional HTTP headers to send with every request."], [22, 1, 2, "json-kvstore/http.http_request_concurrency", "http_request_concurrency", ""], [22, 1, 2, "json-kvstore/http.http_request_retries", "http_request_retries", ""], [22, 1, 2, "json-kvstore/http.path", "path", "Path relative to base_url."]], "kvstore/memory": [[24, 1, 2, "json-kvstore/memory.atomic", "atomic", ""], [24, 1, 2, "json-kvstore/memory.context", "context", ""], [24, 1, 2, "json-kvstore/memory.driver", "driver", ""], [24, 1, 2, "json-kvstore/memory.memory_key_value_store", "memory_key_value_store", ""], [24, 1, 2, "json-kvstore/memory.path", "path", "Key prefix within the key-value store."]], "kvstore/neuroglancer_uint64_sharded": [[25, 1, 2, "json-kvstore/neuroglancer_uint64_sharded.base", "base", "Underlying key-value store."], [25, 1, 2, "json-kvstore/neuroglancer_uint64_sharded.cache_pool", "cache_pool", ""], [25, 1, 2, "json-kvstore/neuroglancer_uint64_sharded.context", "context", ""], [25, 1, 2, "json-kvstore/neuroglancer_uint64_sharded.data_copy_concurrency", "data_copy_concurrency", ""], [25, 1, 2, "json-kvstore/neuroglancer_uint64_sharded.driver", "driver", ""], [25, 1, 2, "json-kvstore/neuroglancer_uint64_sharded.metadata", "metadata", "Specifies the sharding format."], [25, 1, 2, "json-kvstore/neuroglancer_uint64_sharded.path", "path", "Key prefix within the key-value store."]], "kvstore/neuroglancer_uint64_sharded/ShardingSpec": [[25, 1, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.@type", "@type", ""], [25, 1, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.data_encoding", "data_encoding", "Specifies the encoding of the data chunks."], [25, 1, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.hash", "hash", "Specifies the hash function used to map chunk IDs to shards."], [25, 1, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.minishard_bits", "minishard_bits", "Number of bits of the hashed chunk ID that determine the minishard number."], [25, 1, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.minishard_index_encoding", "minishard_index_encoding", "Specifies the encoding of the minishard index."], [25, 1, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.preshift_bits", "preshift_bits", "Number of low-order bits of the chunk ID that do not contribute to the hashed chunk ID."], [25, 1, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.shard_bits", "shard_bits", "Number of bits of the hashed chunk ID that determine the shard number."]], "tensorstore": [[27, 2, 1, "", "ChunkLayout", "Describes the storage layout of a tensorstore.TensorStore."], [58, 2, 1, "", "CodecSpec", "Specifies driver-specific encoding/decoding parameters."], [61, 2, 1, "", "Context", "Manages shared TensorStore context resources, such as caches and credentials."], [73, 2, 1, "", "Dim", "1-d index interval with optionally-implicit bounds and dimension label."], [97, 2, 1, "", "DimExpression", "Specifies an advanced indexing operation."], [108, 2, 1, "", "Future", "Handle for consuming the result of an asynchronous operation."], [118, 2, 1, "", "FutureLike", "Abstract base class for types representing an asynchronous result."], [119, 2, 1, "", "IndexDomain", "Domain (including bounds and optional dimension labels) of an N-dimensional index space."], [145, 2, 1, "", "IndexTransform", "Represents a transform from an input index space to an output space."], [175, 2, 1, "", "Indexable", "Abstract base class for types that support TensorStore indexing operations."], [176, 2, 1, "", "KvStore", "Key-value store that maps an ordered set of byte string keys to byte string values."], [219, 2, 1, "", "OutputIndexMap", "Represents an output index map for an index transform."], [229, 2, 1, "", "OutputIndexMaps", "View of the output index maps for an index transform."], [233, 2, 1, "", "OutputIndexMethod", "Indicates the output index method of an OutputIndexMap."], [241, 2, 1, "", "Promise", "Handle for producing the result of an asynchronous operation."], [245, 2, 1, "", "Schema", "Driver-independent options for defining a TensorStore schema."], [271, 2, 1, "", "Spec", "Specification for opening or creating a TensorStore."], [299, 2, 1, "", "TensorStore", "Asynchronous multi-dimensional array handle."], [338, 2, 1, "", "Transaction", "Transactions are used to stage a group of modifications (e.g. writes to tensorstore.TensorStore objects) in memory, and then either commit the group all at once or abort it."], [348, 2, 1, "", "Unit", "Specifies a physical quantity/unit."], [360, 2, 1, "", "VirtualChunkedReadParameters", "Options passed to read callbacks used with virtual_chunked."], [363, 2, 1, "", "VirtualChunkedWriteParameters", "Options passed to write callbacks used with virtual_chunked."], [365, 2, 1, "", "WriteFutures", "Handle for consuming the result of an asynchronous write operation."], [375, 7, 1, "", "array", "Returns a TensorStore that reads/writes from an in-memory array."], [376, 8, 1, "", "bfloat16", "bfloat16 floating-point data type."], [377, 8, 1, "", "bool", "Boolean data type (0 or 1).  Corresponds to the python:bool type and numpy.bool_."], [378, 7, 1, "", "cast", "Returns a read/write view as the specified data type."], [379, 8, 1, "", "complex128", "Complex number based on float64.  Corresponds to numpy.complex128."], [380, 8, 1, "", "complex64", "Complex number based on float32.  Corresponds to numpy.complex64."], [381, 2, 1, "", "d", "Specifies a dimension selection, for starting a dimension expression."], [383, 7, 1, "", "downsample(spec)", "Returns a virtual downsampled view view of a Spec."], [384, 7, 1, "", "downsample(store)", "Returns a virtual downsampled view of a TensorStore."], [385, 2, 1, "", "dtype", "TensorStore data type representation."], [393, 8, 1, "", "float16", "IEEE 754 binary16 half-precision floating-point data type.  Correspond to numpy.float16."], [394, 8, 1, "", "float32", "IEEE 754 binary32 single-precision floating-point data type.  Corresponds to numpy.float32."], [395, 8, 1, "", "float64", "IEEE 754 binary64 double-precision floating-point data type.  Corresponds to numpy.float64."], [396, 8, 1, "", "inf", "Special constant equal to 2^{62}-1 that indicates an unbounded index domain."], [397, 8, 1, "", "int16", "16-bit signed two's-complement integer data type.  Corresponds to numpy.int16."], [398, 8, 1, "", "int32", "32-bit signed two's-complement integer data type.  Corresponds to numpy.int32."], [399, 8, 1, "", "int64", "32-bit signed two's-complement integer data type.  Corresponds to numpy.int64."], [400, 8, 1, "", "int8", "8-bit signed two's-complement integer data type.  Corresponds to numpy.int8."], [401, 8, 1, "", "json", "JSON data type.  Corresponds to an arbitrary Python JSON value."], [402, 8, 1, "", "newaxis", "Alias for None used in indexing expressions to specify a new singleton dimension."], [403, 7, 1, "", "open", "Opens or creates a TensorStore from a Spec."], [404, 8, 1, "", "string", "Variable-length byte string data type.  Corresponds to the Python python:bytes type."], [405, 8, 1, "", "uint16", "16-bit unsigned integer.  Corresponds to numpy.uint16."], [406, 8, 1, "", "uint32", "32-bit unsigned integer.  Corresponds to numpy.uint32."], [407, 8, 1, "", "uint64", "64-bit unsigned integer data type.  Corresponds to numpy.uint64."], [408, 8, 1, "", "uint8", "8-bit unsigned integer.  Corresponds to numpy.uint8."], [409, 8, 1, "", "ustring", "Variable-length Unicode string data type.  Corresponds to the Python python:str type."], [410, 7, 1, "", "virtual_chunked", "Creates a TensorStore where the content is read/written chunk-wise by an arbitrary function."]], "tensorstore.ChunkLayout": [[28, 2, 1, "", "Grid", "Describes a regular grid layout for write/read/codec chunks."], [42, 3, 1, "", "__eq__", "Compares two chunk layouts for equality."], [43, 3, 1, "", "__init__(components)", "Constructs from component parts."], [44, 3, 1, "", "__init__(json)", "Constructs from the JSON representation."], [45, 5, 1, "", "codec_chunk", "Chunk grid used by the codec."], [46, 5, 1, "", "grid_origin", "Hard constraints on the grid origin."], [47, 5, 1, "", "grid_origin_soft_constraint", "Soft constraints on the grid origin."], [48, 5, 1, "", "inner_order", "Permutation specifying the element storage order within the innermost chunks."], [49, 5, 1, "", "inner_order_soft_constraint", "Permutation specifying soft constraint on the element storage order."], [50, 5, 1, "", "ndim", "Alias for rank."], [51, 5, 1, "", "rank", "Number of dimensions in the index space."], [52, 5, 1, "", "read_chunk", "Chunk grid for efficient reads."], [53, 5, 1, "", "read_chunk_template", "Chunk offset and shape for efficient reads."], [54, 3, 1, "", "to_json", "Converts to the JSON representation."], [55, 3, 1, "", "update", "Adds additional constraints."], [56, 5, 1, "", "write_chunk", "Chunk grid for efficient writes."], [57, 5, 1, "", "write_chunk_template", "Chunk offset and shape for efficient writes."]], "tensorstore.ChunkLayout.Grid": [[29, 3, 1, "", "__eq__", "Compares two chunk grids for equality."], [30, 3, 1, "", "__init__(components)", "Constructs a chunk grid."], [31, 3, 1, "", "__init__(json)", "Constructs from the JSON representation."], [32, 5, 1, "", "aspect_ratio", "Chunk shape aspect ratio."], [33, 5, 1, "", "aspect_ratio_soft_constraint", "Soft constraints on chunk shape aspect ratio."], [34, 5, 1, "", "elements", "Target number of elements per chunk."], [35, 5, 1, "", "elements_soft_constraint", "Soft constraint on target number of elements per chunk."], [36, 5, 1, "", "ndim", "Alias for rank."], [37, 5, 1, "", "rank", "Number of dimensions, or None if unspecified."], [38, 5, 1, "", "shape", "Hard constraints on chunk shape."], [39, 5, 1, "", "shape_soft_constraint", "Soft constraints on chunk shape."], [40, 3, 1, "", "to_json", "Converts to the JSON representation."], [41, 3, 1, "", "update", "Adds additional constraints."]], "tensorstore.ChunkLayout.Grid.__init__(components)": [[30, 4, 2, "p-aspect_ratio", "aspect_ratio", "Aspect ratio for each dimension.  Corresponds to ChunkLayout/Grid.aspect_ratio."], [30, 4, 2, "p-aspect_ratio_soft_constraint", "aspect_ratio_soft_constraint", "Soft constraints on the aspect ratio for each dimension.  Corresponds to ChunkLayout/Grid.aspect_ratio_soft_constraint."], [30, 4, 2, "p-elements", "elements", "Target number of elements per chunk.  Corresponds to ChunkLayout/Grid.elements."], [30, 4, 2, "p-elements_soft_constraint", "elements_soft_constraint", "Soft constraint on the target number of elements per chunk.  Corresponds to ChunkLayout/Grid.elements_soft_constraint."], [30, 4, 2, "p-grid", "grid", "Other grid constraints to merge in.  Hard and soft constraints in grid are retained as hard and soft constraints, respectively."], [30, 4, 2, "p-grid_soft_constraint", "grid_soft_constraint", "Other grid constraints to merge in as soft constraints."], [30, 4, 2, "p-rank", "rank", "Specifies the number of dimensions."], [30, 4, 2, "p-shape", "shape", "Hard constraints on the chunk size for each dimension.  Corresponds to ChunkLayout/Grid.shape."], [30, 4, 2, "p-shape_soft_constraint", "shape_soft_constraint", "Soft constraints on the chunk size for each dimension.  Corresponds to ChunkLayout/Grid.shape_soft_constraint."]], "tensorstore.ChunkLayout.Grid.update": [[41, 4, 2, "p-aspect_ratio", "aspect_ratio", "Aspect ratio for each dimension.  Corresponds to ChunkLayout/Grid.aspect_ratio."], [41, 4, 2, "p-aspect_ratio_soft_constraint", "aspect_ratio_soft_constraint", "Soft constraints on the aspect ratio for each dimension.  Corresponds to ChunkLayout/Grid.aspect_ratio_soft_constraint."], [41, 4, 2, "p-elements", "elements", "Target number of elements per chunk.  Corresponds to ChunkLayout/Grid.elements."], [41, 4, 2, "p-elements_soft_constraint", "elements_soft_constraint", "Soft constraint on the target number of elements per chunk.  Corresponds to ChunkLayout/Grid.elements_soft_constraint."], [41, 4, 2, "p-grid", "grid", "Other grid constraints to merge in.  Hard and soft constraints in grid are retained as hard and soft constraints, respectively."], [41, 4, 2, "p-grid_soft_constraint", "grid_soft_constraint", "Other grid constraints to merge in as soft constraints."], [41, 4, 2, "p-rank", "rank", "Specifies the number of dimensions."], [41, 4, 2, "p-shape", "shape", "Hard constraints on the chunk size for each dimension.  Corresponds to ChunkLayout/Grid.shape."], [41, 4, 2, "p-shape_soft_constraint", "shape_soft_constraint", "Soft constraints on the chunk size for each dimension.  Corresponds to ChunkLayout/Grid.shape_soft_constraint."]], "tensorstore.ChunkLayout.__init__(components)": [[43, 4, 2, "p-chunk", "chunk", "Common constraints on write, read, and codec chunks.  Corresponds to the JSON ChunkLayout.chunk member.  The shape and elements constraints apply only to write and read chunks, while the aspect_ratio constraints apply to write, read, and codec chunks."], [43, 4, 2, "p-chunk_aspect_ratio", "chunk_aspect_ratio", "Hard constraints on the write, read, and codec chunk aspect ratio.  Corresponds to the JSON aspect_ratio member of ChunkLayout.chunk.  Equivalent to specifying write_chunk_aspect_ratio, read_chunk_aspect_ratio, and codec_chunk_aspect_ratio."], [43, 4, 2, "p-chunk_aspect_ratio_soft_constraint", "chunk_aspect_ratio_soft_constraint", "Soft constraints on the write, read, and codec chunk aspect ratio.  Corresponds to the aspect_ratio_soft_constraint member of ChunkLayout.chunk.  Equivalent to specifying write_chunk_aspect_ratio_soft_constraint, read_chunk_aspect_ratio_soft_constraint, and codec_chunk_aspect_ratio_soft_constraint."], [43, 4, 2, "p-chunk_elements", "chunk_elements", "Hard constraints on the target number of elements for write and read chunks. Corresponds to the JSON elements member of ChunkLayout.chunk.  Equivalent to specifying both write_chunk_elements and read_chunk_elements."], [43, 4, 2, "p-chunk_elements_soft_constraint", "chunk_elements_soft_constraint", "Soft constraints on the target number of elements for write and read chunks. Corresponds to the JSON elements_soft_constraint member of ChunkLayout.chunk.  Equivalent to specifying both write_chunk_elements_soft_constraint and read_chunk_elements_soft_constraint."], [43, 4, 2, "p-chunk_shape", "chunk_shape", "Hard constraints on both the write and read chunk shape.  Corresponds to the JSON shape member of ChunkLayout.chunk.  Equivalent to specifying both write_chunk_shape and read_chunk_shape."], [43, 4, 2, "p-chunk_shape_soft_constraint", "chunk_shape_soft_constraint", "Soft constraints on both the write and read chunk shape.  Corresponds to the JSON shape_soft_constraint member of ChunkLayout.chunk.  Equivalent to specifying both write_chunk_shape_soft_constraint and read_chunk_shape_soft_constraint."], [43, 4, 2, "p-codec_chunk", "codec_chunk", "Constraints on codec chunks.  Corresponds to the JSON ChunkLayout.codec_chunk member."], [43, 4, 2, "p-codec_chunk_aspect_ratio", "codec_chunk_aspect_ratio", "Soft constraints on the codec chunk aspect ratio.  Corresponds to the JSON aspect_ratio member of ChunkLayout.codec_chunk."], [43, 4, 2, "p-codec_chunk_aspect_ratio_soft_constraint", "codec_chunk_aspect_ratio_soft_constraint", "Soft constraints on the codec chunk aspect ratio.  Corresponds to the JSON aspect_ratio_soft_constraint member of ChunkLayout.codec_chunk."], [43, 4, 2, "p-codec_chunk_elements", "codec_chunk_elements", "Hard constraints on the target number of elements for codec chunks.  Corresponds to the JSON elements member of ChunkLayout.codec_chunk."], [43, 4, 2, "p-codec_chunk_elements_soft_constraint", "codec_chunk_elements_soft_constraint", "Soft constraints on the target number of elements for codec chunks.  Corresponds to the JSON elements_soft_constraint member of ChunkLayout.codec_chunk."], [43, 4, 2, "p-codec_chunk_shape", "codec_chunk_shape", "Soft constraints on the codec chunk shape.  Corresponds to the JSON shape member of ChunkLayout.codec_chunk."], [43, 4, 2, "p-codec_chunk_shape_soft_constraint", "codec_chunk_shape_soft_constraint", "Soft constraints on the codec chunk shape.  Corresponds to the JSON shape_soft_constraint member of ChunkLayout.codec_chunk."], [43, 4, 2, "p-finalize", "finalize", "Validates and converts the layout into a precise chunk layout."], [43, 4, 2, "p-grid_origin", "grid_origin", "Hard constraints on the origin of the chunk grid. Corresponds to the JSON ChunkLayout.grid_origin member."], [43, 4, 2, "p-grid_origin_soft_constraint", "grid_origin_soft_constraint", "Soft constraints on the origin of the chunk grid.  Corresponds to the JSON ChunkLayout.grid_origin_soft_constraint member."], [43, 4, 2, "p-inner_order", "inner_order", "Permutation specifying the element storage order within the innermost chunks. Corresponds to the JSON ChunkLayout.inner_order member.  This must be a permutation of [0, 1, ..., rank-1].  Lexicographic order (i.e. C order/row-major order) is specified as [0, 1, ..., rank-1], while colexicographic order (i.e. Fortran order/column-major order) is specified as [rank-1, ..., 1, 0]."], [43, 4, 2, "p-inner_order_soft_constraint", "inner_order_soft_constraint", "Specifies a preferred value for inner_order rather than a hard constraint.  Corresponds to the JSON ChunkLayout.inner_order_soft_constraint member.  If inner_order is also specified, it takes precedence."], [43, 4, 2, "p-rank", "rank", "Specifies the number of dimensions."], [43, 4, 2, "p-read_chunk", "read_chunk", "Constraints on read chunks.  Corresponds to the JSON ChunkLayout.read_chunk member."], [43, 4, 2, "p-read_chunk_aspect_ratio", "read_chunk_aspect_ratio", "Hard constraints on the read chunk aspect ratio.  Corresponds to the JSON aspect_ratio member of ChunkLayout.read_chunk."], [43, 4, 2, "p-read_chunk_aspect_ratio_soft_constraint", "read_chunk_aspect_ratio_soft_constraint", "Soft constraints on the read chunk aspect ratio.  Corresponds to the JSON aspect_ratio_soft_constraint member of ChunkLayout.read_chunk."], [43, 4, 2, "p-read_chunk_elements", "read_chunk_elements", "Hard constraints on the target number of elements for read chunks.  Corresponds to the JSON elements member of ChunkLayout.read_chunk."], [43, 4, 2, "p-read_chunk_elements_soft_constraint", "read_chunk_elements_soft_constraint", "Soft constraints on the target number of elements for read chunks.  Corresponds to the JSON elements_soft_constraint member of ChunkLayout.read_chunk."], [43, 4, 2, "p-read_chunk_shape", "read_chunk_shape", "Hard constraints on the read chunk shape.  Corresponds to the JSON shape member of ChunkLayout.read_chunk."], [43, 4, 2, "p-read_chunk_shape_soft_constraint", "read_chunk_shape_soft_constraint", "Soft constraints on the read chunk shape.  Corresponds to the JSON shape_soft_constraint member of ChunkLayout.read_chunk."], [43, 4, 2, "p-write_chunk", "write_chunk", "Constraints on write chunks.  Corresponds to the JSON ChunkLayout.write_chunk member."], [43, 4, 2, "p-write_chunk_aspect_ratio", "write_chunk_aspect_ratio", "Hard constraints on the write chunk aspect ratio.  Corresponds to the JSON aspect_ratio member of ChunkLayout.write_chunk."], [43, 4, 2, "p-write_chunk_aspect_ratio_soft_constraint", "write_chunk_aspect_ratio_soft_constraint", "Soft constraints on the write chunk aspect ratio.  Corresponds to the JSON aspect_ratio_soft_constraint member of ChunkLayout.write_chunk."], [43, 4, 2, "p-write_chunk_elements", "write_chunk_elements", "Hard constraints on the target number of elements for write chunks.  Corresponds to the JSON elements member of ChunkLayout.write_chunk."], [43, 4, 2, "p-write_chunk_elements_soft_constraint", "write_chunk_elements_soft_constraint", "Soft constraints on the target number of elements for write chunks.  Corresponds to the JSON elements_soft_constraint member of ChunkLayout.write_chunk."], [43, 4, 2, "p-write_chunk_shape", "write_chunk_shape", "Hard constraints on the write chunk shape.  Corresponds to the JSON shape member of ChunkLayout.write_chunk."], [43, 4, 2, "p-write_chunk_shape_soft_constraint", "write_chunk_shape_soft_constraint", "Soft constraints on the write chunk shape.  Corresponds to the JSON shape_soft_constraint member of ChunkLayout.write_chunk."]], "tensorstore.ChunkLayout.update": [[55, 4, 2, "p-chunk", "chunk", "Common constraints on write, read, and codec chunks.  Corresponds to the JSON ChunkLayout.chunk member.  The shape and elements constraints apply only to write and read chunks, while the aspect_ratio constraints apply to write, read, and codec chunks."], [55, 4, 2, "p-chunk_aspect_ratio", "chunk_aspect_ratio", "Hard constraints on the write, read, and codec chunk aspect ratio.  Corresponds to the JSON aspect_ratio member of ChunkLayout.chunk.  Equivalent to specifying write_chunk_aspect_ratio, read_chunk_aspect_ratio, and codec_chunk_aspect_ratio."], [55, 4, 2, "p-chunk_aspect_ratio_soft_constraint", "chunk_aspect_ratio_soft_constraint", "Soft constraints on the write, read, and codec chunk aspect ratio.  Corresponds to the aspect_ratio_soft_constraint member of ChunkLayout.chunk.  Equivalent to specifying write_chunk_aspect_ratio_soft_constraint, read_chunk_aspect_ratio_soft_constraint, and codec_chunk_aspect_ratio_soft_constraint."], [55, 4, 2, "p-chunk_elements", "chunk_elements", "Hard constraints on the target number of elements for write and read chunks. Corresponds to the JSON elements member of ChunkLayout.chunk.  Equivalent to specifying both write_chunk_elements and read_chunk_elements."], [55, 4, 2, "p-chunk_elements_soft_constraint", "chunk_elements_soft_constraint", "Soft constraints on the target number of elements for write and read chunks. Corresponds to the JSON elements_soft_constraint member of ChunkLayout.chunk.  Equivalent to specifying both write_chunk_elements_soft_constraint and read_chunk_elements_soft_constraint."], [55, 4, 2, "p-chunk_shape", "chunk_shape", "Hard constraints on both the write and read chunk shape.  Corresponds to the JSON shape member of ChunkLayout.chunk.  Equivalent to specifying both write_chunk_shape and read_chunk_shape."], [55, 4, 2, "p-chunk_shape_soft_constraint", "chunk_shape_soft_constraint", "Soft constraints on both the write and read chunk shape.  Corresponds to the JSON shape_soft_constraint member of ChunkLayout.chunk.  Equivalent to specifying both write_chunk_shape_soft_constraint and read_chunk_shape_soft_constraint."], [55, 4, 2, "p-codec_chunk", "codec_chunk", "Constraints on codec chunks.  Corresponds to the JSON ChunkLayout.codec_chunk member."], [55, 4, 2, "p-codec_chunk_aspect_ratio", "codec_chunk_aspect_ratio", "Soft constraints on the codec chunk aspect ratio.  Corresponds to the JSON aspect_ratio member of ChunkLayout.codec_chunk."], [55, 4, 2, "p-codec_chunk_aspect_ratio_soft_constraint", "codec_chunk_aspect_ratio_soft_constraint", "Soft constraints on the codec chunk aspect ratio.  Corresponds to the JSON aspect_ratio_soft_constraint member of ChunkLayout.codec_chunk."], [55, 4, 2, "p-codec_chunk_elements", "codec_chunk_elements", "Hard constraints on the target number of elements for codec chunks.  Corresponds to the JSON elements member of ChunkLayout.codec_chunk."], [55, 4, 2, "p-codec_chunk_elements_soft_constraint", "codec_chunk_elements_soft_constraint", "Soft constraints on the target number of elements for codec chunks.  Corresponds to the JSON elements_soft_constraint member of ChunkLayout.codec_chunk."], [55, 4, 2, "p-codec_chunk_shape", "codec_chunk_shape", "Soft constraints on the codec chunk shape.  Corresponds to the JSON shape member of ChunkLayout.codec_chunk."], [55, 4, 2, "p-codec_chunk_shape_soft_constraint", "codec_chunk_shape_soft_constraint", "Soft constraints on the codec chunk shape.  Corresponds to the JSON shape_soft_constraint member of ChunkLayout.codec_chunk."], [55, 4, 2, "p-finalize", "finalize", "Validates and converts the layout into a precise chunk layout."], [55, 4, 2, "p-grid_origin", "grid_origin", "Hard constraints on the origin of the chunk grid. Corresponds to the JSON ChunkLayout.grid_origin member."], [55, 4, 2, "p-grid_origin_soft_constraint", "grid_origin_soft_constraint", "Soft constraints on the origin of the chunk grid.  Corresponds to the JSON ChunkLayout.grid_origin_soft_constraint member."], [55, 4, 2, "p-inner_order", "inner_order", "Permutation specifying the element storage order within the innermost chunks. Corresponds to the JSON ChunkLayout.inner_order member.  This must be a permutation of [0, 1, ..., rank-1].  Lexicographic order (i.e. C order/row-major order) is specified as [0, 1, ..., rank-1], while colexicographic order (i.e. Fortran order/column-major order) is specified as [rank-1, ..., 1, 0]."], [55, 4, 2, "p-inner_order_soft_constraint", "inner_order_soft_constraint", "Specifies a preferred value for inner_order rather than a hard constraint.  Corresponds to the JSON ChunkLayout.inner_order_soft_constraint member.  If inner_order is also specified, it takes precedence."], [55, 4, 2, "p-rank", "rank", "Specifies the number of dimensions."], [55, 4, 2, "p-read_chunk", "read_chunk", "Constraints on read chunks.  Corresponds to the JSON ChunkLayout.read_chunk member."], [55, 4, 2, "p-read_chunk_aspect_ratio", "read_chunk_aspect_ratio", "Hard constraints on the read chunk aspect ratio.  Corresponds to the JSON aspect_ratio member of ChunkLayout.read_chunk."], [55, 4, 2, "p-read_chunk_aspect_ratio_soft_constraint", "read_chunk_aspect_ratio_soft_constraint", "Soft constraints on the read chunk aspect ratio.  Corresponds to the JSON aspect_ratio_soft_constraint member of ChunkLayout.read_chunk."], [55, 4, 2, "p-read_chunk_elements", "read_chunk_elements", "Hard constraints on the target number of elements for read chunks.  Corresponds to the JSON elements member of ChunkLayout.read_chunk."], [55, 4, 2, "p-read_chunk_elements_soft_constraint", "read_chunk_elements_soft_constraint", "Soft constraints on the target number of elements for read chunks.  Corresponds to the JSON elements_soft_constraint member of ChunkLayout.read_chunk."], [55, 4, 2, "p-read_chunk_shape", "read_chunk_shape", "Hard constraints on the read chunk shape.  Corresponds to the JSON shape member of ChunkLayout.read_chunk."], [55, 4, 2, "p-read_chunk_shape_soft_constraint", "read_chunk_shape_soft_constraint", "Soft constraints on the read chunk shape.  Corresponds to the JSON shape_soft_constraint member of ChunkLayout.read_chunk."], [55, 4, 2, "p-write_chunk", "write_chunk", "Constraints on write chunks.  Corresponds to the JSON ChunkLayout.write_chunk member."], [55, 4, 2, "p-write_chunk_aspect_ratio", "write_chunk_aspect_ratio", "Hard constraints on the write chunk aspect ratio.  Corresponds to the JSON aspect_ratio member of ChunkLayout.write_chunk."], [55, 4, 2, "p-write_chunk_aspect_ratio_soft_constraint", "write_chunk_aspect_ratio_soft_constraint", "Soft constraints on the write chunk aspect ratio.  Corresponds to the JSON aspect_ratio_soft_constraint member of ChunkLayout.write_chunk."], [55, 4, 2, "p-write_chunk_elements", "write_chunk_elements", "Hard constraints on the target number of elements for write chunks.  Corresponds to the JSON elements member of ChunkLayout.write_chunk."], [55, 4, 2, "p-write_chunk_elements_soft_constraint", "write_chunk_elements_soft_constraint", "Soft constraints on the target number of elements for write chunks.  Corresponds to the JSON elements_soft_constraint member of ChunkLayout.write_chunk."], [55, 4, 2, "p-write_chunk_shape", "write_chunk_shape", "Hard constraints on the write chunk shape.  Corresponds to the JSON shape member of ChunkLayout.write_chunk."], [55, 4, 2, "p-write_chunk_shape_soft_constraint", "write_chunk_shape_soft_constraint", "Soft constraints on the write chunk shape.  Corresponds to the JSON shape_soft_constraint member of ChunkLayout.write_chunk."]], "tensorstore.CodecSpec": [[59, 3, 1, "", "__init__", "Constructs from the JSON representation."], [60, 3, 1, "", "to_json", "Converts to the JSON representation."]], "tensorstore.Context": [[62, 2, 1, "", "Resource", "Handle to a context resource."], [64, 2, 1, "", "Spec", "Parsed representation of a JSON Context specification."], [67, 3, 1, "", "__getitem__", "Creates or retrieves the context resource for the given key."], [68, 3, 1, "", "__init__(default)", "Constructs a default context."], [69, 3, 1, "", "__init__(json)", "Constructs a context from its JSON representation."], [70, 3, 1, "", "__init__(spec)", "Constructs a context from a parsed spec."], [71, 5, 1, "", "parent", "Parent context from which this context inherits."], [72, 5, 1, "", "spec", "Spec from which this context was constructed."]], "tensorstore.Context.Resource": [[63, 3, 1, "", "to_json", "Returns the JSON representation of the context resource."]], "tensorstore.Context.Spec": [[65, 3, 1, "", "__init__", "Creates a context specification from its JSON representation."], [66, 3, 1, "", "to_json", "Returns the JSON representation."]], "tensorstore.Context.Spec.to_json": [[66, 4, 2, "p-include_defaults", "include_defaults", "Indicates whether to include members even if they are equal to the default value."]], "tensorstore.Context.__getitem__": [[67, 4, 2, "p-key", "key", "Resource key, of the form '<resource-type>' or <resource-type>#<id>."]], "tensorstore.Context.__init__(json)": [[69, 4, 2, "p-json", "json", "JSON representation of the context."], [69, 4, 2, "p-parent", "parent", "Parent context from which to inherit.  Defaults to a new default context as returned by tensorstore.Context()."]], "tensorstore.Context.__init__(spec)": [[70, 4, 2, "p-parent", "parent", "Parent context from which to inherit.  Defaults to a new default context as returned by tensorstore.Context()."], [70, 4, 2, "p-spec", "spec", "Parsed context spec."]], "tensorstore.Dim": [[74, 3, 1, "", "__contains__(dim)", "Checks if the interval contains another interval."], [75, 3, 1, "", "__contains__(index)", "Checks if the interval contains a given index."], [76, 3, 1, "", "__eq__", "Compares for equality with another interval."], [77, 3, 1, "", "__init__(exclusive_max)", "Constructs a half-open interval [inclusive_min, exclusive_max)."], [78, 3, 1, "", "__init__(inclusive_max)", "Constructs a closed interval [inclusive_min, inclusive_max]."], [79, 3, 1, "", "__init__(size)", "Constructs a sized interval [inclusive_min, inclusive_min+size)."], [80, 3, 1, "", "__init__(unbounded)", "Constructs an unbounded interval (-inf, +inf)."], [81, 3, 1, "", "__iter__", "Enables iteration over the indices contained in the interval."], [82, 3, 1, "", "__len__", "Size of the interval, equivalent to size."], [83, 3, 1, "", "__repr__", "Returns the string representation as a Python expression."], [84, 3, 1, "", "__str__", "Returns the string representation of the interval."], [85, 5, 1, "", "empty", "Returns True if size is zero."], [86, 5, 1, "", "exclusive_max", "Exclusive upper bound of the interval."], [87, 5, 1, "", "exclusive_min", "Exclusive lower bound of the interval."], [88, 5, 1, "", "finite", "Indicates if the interval is finite."], [89, 3, 1, "", "hull", "Hull with another Dim."], [90, 5, 1, "", "implicit_lower", "Indicates if the lower bound is implicit/resizeable."], [91, 5, 1, "", "implicit_upper", "Indicates if the upper bound is implicit/resizeable."], [92, 5, 1, "", "inclusive_max", "Inclusive upper bound of the interval."], [93, 5, 1, "", "inclusive_min", "Inclusive lower bound of the interval."], [94, 3, 1, "", "intersect", "Intersect with another Dim."], [95, 5, 1, "", "label", "Dimension label, or the empty string to indicate an unlabeled dimension."], [96, 5, 1, "", "size", "Size of the interval."]], "tensorstore.Dim.__init__(exclusive_max)": [[77, 4, 2, "p-exclusive_max", "exclusive_max", "Exclusive upper bound."], [77, 4, 2, "p-implicit_lower", "implicit_lower", "Indicates whether the lower bound is implicit.  Defaults to False if inclusive_min is specified, otherwise True."], [77, 4, 2, "p-implicit_upper", "implicit_upper", "Indicates whether the upper bound is implicit.  Defaults to False if exclusive_max is specified, otherwise True."], [77, 4, 2, "p-inclusive_min", "inclusive_min", "Inclusive lower bound."], [77, 4, 2, "p-label", "label", "Dimension label."]], "tensorstore.Dim.__init__(inclusive_max)": [[78, 4, 2, "p-implicit_lower", "implicit_lower", "Indicates whether the lower bound is implicit.  Defaults to False if inclusive_min is specified, otherwise True."], [78, 4, 2, "p-implicit_upper", "implicit_upper", "Indicates whether the upper bound is implicit.  Defaults to False if exclusive_max is specified, otherwise True."], [78, 4, 2, "p-inclusive_max", "inclusive_max", "Inclusive upper bound."], [78, 4, 2, "p-inclusive_min", "inclusive_min", "Inclusive lower bound."], [78, 4, 2, "p-label", "label", "Dimension label."]], "tensorstore.Dim.__init__(size)": [[79, 4, 2, "p-implicit_lower", "implicit_lower", "Indicates whether the lower bound is implicit."], [79, 4, 2, "p-implicit_upper", "implicit_upper", "Indicates whether the upper bound is implicit.  Defaults to False if size is specified, otherwise True."], [79, 4, 2, "p-inclusive_min", "inclusive_min", "Inclusive lower bound.  Defaults to 0."], [79, 4, 2, "p-label", "label", "Dimension label."], [79, 4, 2, "p-size", "size", "Size of the interval."]], "tensorstore.Dim.__init__(unbounded)": [[80, 4, 2, "p-implicit_lower", "implicit_lower", "Indicates whether the lower bound is implicit."], [80, 4, 2, "p-implicit_upper", "implicit_upper", "Indicates whether the upper bound is implicit."], [80, 4, 2, "p-label", "label", "Dimension label."]], "tensorstore.Dim.hull": [[89, 4, 2, "p-other", "other", "Object to hull with."]], "tensorstore.Dim.intersect": [[94, 4, 2, "p-other", "other", "Object to intersect with."]], "tensorstore.DimExpression": [[98, 3, 1, "", "__getitem__", "Applies a NumPy-style indexing operation with default index array semantics."], [99, 5, 1, "", "diagonal", "Extracts the diagonal of the selected dimensions."], [100, 3, 1, "", "label", "Sets (or changes) the labels of the selected dimensions."], [101, 3, 1, "", "oindex", "Applies a NumPy-style indexing operation with outer indexing semantics."], [102, 3, 1, "", "stride", "Strides the domains of the selected input dimensions by the specified amounts."], [103, 3, 1, "", "translate_backward_by", "Translates (shifts) the domains of the selected input dimensions backward by the specified offsets, without affecting the output range."], [104, 3, 1, "", "translate_by", "Translates (shifts) the domains of the selected input dimensions by the specified offsets, without affecting the output range."], [105, 3, 1, "", "translate_to", "Translates the domains of the selected input dimensions to the specified origins without affecting the output range."], [106, 3, 1, "", "transpose", "Transposes the selected dimensions to the specified target indices."], [107, 3, 1, "", "vindex", "Applies a NumPy-style indexing operation with vectorized indexing semantics."]], "tensorstore.DimExpression.label": [[100, 4, 2, "p-labels", "labels", "Dimension labels for each selected dimension."]], "tensorstore.DimExpression.stride": [[102, 4, 2, "p-strides", "strides", "Strides for each selected dimension.  May also be a scalar, e.g. 2, in which case the same stride value is used for all selected dimensions.  Specifying None for a given dimension (equivalent to specifying a stride of 1) leaves that dimension unchanged.  Specify a stride of 0 is not valid."]], "tensorstore.DimExpression.translate_backward_by": [[103, 4, 2, "p-offsets", "offsets", "The offsets for each of the selected dimensions.  May also be a scalar, e.g. 5, in which case the same offset is used for all selected dimensions.  Specifying None for a given dimension (equivalent to specifying an offset of 0) leaves the origin of that dimension unchanged."]], "tensorstore.DimExpression.translate_by": [[104, 4, 2, "p-offsets", "offsets", "The offsets for each of the selected dimensions.  May also be a scalar, e.g. 5, in which case the same offset is used for all selected dimensions.  Specifying None for a given dimension (equivalent to specifying an offset of 0) leaves the origin of that dimension unchanged."]], "tensorstore.DimExpression.translate_to": [[105, 4, 2, "p-origins", "origins", "The new origins for each of the selected dimensions.  May also be a scalar, e.g. 5, in which case the same origin is used for all selected dimensions.  If None is specified for a given dimension, the origin of that dimension remains unchanged."]], "tensorstore.DimExpression.transpose": [[106, 4, 2, "p-target", "target", "Target dimension indices for the selected dimensions.  All dimensions must be specified by index.  Labels are not permitted.  If the dimension selection has k > 1 dimensions, a single non-negative index i is equivalent to i:i+k; a single negative index -i is equivalent to -i-k:-i."]], "tensorstore.Future": [[109, 3, 1, "", "__new__", "Converts a FutureLike object to a Future."], [110, 3, 1, "", "add_done_callback", "Registers a callback to be invoked upon completion of the asynchronous operation."], [111, 3, 1, "", "cancel", "Requests cancellation of the asynchronous operation."], [112, 3, 1, "", "cancelled", "Queries whether the asynchronous operation has been cancelled."], [113, 3, 1, "", "done", "Queries whether the asynchronous operation has completed or been cancelled."], [114, 3, 1, "", "exception", "Blocks until asynchronous operation completes, and returns the error if any."], [115, 3, 1, "", "force", "Ensures the asynchronous operation begins executing."], [116, 3, 1, "", "remove_done_callback", "Unregisters a previously-registered callback."], [117, 3, 1, "", "result", "Blocks until the asynchronous operation completes, and returns the result."]], "tensorstore.Future.__new__": [[109, 4, 2, "p-future", "future", "Specifies the immediate or asynchronous result."], [109, 4, 2, "p-loop", "loop", "Event loop on which to run future if it is a coroutine.  If not specified (or None is specified), defaults to the loop returned by asyncio.get_running_loop.  If loop is not specified and there is no running event loop, it is an error for future to be a coroutine."]], "tensorstore.Future.exception": [[114, 4, 2, "p-deadline", "deadline", "Deadline in seconds since the Unix epoch."], [114, 4, 2, "p-timeout", "timeout", "Maximum number of seconds to block."]], "tensorstore.Future.result": [[117, 4, 2, "p-deadline", "deadline", "Deadline in seconds since the Unix epoch."], [117, 4, 2, "p-timeout", "timeout", "Maximum number of seconds to block."]], "tensorstore.IndexDomain": [[120, 3, 1, "", "__getitem__(domain)", "Slices this domain by another domain."], [121, 3, 1, "", "__getitem__(expr)", "Transforms the domain by a dimension expression."], [122, 3, 1, "", "__getitem__(identifier)", "Returns the single dimension specified by identifier."], [123, 3, 1, "", "__getitem__(selection)", "Returns a new domain with a subset of the dimensions."], [124, 3, 1, "", "__getitem__(transform)", "Transforms the domain using an explicit index transform."], [125, 3, 1, "", "__init__(components)", "Constructs an index domain from component vectors."], [126, 3, 1, "", "__init__(dimensions)", "Constructs an index domain from a :py:class`.Dim` sequence."], [127, 3, 1, "", "__init__(json)", "Constructs an index domain from its JSON representation."], [128, 3, 1, "", "__len__", "Returns the number of dimensions (rank)."], [129, 3, 1, "", "__repr__", "Returns the string representation."], [130, 5, 1, "", "exclusive_max", "Exclusive upper bound of the domain."], [131, 3, 1, "", "hull", "Computes the hull (minimum containing box) with another domain."], [132, 5, 1, "", "implicit_lower_bounds", "Indicates whether the lower bound of each dimension is implicit or explicit."], [133, 5, 1, "", "implicit_upper_bounds", "Indicates whether the upper bound of each dimension is implicit or explicit."], [134, 5, 1, "", "inclusive_max", "Inclusive upper bound of the domain."], [135, 5, 1, "", "inclusive_min", "Inclusive lower bound of the domain, alias of origin."], [136, 5, 1, "", "index_exp", "Equivalent NumPy-compatible index expression."], [137, 3, 1, "", "intersect", "Intersects with another domain."], [138, 5, 1, "", "labels", "Dimension labels for each dimension."], [139, 5, 1, "", "ndim", "Alias for rank."], [140, 5, 1, "", "origin", "Inclusive lower bound of the domain."], [141, 5, 1, "", "rank", "Number of dimensions in the index space."], [142, 5, 1, "", "shape", "Shape of the domain."], [143, 5, 1, "", "size", "Total number of elements in the domain."], [144, 3, 1, "", "to_json", "Returns the JSON representation."]], "tensorstore.IndexDomain.__getitem__(expr)": [[121, 4, 2, "p-expr", "expr", "Dimension expression to apply."]], "tensorstore.IndexDomain.__getitem__(identifier)": [[122, 4, 2, "p-identifier", "identifier", "Specifies a dimension by integer index or label.  As with python:list, a negative index specifies a dimension starting from the last dimension."]], "tensorstore.IndexDomain.__getitem__(selection)": [[123, 4, 2, "p-selection", "selection", "Specifies the dimensions to include, either by index or label.  May be any value or sequence of values convertible to a dimension selection."]], "tensorstore.IndexDomain.__getitem__(transform)": [[124, 4, 2, "p-transform", "transform", "Index transform, transform.output_rank must equal self.rank."]], "tensorstore.IndexDomain.__init__(components)": [[125, 4, 2, "p-exclusive_max", "exclusive_max", "Exclusive upper bounds for each dimension.  At most one of exclusive_max, inclusive_max, and shape may be specified."], [125, 4, 2, "p-implicit_lower_bounds", "implicit_lower_bounds", "Indicates whether each lower bound is implicit or explicit.  Defaults to all explicit if inclusive_min or shape is specified, otherwise defaults to all implicit."], [125, 4, 2, "p-implicit_upper_bounds", "implicit_upper_bounds", "Indicates whether each upper bound is implicit or explicit.  Defaults to all explicit if exclusive_max, inclusive_max, or shape is specified, otherwise defaults to all implicit."], [125, 4, 2, "p-inclusive_max", "inclusive_max", "Inclusive upper bounds for each dimension."], [125, 4, 2, "p-inclusive_min", "inclusive_min", "Inclusive lower bounds for each dimension.  If not specified, defaults to all zero if shape is specified, otherwise unbounded."], [125, 4, 2, "p-labels", "labels", "Dimension labels.  Defaults to all unlabeled."], [125, 4, 2, "p-rank", "rank", "Number of dimensions.  Only required if no other parameter is specified."], [125, 4, 2, "p-shape", "shape", "Size for each dimension."]], "tensorstore.IndexDomain.__init__(dimensions)": [[126, 4, 2, "p-dimensions", "dimensions", "Sequence of :py:class`.Dim` objects."]], "tensorstore.IndexDomain.hull": [[131, 4, 2, "p-other", "other", "Object to hull with."]], "tensorstore.IndexDomain.intersect": [[137, 4, 2, "p-other", "other", "Object to intersect with."]], "tensorstore.IndexTransform": [[146, 5, 1, "", "T", "View with transposed domain (reversed dimension order)."], [147, 3, 1, "", "__call__", "Maps an input index vector to an output index vector."], [148, 3, 1, "", "__getitem__(domain)", "Slices this index transform by another domain."], [149, 3, 1, "", "__getitem__(expr)", "Applies a dimension expression to this transform."], [150, 3, 1, "", "__getitem__(indices)", "Applies a NumPy-style indexing operation with default index array semantics."], [151, 3, 1, "", "__getitem__(transform)", "Composes this index transform with another index transform."], [152, 3, 1, "", "__init__(components)", "Constructs an index transform from component vectors."], [153, 3, 1, "", "__init__(domain)", "Constructs an index transform from a domain and output index maps."], [154, 3, 1, "", "__init__(json)", "Constructs an index transform from its JSON representation."], [155, 3, 1, "", "__repr__", "Returns the string representation."], [156, 5, 1, "", "domain", "Input domain of the index transform."], [157, 5, 1, "", "implicit_lower_bounds", "Indicates whether the lower bound of each input dimension is implicit or explicit."], [158, 5, 1, "", "implicit_upper_bounds", "Indicates whether the upper bound of each input dimension is implicit or explicit."], [159, 5, 1, "", "input_exclusive_max", "Exclusive upper bound of the input domain."], [160, 5, 1, "", "input_inclusive_max", "Inclusive upper bound of the input domain."], [161, 5, 1, "", "input_inclusive_min", "Inclusive lower bound of the input domain, alias for input_origin."], [162, 5, 1, "", "input_labels", "Dimension labels for each input dimension."], [163, 5, 1, "", "input_origin", "Inclusive lower bound of the input domain."], [164, 5, 1, "", "input_rank", "Rank of the input space."], [165, 5, 1, "", "input_shape", "Shape of the input domain."], [166, 5, 1, "", "ndim", "Rank of the input space, alias for input_rank."], [167, 3, 1, "", "oindex", "Applies a NumPy-style indexing operation with outer indexing semantics."], [168, 5, 1, "", "origin", "Inclusive lower bound of the domain."], [169, 5, 1, "", "output", "Output index maps."], [170, 5, 1, "", "output_rank", "Rank of the output space."], [171, 5, 1, "", "shape", "Shape of the domain."], [172, 5, 1, "", "size", "Total number of elements in the domain."], [173, 3, 1, "", "to_json", "Returns the JSON representation of the transform."], [174, 3, 1, "", "vindex", "Applies a NumPy-style indexing operation with vectorized indexing semantics."]], "tensorstore.IndexTransform.__call__": [[147, 4, 2, "p-indices", "indices", "Input vector of length input_rank."]], "tensorstore.IndexTransform.__init__(components)": [[152, 4, 2, "p-implicit_lower_bounds", "implicit_lower_bounds", "Indicates whether each lower bound is implicit or explicit.  Defaults to all explicit if input_inclusive_min or input_shape is specified, otherwise defaults to all implicit."], [152, 4, 2, "p-implicit_upper_bounds", "implicit_upper_bounds", "Indicates whether each upper bound is implicit or explicit.  Defaults to all explicit if input_exclusive_max, input_inclusive_max, or shape is specified, otherwise defaults to all implicit."], [152, 4, 2, "p-input_exclusive_max", "input_exclusive_max", "Exclusive upper bounds for each input dimension.  At most one of input_exclusive_max, input_inclusive_max, and input_shape may be specified."], [152, 4, 2, "p-input_inclusive_max", "input_inclusive_max", "Inclusive upper bounds for each input dimension."], [152, 4, 2, "p-input_inclusive_min", "input_inclusive_min", "Inclusive lower bounds for each input dimension.  If not specified, defaults to all zero if input_shape is specified, otherwise unbounded."], [152, 4, 2, "p-input_labels", "input_labels", "Dimension labels for each input dimension.  Defaults to all unlabeled."], [152, 4, 2, "p-input_rank", "input_rank", "Number of input dimensions.  Only required if the input rank is not otherwise specified."], [152, 4, 2, "p-input_shape", "input_shape", "Size for each input dimension."], [152, 4, 2, "p-output", "output", "Sequence of output index maps, or OutputIndexMaps object from an existing transform.  If not specified, constructs an identity transform over the domain."]], "tensorstore.IndexTransform.__init__(domain)": [[153, 4, 2, "p-domain", "domain", "The domain of the index transform."], [153, 4, 2, "p-output", "output", "Sequence of output index maps, or OutputIndexMaps object from an existing transform.  If not specified, constructs an identity transform over the domain."]], "tensorstore.KvStore": [[177, 2, 1, "", "KeyRange", "Half-open interval of byte string keys, according to lexicographical order."], [184, 2, 1, "", "ReadResult", "Specifies the result of a read operation."], [189, 2, 1, "", "Spec", "Parsed representation of a JSON key-value store specification."], [199, 2, 1, "", "TimestampedStorageGeneration", "Specifies a storage generation identifier and a timestamp."], [204, 3, 1, "", "__delitem__", "Synchronously deletes a single key."], [205, 3, 1, "", "__getitem__", "Synchronously reads the value of a single key."], [206, 3, 1, "", "__repr__", "Returns a string representation based on the  JSON representation."], [207, 3, 1, "", "__setitem__", "Synchronously writes the value of a single key."], [208, 3, 1, "", "copy", "Returns a copy of the key-value store."], [209, 3, 1, "", "delete_range", "Deletes a key range."], [210, 3, 1, "", "list", "Lists the keys in the key-value store."], [211, 3, 1, "", "open", "Opens a key-value store."], [212, 5, 1, "", "path", "Path prefix within the base key-value store."], [213, 3, 1, "", "read", "Reads the value of a single key."], [214, 3, 1, "", "spec", "Spec that may be used to re-open or re-create the key-value store."], [215, 5, 1, "", "transaction", "Transaction bound to this key-value store."], [216, 5, 1, "", "url", "URL representation of the key-value store specification."], [217, 3, 1, "", "with_transaction", "Returns a transaction-bound view of this key-value store."], [218, 3, 1, "", "write", "Writes or deletes a single key."]], "tensorstore.KvStore.KeyRange": [[178, 3, 1, "", "__eq__", "Compares with another range for equality."], [179, 3, 1, "", "__init__", "Constructs a key range from the specified half-open bounds."], [180, 3, 1, "", "copy", "Returns a copy of the range."], [181, 5, 1, "", "empty", "Indicates if the range contains no keys."], [182, 5, 1, "", "exclusive_max", "Exclusive upper bound of the range."], [183, 5, 1, "", "inclusive_min", "Inclusive lower bound of the range."]], "tensorstore.KvStore.KeyRange.__init__": [[179, 4, 2, "p-exclusive_max", "exclusive_max", "Exclusive upper bound of the range.  As a special case, an empty string indicates no upper bound."], [179, 4, 2, "p-inclusive_min", "inclusive_min", "Inclusive lower bound of the range.  In accordance with the usual lexicographical order, an empty string indicates no lower bound."]], "tensorstore.KvStore.ReadResult": [[185, 3, 1, "", "__init__", "Constructs a read result."], [186, 5, 1, "", "stamp", "Generation and timestamp associated with the value."], [187, 5, 1, "", "state", "Indicates the interpretation of value."], [188, 5, 1, "", "value", "Value associated with the key."]], "tensorstore.KvStore.Spec": [[190, 3, 1, "", "__add__", "Returns a key-value store with the suffix appended to the path."], [191, 3, 1, "", "__new__", "Constructs from the JSON representation or a URL."], [192, 3, 1, "", "__repr__", "Returns a string representation based on the  JSON representation."], [193, 3, 1, "", "__truediv__", "Returns a key-value store with an additional path component joined to the path."], [194, 3, 1, "", "copy", "Returns a copy of the key-value store spec."], [195, 5, 1, "", "path", "Path prefix within the base key-value store."], [196, 3, 1, "", "to_json", "Converts to the JSON representation."], [197, 3, 1, "", "update", "Modifies a spec."], [198, 5, 1, "", "url", "URL representation of the key-value store specification."]], "tensorstore.KvStore.Spec.update": [[197, 4, 2, "p-context", "context", "Bind any context resource specs using the specified shared resource context."], [197, 4, 2, "p-strip_context", "strip_context", "Replace any bound context resources and unbound context resource specs by default context resource specs."], [197, 4, 2, "p-unbind_context", "unbind_context", "Convert any bound context resources to context resource specs that fully capture the graph of shared context resources and interdependencies."]], "tensorstore.KvStore.TimestampedStorageGeneration": [[200, 3, 1, "", "__eq__", "Compares two timestamped storage generations for equality."], [201, 3, 1, "", "__init__", "Constructs from a storage generation and time."], [202, 5, 1, "", "generation", "Identifies a specific version of a key-value store entry."], [203, 5, 1, "", "time", "Time (seconds since Unix epoch) at which generation is valid."]], "tensorstore.KvStore.__delitem__": [[204, 4, 2, "p-key", "key", "Key to delete.  This is appended (without any separator) to the existing path, if any."]], "tensorstore.KvStore.__getitem__": [[205, 4, 2, "p-key", "key", "The key to read.  This is appended (without any separator) to the existing path, if any."]], "tensorstore.KvStore.__setitem__": [[207, 4, 2, "p-key", "key", "Key to write/delete.  This is appended (without any separator) to the existing path, if any."], [207, 4, 2, "p-value", "value", "Value to store, or None to delete."]], "tensorstore.KvStore.delete_range": [[209, 4, 2, "p-range", "range", "Key range to delete.  This is relative to the existing path, if any."]], "tensorstore.KvStore.list": [[210, 4, 2, "p-range", "range", "If specified, restricts to the specified key range."], [210, 4, 2, "p-strip_prefix_length", "strip_prefix_length", "Strips the specified number of bytes from the start of the returned keys."]], "tensorstore.KvStore.open": [[211, 4, 2, "p-context", "context", "Bind any context resource specs using the specified shared resource context."], [211, 4, 2, "p-spec", "spec", "Key-value store spec to open.  May also be specified as JSON or a URL."], [211, 4, 2, "p-transaction", "transaction", "Transaction to use for read/write operations.  By default, operations are non-transactional."]], "tensorstore.KvStore.read": [[213, 4, 2, "p-if_not_equal", "if_not_equal", "If specified, the read is aborted if the generation associated with key matches if_not_equal.  An aborted read due to this condition is indicated by a ReadResult.state of 'unspecified'.  This may be useful for validating a cached value cache validation at a higher level."], [213, 4, 2, "p-key", "key", "The key to read.  This is appended (without any separator) to the existing path, if any."], [213, 4, 2, "p-staleness_bound", "staleness_bound", "Specifies a time in (fractional) seconds since the Unix epoch.  If specified, data that is cached internally by the kvstore implementation may be used without validation if not older than the staleness_bound.  Cached data older than staleness_bound must be validated before being returned.  A value of float('inf') indicates that the result must be current as of the time the read request was made, i.e. it is equivalent to specifying a value of time.time().  A value of float('-inf') indicates that cached data may be returned without validation irrespective of its age."]], "tensorstore.KvStore.spec": [[214, 4, 2, "p-retain_context", "retain_context", "Retain all bound context resources (e.g. specific concurrency pools, specific cache pools)."], [214, 4, 2, "p-unbind_context", "unbind_context", "Convert any bound context resources to context resource specs that fully capture the graph of shared context resources and interdependencies."]], "tensorstore.KvStore.write": [[218, 4, 2, "p-if_equal", "if_equal", "If specified, indicates a conditional write operation.  The write is performed only if the existing generation associated with key matches if_equal."], [218, 4, 2, "p-key", "key", "Key to write/delete.  This is appended (without any separator) to the existing path, if any."], [218, 4, 2, "p-value", "value", "Value to store, or None to delete."]], "tensorstore.OutputIndexMap": [[220, 3, 1, "", "__init__(constant)", "Constructs a constant map."], [221, 3, 1, "", "__init__(index_array)", "Constructs an index array map."], [222, 3, 1, "", "__init__(input_dimension)", "Constructs a single input dimension map."], [223, 5, 1, "", "index_array", ""], [224, 5, 1, "", "index_range", ""], [225, 5, 1, "", "input_dimension", ""], [226, 5, 1, "", "method", ""], [227, 5, 1, "", "offset", ""], [228, 5, 1, "", "stride", ""]], "tensorstore.OutputIndexMaps": [[230, 3, 1, "", "__getitem__", ""], [231, 3, 1, "", "__len__", "Returns the output rank."], [232, 5, 1, "", "rank", "Returns the output rank."]], "tensorstore.OutputIndexMethod": [[234, 3, 1, "", "__init__", ""], [235, 3, 1, "", "__str__", "name(self: handle) -> str"], [236, 6, 1, "", "array", ""], [237, 6, 1, "", "constant", ""], [238, 5, 1, "", "name", ""], [239, 6, 1, "", "single_input_dimension", ""], [240, 5, 1, "", "value", ""]], "tensorstore.Promise": [[242, 3, 1, "", "new", "Creates a linked promise and future pair."], [243, 3, 1, "", "set_exception", "Marks the linked future as unsuccessfully completed with the specified error."], [244, 3, 1, "", "set_result", "Marks the linked future as successfully completed with the specified result."]], "tensorstore.Schema": [[246, 5, 1, "", "T", "View with transposed domain (reversed dimension order)."], [247, 3, 1, "", "__eq__", "Compares with another Schema for equality based on the JSON representation."], [248, 3, 1, "", "__getitem__(domain)", "Transforms the schema using an explicit index domain."], [249, 3, 1, "", "__getitem__(expr)", "Transforms the schema using a dimension expression."], [250, 3, 1, "", "__getitem__(indices)", "Transforms the schema using NumPy-style indexing with default index array semantics."], [251, 3, 1, "", "__getitem__(transform)", "Transforms the schema using an explicit index transform."], [252, 3, 1, "", "__init__(components)", "Constructs from component parts."], [253, 3, 1, "", "__init__(json)", "Constructs from its JSON representation."], [254, 3, 1, "", "__repr__", "Returns a string representation based on the  JSON representation."], [255, 5, 1, "", "chunk_layout", "Chunk layout constraints specified by the schema."], [256, 5, 1, "", "codec", "Codec constraints specified by the schema."], [257, 3, 1, "", "copy", "Returns a copy of the schema."], [258, 5, 1, "", "dimension_units", "Physical units of each dimension of the domain."], [259, 5, 1, "", "domain", "Domain of the schema, or None if unspecified."], [260, 5, 1, "", "dtype", "Data type, or None if unspecified."], [261, 5, 1, "", "fill_value", "Fill value specified by the schema."], [262, 5, 1, "", "ndim", "Alias for rank."], [263, 3, 1, "", "oindex", "Transforms the schema using NumPy-style indexing with outer indexing semantics."], [264, 5, 1, "", "origin", "Inclusive lower bound of the domain."], [265, 5, 1, "", "rank", "Rank of the schema, or None if unspecified."], [266, 5, 1, "", "shape", "Shape of the domain."], [267, 5, 1, "", "size", "Total number of elements in the domain."], [268, 3, 1, "", "to_json", "Converts to the JSON representation."], [269, 3, 1, "", "update", "Adds additional constraints."], [270, 3, 1, "", "vindex", "Transforms the schema using NumPy-style indexing with vectorized indexing semantics."]], "tensorstore.Schema.__getitem__(domain)": [[248, 4, 2, "p-domain", "domain", "Index domain, must have dimension labels that can be aligned to self.domain."]], "tensorstore.Schema.__getitem__(transform)": [[251, 4, 2, "p-transform", "transform", "Index transform, transform.output_rank must equal self.rank."]], "tensorstore.Schema.__init__(components)": [[252, 4, 2, "p-chunk_layout", "chunk_layout", "Constrains the chunk layout.  If there is an existing chunk layout constraint, the constraints are merged.  If the constraints are incompatible, an error is raised."], [252, 4, 2, "p-codec", "codec", "Constrains the codec.  If there is an existing codec constraint, the constraints are merged.  If the constraints are incompatible, an error is raised."], [252, 4, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [252, 4, 2, "p-domain", "domain", "Constrains the domain of the TensorStore.  If there is an existing domain, the specified domain is merged with it as follows:"], [252, 4, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore.  If a data type has already been set, it is an error to specify a different data type."], [252, 4, 2, "p-fill_value", "fill_value", "Specifies the fill value for positions that have not been written."], [252, 4, 2, "p-rank", "rank", "Constrains the rank of the TensorStore.  If there is an index transform, the rank constraint must match the rank of the input space."], [252, 4, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [252, 4, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore.  Equivalent to specifying a domain of ts.IndexDomain(shape=shape)."]], "tensorstore.Schema.update": [[269, 4, 2, "p-chunk_layout", "chunk_layout", "Constrains the chunk layout.  If there is an existing chunk layout constraint, the constraints are merged.  If the constraints are incompatible, an error is raised."], [269, 4, 2, "p-codec", "codec", "Constrains the codec.  If there is an existing codec constraint, the constraints are merged.  If the constraints are incompatible, an error is raised."], [269, 4, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [269, 4, 2, "p-domain", "domain", "Constrains the domain of the TensorStore.  If there is an existing domain, the specified domain is merged with it as follows:"], [269, 4, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore.  If a data type has already been set, it is an error to specify a different data type."], [269, 4, 2, "p-fill_value", "fill_value", "Specifies the fill value for positions that have not been written."], [269, 4, 2, "p-rank", "rank", "Constrains the rank of the TensorStore.  If there is an index transform, the rank constraint must match the rank of the input space."], [269, 4, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [269, 4, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore.  Equivalent to specifying a domain of ts.IndexDomain(shape=shape)."]], "tensorstore.Spec": [[272, 5, 1, "", "T", "View with transposed domain (reversed dimension order)."], [273, 3, 1, "", "__eq__", "Compares with another Spec for equality based on the JSON representation."], [274, 3, 1, "", "__getitem__(domain)", "Transforms the spec using an explicit index domain."], [275, 3, 1, "", "__getitem__(expr)", "Transforms the spec using a dimension expression."], [276, 3, 1, "", "__getitem__(indices)", "Transforms the spec using NumPy-style indexing with default index array semantics."], [277, 3, 1, "", "__getitem__(transform)", "Transforms the spec using an explicit index transform."], [278, 3, 1, "", "__new__", "Constructs from the JSON representation."], [279, 3, 1, "", "__repr__", "Returns a string representation based on the JSON representation."], [280, 5, 1, "", "chunk_layout", "Effective chunk layout, including any constraints implied by driver-specific options."], [281, 5, 1, "", "codec", "Effective codec, including any constraints implied by driver-specific options."], [282, 3, 1, "", "copy", "Returns a copy of the spec."], [283, 5, 1, "", "dimension_units", "Effective physical units of each dimension of the domain, including any constraints implied by driver-specific options."], [284, 5, 1, "", "domain", "Effective index domain, including any constraints implied by driver-specific options."], [285, 5, 1, "", "dtype", "Data type, or None if unspecified."], [286, 5, 1, "", "fill_value", "Effective fill value, including any constraints implied by driver-specific options."], [287, 5, 1, "", "kvstore", "Spec of the associated key-value store used as the underlying storage."], [288, 5, 1, "", "ndim", "Alias for rank."], [289, 3, 1, "", "oindex", "Transforms the spec using NumPy-style indexing with outer indexing semantics."], [290, 5, 1, "", "origin", "Inclusive lower bound of the domain."], [291, 5, 1, "", "rank", "Returns the rank of the domain, or None if unspecified."], [292, 5, 1, "", "schema", "Effective schema, including any constraints implied by driver-specific options."], [293, 5, 1, "", "shape", "Shape of the domain."], [294, 5, 1, "", "size", "Total number of elements in the domain."], [295, 3, 1, "", "to_json", "Converts to the JSON representation."], [296, 5, 1, "", "transform", "The index transform, or None if unspecified."], [297, 3, 1, "", "update", "Adds additional constraints or changes the open mode."], [298, 3, 1, "", "vindex", "Transforms the spec using NumPy-style indexing with vectorized indexing semantics."]], "tensorstore.Spec.__getitem__(domain)": [[274, 4, 2, "p-domain", "domain", "Index domain, must have dimension labels that can be aligned to self.domain."]], "tensorstore.Spec.__getitem__(transform)": [[277, 4, 2, "p-transform", "transform", "Index transform, transform.output_rank must equal self.rank."]], "tensorstore.Spec.update": [[297, 4, 2, "p-assume_metadata", "assume_metadata", "Skip reading the metadata if possible.  Instead, just assume any necessary metadata based on constraints in the spec, using the same defaults for any unspecified metadata as when creating a new TensorStore.  Overrides the existing open mode.  Requires that open is True and delete_existing is False."], [297, 4, 2, "p-chunk_layout", "chunk_layout", "Constrains the chunk layout.  If there is an existing chunk layout constraint, the constraints are merged.  If the constraints are incompatible, an error is raised."], [297, 4, 2, "p-codec", "codec", "Constrains the codec.  If there is an existing codec constraint, the constraints are merged.  If the constraints are incompatible, an error is raised."], [297, 4, 2, "p-context", "context", "Bind any context resource specs using the specified shared resource context."], [297, 4, 2, "p-create", "create", "Allow creating a new TensorStore.  Overrides the existing open mode.  To open or create, specify create=True and open=True."], [297, 4, 2, "p-delete_existing", "delete_existing", "Delete any existing data before creating a new array.  Overrides the existing open mode.  Must be specified in conjunction with create=True."], [297, 4, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [297, 4, 2, "p-domain", "domain", "Constrains the domain of the TensorStore.  If there is an existing domain, the specified domain is merged with it as follows:"], [297, 4, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore.  If a data type has already been set, it is an error to specify a different data type."], [297, 4, 2, "p-fill_value", "fill_value", "Specifies the fill value for positions that have not been written."], [297, 4, 2, "p-kvstore", "kvstore", "Sets the associated key-value store used as the underlying storage."], [297, 4, 2, "p-open", "open", "Allow opening an existing TensorStore.  Overrides the existing open mode."], [297, 4, 2, "p-rank", "rank", "Constrains the rank of the TensorStore.  If there is an index transform, the rank constraint must match the rank of the input space."], [297, 4, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [297, 4, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore.  Equivalent to specifying a domain of ts.IndexDomain(shape=shape)."], [297, 4, 2, "p-strip_context", "strip_context", "Replace any bound context resources and unbound context resource specs by default context resource specs."], [297, 4, 2, "p-unbind_context", "unbind_context", "Convert any bound context resources to context resource specs that fully capture the graph of shared context resources and interdependencies."]], "tensorstore.TensorStore": [[300, 5, 1, "", "T", "View with transposed domain (reversed dimension order)."], [301, 3, 1, "", "__array__", "Automatic conversion to numpy.ndarray for interoperability with NumPy."], [302, 3, 1, "", "__getitem__(domain)", "Computes a virtual view using an explicit index domain."], [303, 3, 1, "", "__getitem__(expr)", "Computes a virtual view using a dimension expression."], [304, 3, 1, "", "__getitem__(indices)", "Computes a virtual view using NumPy-style indexing with default index array semantics."], [305, 3, 1, "", "__getitem__(transform)", "Computes a virtual view using an explicit index transform."], [306, 3, 1, "", "__setitem__(domain)", "Synchronously writes using an explicit index domain."], [307, 3, 1, "", "__setitem__(expr)", "Synchronously writes using a dimension expression."], [308, 3, 1, "", "__setitem__(indices)", "Synchronously writes using NumPy-style indexing with default index array semantics."], [309, 3, 1, "", "__setitem__(transform)", "Synchronously writes using an explicit index transform."], [310, 3, 1, "", "astype", "Returns a read/write view as the specified data type."], [311, 5, 1, "", "chunk_layout", "Chunk layout of the TensorStore."], [312, 5, 1, "", "codec", "Data codec spec."], [313, 5, 1, "", "dimension_units", "Physical units of each dimension of the domain."], [314, 5, 1, "", "domain", "Domain of the array."], [315, 5, 1, "", "dtype", "Data type of the array."], [316, 5, 1, "", "fill_value", "Fill value for positions not yet written."], [317, 5, 1, "", "kvstore", "Associated key-value store used as the underlying storage."], [318, 5, 1, "", "mode", "Read/write mode."], [319, 5, 1, "", "ndim", "Alias for rank."], [320, 3, 1, "", "oindex", "Computes a virtual view using NumPy-style indexing with outer indexing semantics."], [322, 5, 1, "", "origin", "Inclusive lower bound of the domain."], [323, 5, 1, "", "rank", "Number of dimensions in the domain."], [324, 3, 1, "", "read", "Reads the data within the current domain."], [325, 5, 1, "", "readable", "Indicates if reading is supported."], [326, 3, 1, "", "resize", "Resizes the current domain, persistently modifying the stored representation."], [327, 3, 1, "", "resolve", "Obtains updated bounds, subject to the cache policy."], [328, 5, 1, "", "schema", "Schema of this TensorStore."], [329, 5, 1, "", "shape", "Shape of the domain."], [330, 5, 1, "", "size", "Total number of elements in the domain."], [331, 3, 1, "", "spec", "Spec that may be used to re-open or re-create the TensorStore."], [332, 5, 1, "", "transaction", "Associated transaction used for read/write operations."], [333, 3, 1, "", "vindex", "Computes a virtual view using NumPy-style indexing with vectorized indexing semantics."], [335, 3, 1, "", "with_transaction", "Returns a transaction-bound view of this TensorStore."], [336, 5, 1, "", "writable", "Indicates if writing is supported."], [337, 3, 1, "", "write", "Writes to the current domain."]], "tensorstore.TensorStore.__getitem__(domain)": [[302, 4, 2, "p-domain", "domain", "Index domain, must have dimension labels that can be aligned to self.domain."]], "tensorstore.TensorStore.__getitem__(transform)": [[305, 4, 2, "p-transform", "transform", "Index transform, transform.output_rank must equal self.rank."]], "tensorstore.TensorStore.__setitem__(domain)": [[306, 4, 2, "p-source", "source", "Source array, broadcast-compatible with self.domain[transform] and with a data type convertible to self.dtype.  May be an existing TensorStore or any ArrayLike, including a scalar."], [306, 4, 2, "p-transform", "transform", "Index transform, transform.output_rank must equal self.rank."]], "tensorstore.TensorStore.__setitem__(indices)": [[308, 4, 2, "p-indices", "indices", "NumPy-style indexing terms."], [308, 4, 2, "p-source", "source", "Source array, broadcast-compatible with self[indices].domain and with a data type convertible to self.dtype.  May be an existing TensorStore or any ArrayLike, including a scalar."]], "tensorstore.TensorStore.__setitem__(transform)": [[309, 4, 2, "p-source", "source", "Source array, broadcast-compatible with self.domain[transform] and with a data type convertible to self.dtype.  May be an existing TensorStore or any ArrayLike, including a scalar."], [309, 4, 2, "p-transform", "transform", "Index transform, transform.output_rank must equal self.rank."]], "tensorstore.TensorStore.oindex": [[321, 3, 1, "", "__setitem__", "Synchronously writes using NumPy-style indexing with outer indexing semantics."]], "tensorstore.TensorStore.oindex.__setitem__": [[321, 4, 2, "p-indices", "indices", "NumPy-style indexing terms."], [321, 4, 2, "p-source", "source", "Source array, broadcast-compatible with self.oindex[indices].domain and with a data type convertible to self.dtype.  May be an existing TensorStore or any ArrayLike, including a scalar."]], "tensorstore.TensorStore.read": [[324, 4, 2, "p-order", "order", "Contiguous layout order of the returned array:"]], "tensorstore.TensorStore.resize": [[326, 4, 2, "p-exclusive_max", "exclusive_max", "Sequence of length self.rank() specifying the new exclusive max bounds.  A bound of None indicates no change."], [326, 4, 2, "p-expand_only", "expand_only", "Fail if any bounds would be reduced."], [326, 4, 2, "p-inclusive_min", "inclusive_min", "Sequence of length self.rank() specifying the new inclusive min bounds.  A bound of None indicates no change."], [326, 4, 2, "p-resize_metadata_only", "resize_metadata_only", "Requests that, if applicable, the resize operation affect only the metadata but not delete data chunks that are outside of the new bounds."], [326, 4, 2, "p-resize_tied_bounds", "resize_tied_bounds", "Requests that the resize be permitted even if other bounds tied to the specified bounds must also be resized.  This option should be used with caution."], [326, 4, 2, "p-shrink_only", "shrink_only", "Fail if any bounds would be increased."]], "tensorstore.TensorStore.spec": [[331, 4, 2, "p-assume_metadata", "assume_metadata", "Skip reading the metadata if possible.  Instead, just assume any necessary metadata based on constraints in the spec, using the same defaults for any unspecified metadata as when creating a new TensorStore.  Overrides the existing open mode.  Requires that open is True and delete_existing is False."], [331, 4, 2, "p-create", "create", "Allow creating a new TensorStore.  Overrides the existing open mode.  To open or create, specify create=True and open=True."], [331, 4, 2, "p-delete_existing", "delete_existing", "Delete any existing data before creating a new array.  Overrides the existing open mode.  Must be specified in conjunction with create=True."], [331, 4, 2, "p-minimal_spec", "minimal_spec", "Indicates whether to include in the returned Spec the metadata necessary to re-create the TensorStore.  By default, the returned Spec includes the full metadata, but it is skipped if minimal_spec is set to True."], [331, 4, 2, "p-open", "open", "Allow opening an existing TensorStore.  Overrides the existing open mode."], [331, 4, 2, "p-retain_context", "retain_context", "Retain all bound context resources (e.g. specific concurrency pools, specific cache pools)."], [331, 4, 2, "p-unbind_context", "unbind_context", "Convert any bound context resources to context resource specs that fully capture the graph of shared context resources and interdependencies."]], "tensorstore.TensorStore.vindex": [[334, 3, 1, "", "__setitem__", "Synchronously writes using NumPy-style indexing with vectorized indexing semantics."]], "tensorstore.TensorStore.vindex.__setitem__": [[334, 4, 2, "p-indices", "indices", "NumPy-style indexing terms."], [334, 4, 2, "p-source", "source", "Source array, broadcast-compatible with self.vindex[indices].domain and with a data type convertible to self.dtype.  May be an existing TensorStore or any ArrayLike, including a scalar."]], "tensorstore.TensorStore.write": [[337, 4, 2, "p-source", "source", "Source array, broadcast-compatible with self.domain and with a data type convertible to self.dtype.  May be an existing TensorStore or any ArrayLike, including a scalar."]], "tensorstore.Transaction": [[339, 3, 1, "", "__init__", "Creates a new transaction."], [340, 3, 1, "", "abort", "Aborts the transaction."], [341, 5, 1, "", "aborted", "Indicates whether the transaction has been aborted."], [342, 5, 1, "", "atomic", "Indicates whether the transaction is atomic."], [343, 3, 1, "", "commit_async", "Asynchronously commits the transaction."], [344, 5, 1, "", "commit_started", "Indicates whether the commit of the transaction has already started."], [345, 3, 1, "", "commit_sync", "Synchronously commits the transaction."], [346, 5, 1, "", "future", "Commit result future."], [347, 5, 1, "", "open", "Indicates whether the transaction is still open."]], "tensorstore.Unit": [[349, 3, 1, "", "__eq__", "Compares two units for equality."], [350, 3, 1, "", "__init__(components)", "Constructs a unit from a multiplier and base unit."], [351, 3, 1, "", "__init__(json)", "Constructs a unit from its JSON representation."], [352, 3, 1, "", "__init__(multiplier)", "Constructs a dimension-less quantity of the specified value."], [353, 3, 1, "", "__init__(pair)", "Constructs a unit from a multiplier and base unit pair."], [354, 3, 1, "", "__init__(unit)", "Constructs a unit from a string."], [355, 3, 1, "", "__mul__", "Multiplies this unit by the specified multiplier."], [356, 3, 1, "", "__truediv__", "Divides this unit by the specified divisor."], [357, 5, 1, "", "base_unit", "Base unit from which this unit is derived."], [358, 5, 1, "", "multiplier", "Multiplier for the base_unit."], [359, 3, 1, "", "to_json", "Converts to the JSON representation."]], "tensorstore.VirtualChunkedReadParameters": [[361, 5, 1, "", "if_not_equal", "Cached generation, read request can be skipped if no newer data is available."], [362, 5, 1, "", "staleness_bound", "Read may be fulfilled with cached data no older than the specified bound."]], "tensorstore.VirtualChunkedWriteParameters": [[364, 5, 1, "", "if_equal", "If non-empty, writeback should be conditioned on the existing data matching the specified generation."]], "tensorstore.WriteFutures": [[366, 3, 1, "", "add_done_callback", ""], [367, 3, 1, "", "cancel", ""], [368, 3, 1, "", "cancelled", ""], [369, 5, 1, "", "commit", ""], [370, 5, 1, "", "copy", ""], [371, 3, 1, "", "done", ""], [372, 3, 1, "", "exception", ""], [373, 3, 1, "", "remove_done_callback", ""], [374, 3, 1, "", "result", ""]], "tensorstore.array": [[375, 4, 2, "p-array", "array", "Source array."], [375, 4, 2, "p-context", "context", "Context to use."], [375, 4, 2, "p-dtype", "dtype", "Data type to which array will be converted."]], "tensorstore.d": [[382, 3, 1, "", "__class_getitem__", "Constructs from a sequence of dimension indices, ranges, and/or labels."]], "tensorstore.dtype": [[386, 3, 1, "", "__call__", "Construct a scalar instance of this data type"], [387, 3, 1, "", "__init__(dtype)", "Construct from an existing TensorStore or NumPy data type."], [388, 3, 1, "", "__init__(name)", "Construct by name."], [389, 5, 1, "", "name", ""], [390, 5, 1, "", "numpy_dtype", ""], [391, 3, 1, "", "to_json", ""], [392, 5, 1, "", "type", ""]], "tensorstore.open": [[403, 4, 2, "p-assume_metadata", "assume_metadata", "Skip reading the metadata if possible.  Instead, just assume any necessary metadata based on constraints in the spec, using the same defaults for any unspecified metadata as when creating a new TensorStore.  Overrides the existing open mode.  Requires that open is True and delete_existing is False."], [403, 4, 2, "p-chunk_layout", "chunk_layout", "Constrains the chunk layout.  If there is an existing chunk layout constraint, the constraints are merged.  If the constraints are incompatible, an error is raised."], [403, 4, 2, "p-codec", "codec", "Constrains the codec.  If there is an existing codec constraint, the constraints are merged.  If the constraints are incompatible, an error is raised."], [403, 4, 2, "p-context", "context", "Shared resource context.  Defaults to a new (unshared) context with default options, as returned by tensorstore.Context().  To share resources, such as cache pools, between multiple open TensorStores, you must specify a context."], [403, 4, 2, "p-create", "create", "Allow creating a new TensorStore.  Overrides the existing open mode.  To open or create, specify create=True and open=True."], [403, 4, 2, "p-delete_existing", "delete_existing", "Delete any existing data before creating a new array.  Overrides the existing open mode.  Must be specified in conjunction with create=True."], [403, 4, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [403, 4, 2, "p-domain", "domain", "Constrains the domain of the TensorStore.  If there is an existing domain, the specified domain is merged with it as follows:"], [403, 4, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore.  If a data type has already been set, it is an error to specify a different data type."], [403, 4, 2, "p-fill_value", "fill_value", "Specifies the fill value for positions that have not been written."], [403, 4, 2, "p-kvstore", "kvstore", "Sets the associated key-value store used as the underlying storage."], [403, 4, 2, "p-open", "open", "Allow opening an existing TensorStore.  Overrides the existing open mode."], [403, 4, 2, "p-rank", "rank", "Constrains the rank of the TensorStore.  If there is an index transform, the rank constraint must match the rank of the input space."], [403, 4, 2, "p-read", "read", "Allow read access.  Defaults to True if neither read nor write is specified."], [403, 4, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [403, 4, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore.  Equivalent to specifying a domain of ts.IndexDomain(shape=shape)."], [403, 4, 2, "p-spec", "spec", "TensorStore Spec to open.  May also be specified as JSON."], [403, 4, 2, "p-transaction", "transaction", "Transaction to use for opening/creating, and for subsequent operations.  By default, the open is non-transactional."], [403, 4, 2, "p-write", "write", "Allow write access.  Defaults to True if neither read nor write is specified."]], "tensorstore.virtual_chunked": [[410, 4, 2, "p-chunk_layout", "chunk_layout", "Constrains the chunk layout.  If there is an existing chunk layout constraint, the constraints are merged.  If the constraints are incompatible, an error is raised."], [410, 4, 2, "p-context", "context", "Shared resource context.  Defaults to a new (unshared) context with default options, as returned by tensorstore.Context().  To share resources, such as cache pools, between multiple open TensorStores, you must specify a context."], [410, 4, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [410, 4, 2, "p-domain", "domain", "Constrains the domain of the TensorStore.  If there is an existing domain, the specified domain is merged with it as follows:"], [410, 4, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore.  If a data type has already been set, it is an error to specify a different data type."], [410, 4, 2, "p-loop", "loop", "Event loop on which to execute read_function and/or write_function if they are async functions.  If not specified (or None is specified), defaults to the loop returned by asyncio.get_running_loop (in the context of the call to virtual_chunked).  If loop is not specified and there is no running event loop, it is an error for read_function or write_function to return a coroutine."], [410, 4, 2, "p-rank", "rank", "Constrains the rank of the TensorStore.  If there is an index transform, the rank constraint must match the rank of the input space."], [410, 4, 2, "p-read_function", "read_function", "Callback that handles chunk read requests.  Must be specified to create a virtual view that supports reads.  To create a write-only view, leave this unspecified (as None)."], [410, 4, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [410, 4, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore.  Equivalent to specifying a domain of ts.IndexDomain(shape=shape)."], [410, 4, 2, "p-transaction", "transaction", "Transaction to use for opening/creating, and for subsequent operations.  By default, the open is non-transactional."], [410, 4, 2, "p-write_function", "write_function", "Callback that handles chunk write requests.  Must be specified to create a virtual view that supports writes.  To create a read-only view, leave this unspecified (as None)."]]}, "objtypes": {"0": "json:schema", "1": "json:subschema", "2": "py:class", "3": "py:method", "4": "py:parameter", "5": "py:property", "6": "py:attribute", "7": "py:function", "8": "py:data", "9": "std:envvar"}, "objnames": {"0": ["json", "schema", "JSON type"], "1": ["json", "subschema", "JSON member"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "property", "Python property"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "function", "Python function"], "8": ["py", "data", "Python data"], "9": ["std", "envvar", "environment variable"]}, "titleterms": {"context": 0, "framework": 0, "exampl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 20, 21, 22, 24, 25, 50, 51, 53, 54, 57, 63, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 109, 112, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 173, 174, 176, 181, 190, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 217, 218, 220, 221, 222, 243, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 323, 324, 326, 328, 331, 337, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 378, 382, 396, 402, 403, 411, 413], "arrai": [1, 12, 13, 15, 98, 403, 411], "driver": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25], "cast": 2, "downsampl": 3, "avif": 4, "bmp": 5, "jpeg": 6, "png": 7, "tiff": 8, "webp": 9, "singl": 10, "file": [10, 20], "chunk": [10, 12, 13, 15, 27, 413], "storag": [10, 16, 23], "warn": [10, 12, 13, 15, 19, 23, 109, 210, 297, 301, 306, 307, 308, 309, 321, 331, 334, 337, 403, 410, 411], "json": [11, 13, 25, 414], "note": [11, 15, 16, 18, 19, 20, 22, 53, 57, 68, 96, 99, 102, 119, 120, 121, 124, 148, 204, 205, 207, 211, 213, 252, 255, 269, 280, 281, 283, 284, 286, 292, 297, 337, 403, 404, 409, 410, 411, 413], "n5": [12, 412], "compress": [12, 13], "map": [12, 13, 15], "tensorstor": [12, 13, 14, 15, 17, 403], "schema": [12, 13, 14, 15, 413], "data": [12, 13, 15, 26, 299], "type": [12, 13, 15, 26, 299], "domain": [12, 13, 15, 18], "layout": [12, 13, 15, 413], "select": [12, 13, 15, 411], "when": [12, 13, 15, 403], "creat": [12, 13, 15, 403], "new": [12, 13, 15, 403], "unconstrain": [12, 13, 15], "explicit": [12, 13, 15], "shape": [12, 13, 15], "constraint": [12, 13, 15], "aspect": [12, 15], "ratio": [12, 15], "element": [12, 15], "codec": [12, 13, 15, 413], "fill": [12, 13, 15], "valu": [12, 13, 15, 20, 21, 22, 23, 24, 25], "dimens": [12, 13, 98, 120, 148, 411, 413], "unit": [12, 13, 413], "limit": [12, 13, 15, 20, 25], "neuroglancer_precomput": 13, "specif": [13, 25], "unshard": 13, "raw": 13, "encod": 13, "segment": 13, "shard": 13, "separ": 13, "read": [13, 403, 412], "write": [13, 403, 412], "stack": 14, "layer": [14, 23], "zarr": 15, "compressor": 15, "scalar": 15, "structur": 15, "support": [15, 19, 26, 410], "c": [15, 19], "order": 15, "fortran": 15, "environ": 16, "variabl": 16, "http": [16, 22], "request": 16, "tl": [16, 21, 22], "ca": [16, 21, 22], "certif": [16, 21, 22], "proxi": 16, "configur": 16, "debug": 16, "googl": 16, "cloud": 16, "credenti": 16, "highlight": 17, "get": 17, "start": 17, "concept": 17, "index": [18, 26, 98, 119, 145, 245, 271, 299, 411], "space": 18, "transform": [18, 411], "output": 18, "method": 18, "align": 18, "broadcast": 18, "build": 19, "instal": 19, "python": 19, "api": [19, 26], "from": 19, "pypi": 19, "packag": 19, "local": [19, 412], "checkout": 19, "ipython": 19, "shell": 19, "without": 19, "publish": 19, "bazel": 19, "integr": 19, "cmake": 19, "gener": 19, "third": 19, "parti": 19, "depend": 19, "cach": [19, 22, 410], "develop": 19, "document": 19, "run": 19, "test": [19, 21], "requir": 19, "librari": 19, "kei": [20, 21, 22, 23, 24, 25], "store": [20, 21, 22, 24, 25], "gc": 21, "authent": 21, "behavior": 22, "memori": 24, "neuroglancer_uint64_shard": 25, "import": 25, "refer": 26, "core": 26, "spec": [26, 414], "view": 26, "virtual": 26, "asynchron": 26, "constructor": [27, 28, 58, 61, 64, 73, 108, 119, 145, 176, 177, 184, 189, 199, 219, 233, 241, 245, 271, 338, 348, 381, 385], "class": [27, 61, 176, 413], "accessor": [27, 61, 62, 64, 73, 108, 119, 145, 176, 177, 189, 199, 245, 271, 299, 338, 348], "setter": 27, "templat": 27, "comparison": [27, 28, 177, 199, 245, 271, 348], "oper": [27, 28, 73, 97, 119, 177, 189, 199, 245, 271, 338, 348, 381, 411], "public": [28, 58, 73, 108, 184, 219, 229, 233, 241, 360, 363, 365, 381, 385], "member": [28, 58, 73, 108, 184, 219, 229, 233, 241, 360, 363, 365, 381, 385], "see": [45, 46, 47, 48, 49, 52, 53, 56, 57, 61, 73, 98, 101, 107, 108, 119, 145, 150, 167, 174, 204, 205, 207, 213, 218, 219, 229, 233, 241, 248, 249, 250, 251, 263, 270, 274, 275, 276, 277, 289, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 320, 321, 324, 333, 334, 343, 345, 365], "also": [45, 46, 47, 48, 49, 52, 53, 56, 57, 61, 73, 98, 101, 107, 108, 119, 145, 150, 167, 174, 204, 205, 207, 213, 218, 219, 229, 233, 241, 248, 249, 250, 251, 263, 270, 274, 275, 276, 277, 289, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 320, 321, 324, 333, 334, 343, 345, 365], "string": [73, 119, 145, 176, 189, 233, 245, 271], "represent": [73, 119, 145, 176, 189, 233, 245, 271], "integ": [98, 411], "interv": [98, 411], "ad": [98, 411], "singleton": [98, 411], "error": 98, "ellipsi": [98, 411], "boolean": [98, 411], "callback": 108, "interfac": 108, "block": 108, "sequenc": 119, "geometr": 119, "all": [120, 148], "unlabel": [120, 148], "fulli": [120, 148], "label": [120, 148, 411], "mix": [120, 148], "i": [176, 299], "o": [176, 299], "synchron": 176, "transact": [176, 299, 337, 410], "mutat": [189, 245, 271], "tip": 324, "non": 337, "semant": 337, "arithmet": 348, "open": 403, "an": 403, "exist": 403, "us": 403, "assume_metadata": 403, "improv": 403, "concurr": 403, "effici": 403, "skip": 403, "metadata": 403, "pickl": 410, "numpi": 411, "style": 411, "differ": 411, "compar": 411, "vector": 411, "mode": 411, "vindex": 411, "outer": 411, "oindex": 411, "express": 411, "diagon": 411, "translate_to": 411, "translate_bi": 411, "translate_backward_bi": 411, "stride": 411, "transpos": 411, "compos": 411, "construct": 411, "tutori": 412, "dataset": 412, "janelia": 412, "flyem": 412, "hemibrain": 412}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Examples": [[81, null], [77, null], [74, null], [78, null], [73, null], [75, null], [79, null], [80, null], [382, null], [403, "examples"], [21, null], [22, null], [20, null], [24, null], [301, null], [299, null], [153, null], [152, null], [147, null], [151, null], [154, null], [122, null], [107, null], [103, null], [105, null], [104, null], [127, null], [121, null], [101, null], [99, null], [98, "examples"], [125, null], [126, null], [100, null], [123, null], [102, null]], "See also": [[48, null], [56, null], [47, null], [73, null], [45, null], [61, null], [46, null], [53, null], [49, null], [52, null], [57, null], [365, null], [333, null], [345, null], [321, null], [343, null], [324, null], [334, null], [320, null], [301, null], [277, null], [270, null], [306, null], [276, null], [302, null], [303, null], [289, null], [307, null], [309, null], [298, null], [275, null], [304, null], [305, null], [274, null], [308, null], [248, null], [241, null], [251, null], [263, null], [250, null], [229, null], [233, null], [249, null], [204, null], [219, null], [205, null], [213, null], [207, null], [218, null], [150, null], [174, null], [145, null], [167, null], [107, null], [101, null], [98, null], [98, null], [98, null], [98, null], [98, null], [98, null], [108, null], [119, null]], "Example": [[51, null], [87, null], [89, null], [72, null], [67, null], [54, null], [86, null], [71, null], [50, null], [53, null], [63, null], [69, null], [88, null], [68, null], [57, null], [413, null], [413, null], [378, null], [396, null], [402, null], [1, null], [13, null], [13, null], [13, null], [13, null], [2, null], [10, null], [5, null], [11, null], [11, null], [7, null], [18, null], [18, null], [18, null], [0, null], [3, null], [3, null], [4, null], [9, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [12, null], [12, null], [12, null], [12, null], [12, null], [12, null], [12, null], [12, null], [12, null], [12, null], [22, null], [22, null], [22, null], [22, null], [8, null], [6, null], [14, null], [14, "example"], [337, null], [351, null], [359, null], [317, null], [354, null], [328, null], [324, null], [316, null], [350, null], [355, null], [331, null], [323, null], [326, null], [357, null], [358, null], [353, null], [315, null], [349, null], [356, null], [352, null], [319, null], [280, null], [285, null], [283, null], [277, null], [270, null], [312, null], [296, null], [306, null], [278, null], [276, null], [302, null], [284, null], [288, null], [303, null], [289, null], [297, null], [279, null], [307, null], [309, null], [311, null], [281, null], [298, null], [314, null], [275, null], [291, null], [292, null], [304, null], [305, null], [313, null], [274, null], [310, null], [273, null], [282, null], [295, null], [308, null], [287, null], [286, null], [254, null], [252, null], [259, null], [257, null], [256, null], [247, null], [255, null], [248, null], [258, null], [243, null], [265, null], [268, null], [260, null], [261, null], [251, null], [253, null], [263, null], [244, null], [250, null], [269, null], [249, null], [262, null], [206, null], [204, null], [220, null], [214, null], [217, null], [194, null], [205, null], [213, null], [195, null], [207, null], [216, null], [218, null], [198, null], [193, null], [197, null], [210, null], [192, null], [190, null], [209, null], [181, null], [208, null], [222, null], [212, null], [221, null], [196, null], [139, null], [166, null], [163, null], [142, null], [149, null], [150, null], [135, null], [160, null], [174, null], [161, null], [138, null], [159, null], [173, null], [162, null], [141, null], [157, null], [137, null], [164, null], [158, null], [156, null], [167, null], [170, null], [176, null], [165, null], [136, null], [143, null], [140, null], [96, null], [94, null], [90, null], [128, null], [130, null], [133, null], [134, null], [95, null], [124, null], [131, null], [92, null], [132, null], [112, null], [93, null], [91, null], [109, null]], "Constructors": [[64, "constructors"], [73, "constructors"], [61, "constructors"], [58, "constructors"], [381, "constructors"], [385, "constructors"], [27, "constructors"], [28, "constructors"], [338, "constructors"], [348, "constructors"], [271, "constructors"], [241, "constructors"], [245, "constructors"], [233, "constructors"], [219, "constructors"], [199, "constructors"], [189, "constructors"], [184, "constructors"], [177, "constructors"], [145, "constructors"], [176, "constructors"], [108, "constructors"], [119, "constructors"]], "Accessors": [[64, "accessors"], [62, "accessors"], [73, "accessors"], [61, "accessors"], [27, "accessors"], [338, "accessors"], [348, "accessors"], [299, "accessors"], [271, "accessors"], [245, "accessors"], [199, "accessors"], [189, "accessors"], [177, "accessors"], [145, "accessors"], [176, "accessors"], [108, "accessors"], [119, "accessors"]], "Public members": [[73, "public-members"], [58, "public-members"], [381, "public-members"], [385, "public-members"], [363, "public-members"], [365, "public-members"], [360, "public-members"], [28, "public-members"], [241, "public-members"], [229, "public-members"], [233, "public-members"], [219, "public-members"], [184, "public-members"], [108, "public-members"]], "Operations": [[73, "operations"], [411, "operations"], [381, "operations"], [338, "operations"], [97, "operations"]], "String representation": [[73, "string-representation"], [271, "string-representation"], [245, "string-representation"], [233, "string-representation"], [189, "string-representation"], [145, "string-representation"], [176, "string-representation"], [119, "string-representation"]], "Classes": [[61, "classes"], [27, "classes"], [176, "classes"]], "Note": [[53, null], [68, null], [57, null], [413, null], [409, null], [410, null], [410, null], [410, null], [411, null], [411, null], [411, null], [411, null], [411, null], [411, null], [404, null], [403, null], [403, null], [16, null], [11, null], [18, null], [18, null], [18, null], [15, null], [22, null], [19, null], [19, null], [19, null], [19, null], [20, null], [337, null], [280, null], [283, null], [284, null], [297, null], [281, null], [292, null], [286, null], [252, null], [255, null], [269, null], [204, null], [205, null], [213, null], [207, null], [211, null], [148, null], [96, null], [121, null], [124, null], [99, null], [119, null], [120, null], [102, null]], "Schema": [[413, "schema"]], "Example\nclass: example": [[413, null], [413, null]], "Chunk layout": [[413, "chunk-layout"], [13, "chunk-layout"], [15, "chunk-layout"], [12, "chunk-layout"]], "Codec": [[413, "codec"], [13, "codec"], [15, "codec"], [12, "codec"]], "Dimension units": [[413, "dimension-units"], [12, "dimension-units"]], "Tutorial": [[412, "tutorial"]], "Reading and writing a local N5 dataset": [[412, "reading-and-writing-a-local-n5-dataset"]], "Reading the Janelia FlyEM Hemibrain dataset": [[412, "reading-the-janelia-flyem-hemibrain-dataset"]], "JSON Spec": [[414, "json-spec"]], "Warning": [[410, null], [410, null], [411, null], [411, null], [411, null], [403, null], [13, null], [13, null], [23, null], [10, null], [15, null], [15, null], [12, null], [19, null], [337, null], [337, null], [321, null], [331, null], [334, null], [301, null], [306, null], [297, null], [307, null], [309, null], [308, null], [210, null], [109, null]], "Caching": [[410, "caching"]], "Pickle support": [[410, "pickle-support"]], "Transaction support": [[410, "transaction-support"]], "Indexing": [[411, "indexing"], [26, "indexing"], [299, "indexing"], [271, "indexing"], [245, "indexing"], [145, "indexing"], [119, "indexing"]], "Index transforms": [[411, "index-transforms"]], "NumPy-style indexing": [[411, "numpy-style-indexing"]], "Integer indexing": [[411, "integer-indexing"], [98, "integer-indexing"]], "Interval indexing": [[411, "interval-indexing"], [98, "interval-indexing"]], "Adding singleton dimensions": [[411, "adding-singleton-dimensions"], [98, "adding-singleton-dimensions"]], "Ellipsis": [[411, "ellipsis"], [98, "ellipsis"]], "Integer array indexing": [[411, "integer-array-indexing"], [98, "integer-array-indexing"]], "Boolean array indexing": [[411, "boolean-array-indexing"], [98, "boolean-array-indexing"]], "Differences compared to NumPy indexing": [[411, "differences-compared-to-numpy-indexing"]], "Vectorized indexing mode (vindex)": [[411, "vectorized-indexing-mode-vindex"]], "Outer indexing mode (oindex)": [[411, "outer-indexing-mode-oindex"]], "Dimension expressions": [[411, "dimension-expressions"]], "label": [[411, "label"]], "diagonal": [[411, "diagonal"]], "translate_to": [[411, "translate-to"]], "translate_by": [[411, "translate-by"]], "translate_backward_by": [[411, "translate-backward-by"]], "stride": [[411, "stride"]], "transpose": [[411, "transpose"]], "oindex": [[411, "oindex"]], "vindex": [[411, "vindex"]], "Composed examples": [[411, "composed-examples"]], "Dimension selections": [[411, "dimension-selections"]], "Dimension expression construction": [[411, "dimension-expression-construction"]], "NumPy-style dimension expression indexing": [[411, "numpy-style-dimension-expression-indexing"]], "Opening an existing TensorStore": [[403, "opening-an-existing-tensorstore"]], "Creating a new TensorStore": [[403, "creating-a-new-tensorstore"]], "Using assume_metadata for improved concurrent open efficiency": [[403, "using-assume-metadata-for-improved-concurrent-open-efficiency"]], "Example of skipping reading the metadata when opening an existing array": [[403, null]], "Example of skipping writing the metadata when creating a new array": [[403, null]], "Environment variables": [[16, "environment-variables"]], "HTTP requests": [[16, "http-requests"]], "TLS CA certificates": [[16, "tls-ca-certificates"], [21, "tls-ca-certificates"], [22, "tls-ca-certificates"]], "Proxy configuration": [[16, "proxy-configuration"]], "Debugging": [[16, "debugging"]], "Google Cloud Credentials": [[16, "google-cloud-credentials"]], "Google Cloud Storage": [[16, "google-cloud-storage"]], "neuroglancer_uint64_sharded Key-Value Store driver": [[25, "neuroglancer-uint64-sharded-key-value-store-driver"]], "Important": [[25, null]], "Example JSON specifications": [[25, "example-json-specifications"], [13, "example-json-specifications"]], "Limitations": [[25, "limitations"], [13, "limitations"], [15, "limitations"], [12, "limitations"], [20, "limitations"]], "array Driver": [[1, "array-driver"]], "neuroglancer_precomputed Driver": [[13, "neuroglancer-precomputed-driver"]], "Mapping to TensorStore Schema": [[13, "mapping-to-tensorstore-schema"], [15, "mapping-to-tensorstore-schema"], [12, "mapping-to-tensorstore-schema"]], "Example with unsharded raw encoding": [[13, null]], "Example with unsharded compressed segmentation encoding": [[13, null]], "Example with sharded raw encoding": [[13, null]], "Data type": [[13, "data-type"], [15, "data-type"], [12, "data-type"], [299, "data-type"]], "Domain": [[13, "domain"], [15, "domain"], [12, "domain"]], "Selection of chunk layout when creating a new array": [[13, "selection-of-chunk-layout-when-creating-a-new-array"], [15, "selection-of-chunk-layout-when-creating-a-new-array"], [12, "selection-of-chunk-layout-when-creating-a-new-array"]], "Example of unconstrained chunk layout": [[13, null], [15, null], [12, null]], "Example of unconstrained chunk layout with compressed segmentation encoding": [[13, null]], "Example of chunk layout with separate read and write chunk constraints": [[13, null]], "Example of chunk layout with explicit chunk shapes": [[13, null]], "Fill value": [[13, "fill-value"], [15, "fill-value"], [12, "fill-value"]], "Dimension Units": [[13, "dimension-units"]], "cast Driver": [[2, "cast-driver"]], "Key-Value Storage Layer": [[23, "key-value-storage-layer"]], "Drivers": [[23, "drivers"], [10, "drivers"]], "gcs Key-Value Store driver": [[21, "gcs-key-value-store-driver"]], "Authentication": [[21, "authentication"]], "Testing": [[21, "testing"]], "Single file drivers": [[10, "single-file-drivers"]], "Chunked storage drivers": [[10, "chunked-storage-drivers"]], "bmp Driver": [[5, "bmp-driver"]], "API reference": [[26, "api-reference"]], "Core": [[26, "core"]], "Spec": [[26, "spec"]], "Views": [[26, "views"]], "Virtual views": [[26, "virtual-views"]], "Data types": [[26, "data-types"]], "Asynchronous support": [[26, "asynchronous-support"]], "json Driver": [[11, "json-driver"]], "png Driver": [[7, "png-driver"]], "Setters": [[27, "setters"]], "Chunk templates": [[27, "chunk-templates"]], "Comparison operators": [[27, "comparison-operators"], [28, "comparison-operators"], [348, "comparison-operators"], [271, "comparison-operators"], [245, "comparison-operators"], [199, "comparison-operators"], [177, "comparison-operators"]], "Index space": [[18, "index-space"]], "Index domain": [[18, "index-domain"]], "Index transform": [[18, "index-transform"]], "Output index methods": [[18, "output-index-methods"]], "Alignment and broadcasting": [[18, "alignment-and-broadcasting"]], "Context framework": [[0, "context-framework"]], "downsample Driver": [[3, "downsample-driver"]], "avif Driver": [[4, "avif-driver"]], "webp Driver": [[9, "webp-driver"]], "zarr Driver": [[15, "zarr-driver"]], "Compressors": [[15, "compressors"]], "Example with scalar data type": [[15, null], [15, null], [15, null]], "Example with structured data type": [[15, null], [15, null], [15, null]], "Supported data types": [[15, "id8"]], "Example with scalar data type and C order": [[15, null]], "Example with scalar data type and Fortran order": [[15, null]], "Example with structured data type and C order": [[15, null]], "Example with structured data type and Fortran order": [[15, null]], "Example of explicit chunk shape constraint": [[15, null], [12, null]], "Example of chunk aspect ratio constraint": [[15, null], [12, null]], "Example of chunk aspect ratio and elements constraint": [[15, null], [12, null]], "n5 Driver": [[12, "n5-driver"]], "Compression": [[12, "compression"]], "http Key-Value Store driver": [[22, "http-key-value-store-driver"]], "Cache behavior": [[22, "cache-behavior"]], "tiff Driver": [[8, "tiff-driver"]], "Building and Installing": [[19, "building-and-installing"]], "Python API": [[19, "python-api"]], "Installation from PyPI package": [[19, "installation-from-pypi-package"]], "Installation from local checkout": [[19, "installation-from-local-checkout"]], "IPython shell without installing": [[19, "ipython-shell-without-installing"]], "Publishing a PyPI package": [[19, "publishing-a-pypi-package"]], "C++ API": [[19, "c-api"]], "Bazel integration": [[19, "bazel-integration"]], "CMake integration": [[19, "cmake-integration"]], "Supported generators": [[19, "supported-generators"]], "Third-party dependencies": [[19, "third-party-dependencies"]], "Build caching": [[19, "build-caching"]], "Development": [[19, "development"]], "Building the documentation": [[19, "building-the-documentation"]], "Running tests": [[19, "running-tests"]], "Build dependencies": [[19, "build-dependencies"]], "Bazel build": [[19, "bazel-build-dependencies"]], "Required third-party libraries": [[19, "id7"]], "CMake build": [[19, "cmake-build-dependencies"]], "file Key-Value Store driver": [[20, "file-key-value-store-driver"]], "jpeg Driver": [[6, "jpeg-driver"]], "TensorStore": [[17, "tensorstore"]], "Highlights": [[17, "highlights"]], "Getting started": [[17, "getting-started"]], "Concepts": [[17, "concepts"]], "memory Key-Value Store driver": [[24, "memory-key-value-store-driver"]], "stack Driver": [[14, "stack-driver"]], "Example of layer driver": [[14, null]], "TensorStore Schema": [[14, "tensorstore-schema"]], "Non-transactional semantics": [[337, "non-transactional-semantics"]], "Transactional semantics": [[337, "transactional-semantics"]], "Tip": [[324, null], [324, null]], "Arithmetic operators": [[348, "arithmetic-operators"]], "I/O": [[299, "i-o"], [176, "i-o"]], "Transactions": [[299, "transactions"], [176, "transactions"]], "Mutators": [[271, "mutators"], [245, "mutators"], [189, "mutators"]], "Operators": [[189, "operators"]], "Example with all unlabeled dimensions": [[148, null], [120, null]], "Example with fully labeled dimensions": [[148, null], [120, null]], "Example with mixed labeled and unlabeled dimensions": [[148, null], [120, null]], "Synchronous I/O": [[176, "synchronous-i-o"]], "Error": [[98, null], [98, null]], "Callback interface": [[108, "callback-interface"]], "Blocking interface": [[108, "blocking-interface"]], "Sequence accessors": [[119, "sequence-accessors"]], "Geometric operations": [[119, "geometric-operations"]]}, "indexentries": {"rfc": [[11, "index-0"], [11, "index-1"], [22, "index-0"]], "rfc 6901": [[11, "index-0"], [11, "index-1"]], "google_application_credentials": [[16, "envvar-GOOGLE_APPLICATION_CREDENTIALS"], [21, "index-1"]], "sslkeylogfile": [[16, "envvar-SSLKEYLOGFILE"]], "tensorstore_ca_bundle": [[16, "envvar-TENSORSTORE_CA_BUNDLE"], [16, "index-0"], [16, "index-2"]], "tensorstore_ca_path": [[16, "envvar-TENSORSTORE_CA_PATH"], [16, "index-1"]], "tensorstore_curl_verbose": [[16, "envvar-TENSORSTORE_CURL_VERBOSE"]], "tensorstore_gcs_http_url": [[16, "envvar-TENSORSTORE_GCS_HTTP_URL"], [21, "index-2"]], "tensorstore_gcs_request_concurrency": [[16, "envvar-TENSORSTORE_GCS_REQUEST_CONCURRENCY"], [21, "index-0"]], "tensorstore_system_libs": [[16, "index-3"], [19, "envvar-TENSORSTORE_SYSTEM_LIBS"], [19, "index-1"]], "all_proxy": [[16, "envvar-all_proxy"], [16, "index-4"], [16, "index-5"]], "environment variable": [[16, "envvar-GOOGLE_APPLICATION_CREDENTIALS"], [16, "envvar-SSLKEYLOGFILE"], [16, "envvar-TENSORSTORE_CA_BUNDLE"], [16, "envvar-TENSORSTORE_CA_PATH"], [16, "envvar-TENSORSTORE_CURL_VERBOSE"], [16, "envvar-TENSORSTORE_GCS_HTTP_URL"], [16, "envvar-TENSORSTORE_GCS_REQUEST_CONCURRENCY"], [16, "envvar-all_proxy"], [16, "envvar-http_proxy"], [16, "envvar-https_proxy"], [16, "envvar-no_proxy"], [16, "index-0"], [16, "index-1"], [16, "index-2"], [16, "index-3"], [16, "index-4"], [16, "index-5"], [19, "envvar-ARCHFLAGS"], [19, "envvar-BAZELISK_HOME"], [19, "envvar-MACOSX_DEPLOYMENT_TARGET"], [19, "envvar-TENSORSTORE_BAZELISK"], [19, "envvar-TENSORSTORE_BAZEL_BUILD_OPTIONS"], [19, "envvar-TENSORSTORE_BAZEL_COMPILATION_MODE"], [19, "envvar-TENSORSTORE_BAZEL_STARTUP_OPTIONS"], [19, "envvar-TENSORSTORE_PREBUILT_DIR"], [19, "envvar-TENSORSTORE_SYSTEM_LIBS"], [19, "index-0"], [19, "index-1"], [21, "index-0"], [21, "index-1"], [21, "index-2"]], "http_proxy": [[16, "envvar-http_proxy"]], "https_proxy": [[16, "envvar-https_proxy"]], "no_proxy": [[16, "envvar-no_proxy"]], "archflags": [[19, "envvar-ARCHFLAGS"]], "bazelisk_home": [[19, "envvar-BAZELISK_HOME"]], "macosx_deployment_target": [[19, "envvar-MACOSX_DEPLOYMENT_TARGET"]], "tensorstore_bazelisk": [[19, "envvar-TENSORSTORE_BAZELISK"]], "tensorstore_bazel_build_options": [[19, "envvar-TENSORSTORE_BAZEL_BUILD_OPTIONS"]], "tensorstore_bazel_compilation_mode": [[19, "envvar-TENSORSTORE_BAZEL_COMPILATION_MODE"]], "tensorstore_bazel_startup_options": [[19, "envvar-TENSORSTORE_BAZEL_STARTUP_OPTIONS"], [19, "index-0"]], "tensorstore_prebuilt_dir": [[19, "envvar-TENSORSTORE_PREBUILT_DIR"]], "rfc 7230#section-3.2": [[22, "index-0"]], "pep 357": [[411, "index-0"]], "python enhancement proposals": [[411, "index-0"]]}, "docurls": ["context.html", "driver/array/index.html", "driver/cast/index.html", "driver/downsample/index.html", "driver/image/avif/index.html", "driver/image/bmp/index.html", "driver/image/jpeg/index.html", "driver/image/png/index.html", "driver/image/tiff/index.html", "driver/image/webp/index.html", "driver/index.html", "driver/json/index.html", "driver/n5/index.html", "driver/neuroglancer_precomputed/index.html", "driver/stack/index.html", "driver/zarr/index.html", "environment.html", "index.html", "index_space.html", "installation.html", "kvstore/file/index.html", "kvstore/gcs/index.html", "kvstore/http/index.html", "kvstore/index.html", "kvstore/memory/index.html", "kvstore/neuroglancer_uint64_sharded/index.html", "python/api/index.html", "python/api/tensorstore.ChunkLayout.html", "python/api/tensorstore.ChunkLayout.Grid.html", "python/api/tensorstore.ChunkLayout.Grid.__eq__.html", "python/api/tensorstore.ChunkLayout.Grid.__init__-components.html", "python/api/tensorstore.ChunkLayout.Grid.__init__-json.html", "python/api/tensorstore.ChunkLayout.Grid.aspect_ratio.html", "python/api/tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint.html", "python/api/tensorstore.ChunkLayout.Grid.elements.html", "python/api/tensorstore.ChunkLayout.Grid.elements_soft_constraint.html", "python/api/tensorstore.ChunkLayout.Grid.ndim.html", "python/api/tensorstore.ChunkLayout.Grid.rank.html", "python/api/tensorstore.ChunkLayout.Grid.shape.html", "python/api/tensorstore.ChunkLayout.Grid.shape_soft_constraint.html", "python/api/tensorstore.ChunkLayout.Grid.to_json.html", "python/api/tensorstore.ChunkLayout.Grid.update.html", "python/api/tensorstore.ChunkLayout.__eq__.html", "python/api/tensorstore.ChunkLayout.__init__-components.html", "python/api/tensorstore.ChunkLayout.__init__-json.html", "python/api/tensorstore.ChunkLayout.codec_chunk.html", "python/api/tensorstore.ChunkLayout.grid_origin.html", "python/api/tensorstore.ChunkLayout.grid_origin_soft_constraint.html", "python/api/tensorstore.ChunkLayout.inner_order.html", "python/api/tensorstore.ChunkLayout.inner_order_soft_constraint.html", "python/api/tensorstore.ChunkLayout.ndim.html", "python/api/tensorstore.ChunkLayout.rank.html", "python/api/tensorstore.ChunkLayout.read_chunk.html", "python/api/tensorstore.ChunkLayout.read_chunk_template.html", "python/api/tensorstore.ChunkLayout.to_json.html", "python/api/tensorstore.ChunkLayout.update.html", "python/api/tensorstore.ChunkLayout.write_chunk.html", "python/api/tensorstore.ChunkLayout.write_chunk_template.html", "python/api/tensorstore.CodecSpec.html", "python/api/tensorstore.CodecSpec.__init__.html", "python/api/tensorstore.CodecSpec.to_json.html", "python/api/tensorstore.Context.html", "python/api/tensorstore.Context.Resource.html", "python/api/tensorstore.Context.Resource.to_json.html", "python/api/tensorstore.Context.Spec.html", "python/api/tensorstore.Context.Spec.__init__.html", "python/api/tensorstore.Context.Spec.to_json.html", "python/api/tensorstore.Context.__getitem__.html", "python/api/tensorstore.Context.__init__-default.html", "python/api/tensorstore.Context.__init__-json.html", "python/api/tensorstore.Context.__init__-spec.html", "python/api/tensorstore.Context.parent.html", "python/api/tensorstore.Context.spec.html", "python/api/tensorstore.Dim.html", "python/api/tensorstore.Dim.__contains__-dim.html", "python/api/tensorstore.Dim.__contains__-index.html", "python/api/tensorstore.Dim.__eq__.html", "python/api/tensorstore.Dim.__init__-exclusive_max.html", "python/api/tensorstore.Dim.__init__-inclusive_max.html", "python/api/tensorstore.Dim.__init__-size.html", "python/api/tensorstore.Dim.__init__-unbounded.html", "python/api/tensorstore.Dim.__iter__.html", "python/api/tensorstore.Dim.__len__.html", "python/api/tensorstore.Dim.__repr__.html", "python/api/tensorstore.Dim.__str__.html", "python/api/tensorstore.Dim.empty.html", "python/api/tensorstore.Dim.exclusive_max.html", "python/api/tensorstore.Dim.exclusive_min.html", "python/api/tensorstore.Dim.finite.html", "python/api/tensorstore.Dim.hull.html", "python/api/tensorstore.Dim.implicit_lower.html", "python/api/tensorstore.Dim.implicit_upper.html", "python/api/tensorstore.Dim.inclusive_max.html", "python/api/tensorstore.Dim.inclusive_min.html", "python/api/tensorstore.Dim.intersect.html", "python/api/tensorstore.Dim.label.html", "python/api/tensorstore.Dim.size.html", "python/api/tensorstore.DimExpression.html", "python/api/tensorstore.DimExpression.__getitem__.html", "python/api/tensorstore.DimExpression.diagonal.html", "python/api/tensorstore.DimExpression.label.html", "python/api/tensorstore.DimExpression.oindex.html", "python/api/tensorstore.DimExpression.stride.html", "python/api/tensorstore.DimExpression.translate_backward_by.html", "python/api/tensorstore.DimExpression.translate_by.html", "python/api/tensorstore.DimExpression.translate_to.html", "python/api/tensorstore.DimExpression.transpose.html", "python/api/tensorstore.DimExpression.vindex.html", "python/api/tensorstore.Future.html", "python/api/tensorstore.Future.__new__.html", "python/api/tensorstore.Future.add_done_callback.html", "python/api/tensorstore.Future.cancel.html", "python/api/tensorstore.Future.cancelled.html", "python/api/tensorstore.Future.done.html", "python/api/tensorstore.Future.exception.html", "python/api/tensorstore.Future.force.html", "python/api/tensorstore.Future.remove_done_callback.html", "python/api/tensorstore.Future.result.html", "python/api/tensorstore.FutureLike.html", "python/api/tensorstore.IndexDomain.html", "python/api/tensorstore.IndexDomain.__getitem__-domain.html", "python/api/tensorstore.IndexDomain.__getitem__-expr.html", "python/api/tensorstore.IndexDomain.__getitem__-identifier.html", "python/api/tensorstore.IndexDomain.__getitem__-selection.html", "python/api/tensorstore.IndexDomain.__getitem__-transform.html", "python/api/tensorstore.IndexDomain.__init__-components.html", "python/api/tensorstore.IndexDomain.__init__-dimensions.html", "python/api/tensorstore.IndexDomain.__init__-json.html", "python/api/tensorstore.IndexDomain.__len__.html", "python/api/tensorstore.IndexDomain.__repr__.html", "python/api/tensorstore.IndexDomain.exclusive_max.html", "python/api/tensorstore.IndexDomain.hull.html", "python/api/tensorstore.IndexDomain.implicit_lower_bounds.html", "python/api/tensorstore.IndexDomain.implicit_upper_bounds.html", "python/api/tensorstore.IndexDomain.inclusive_max.html", "python/api/tensorstore.IndexDomain.inclusive_min.html", "python/api/tensorstore.IndexDomain.index_exp.html", "python/api/tensorstore.IndexDomain.intersect.html", "python/api/tensorstore.IndexDomain.labels.html", "python/api/tensorstore.IndexDomain.ndim.html", "python/api/tensorstore.IndexDomain.origin.html", "python/api/tensorstore.IndexDomain.rank.html", "python/api/tensorstore.IndexDomain.shape.html", "python/api/tensorstore.IndexDomain.size.html", "python/api/tensorstore.IndexDomain.to_json.html", "python/api/tensorstore.IndexTransform.html", "python/api/tensorstore.IndexTransform.T.html", "python/api/tensorstore.IndexTransform.__call__.html", "python/api/tensorstore.IndexTransform.__getitem__-domain.html", "python/api/tensorstore.IndexTransform.__getitem__-expr.html", "python/api/tensorstore.IndexTransform.__getitem__-indices.html", "python/api/tensorstore.IndexTransform.__getitem__-transform.html", "python/api/tensorstore.IndexTransform.__init__-components.html", "python/api/tensorstore.IndexTransform.__init__-domain.html", "python/api/tensorstore.IndexTransform.__init__-json.html", "python/api/tensorstore.IndexTransform.__repr__.html", "python/api/tensorstore.IndexTransform.domain.html", "python/api/tensorstore.IndexTransform.implicit_lower_bounds.html", "python/api/tensorstore.IndexTransform.implicit_upper_bounds.html", "python/api/tensorstore.IndexTransform.input_exclusive_max.html", "python/api/tensorstore.IndexTransform.input_inclusive_max.html", "python/api/tensorstore.IndexTransform.input_inclusive_min.html", "python/api/tensorstore.IndexTransform.input_labels.html", "python/api/tensorstore.IndexTransform.input_origin.html", "python/api/tensorstore.IndexTransform.input_rank.html", "python/api/tensorstore.IndexTransform.input_shape.html", "python/api/tensorstore.IndexTransform.ndim.html", "python/api/tensorstore.IndexTransform.oindex.html", "python/api/tensorstore.IndexTransform.origin.html", "python/api/tensorstore.IndexTransform.output.html", "python/api/tensorstore.IndexTransform.output_rank.html", "python/api/tensorstore.IndexTransform.shape.html", "python/api/tensorstore.IndexTransform.size.html", "python/api/tensorstore.IndexTransform.to_json.html", "python/api/tensorstore.IndexTransform.vindex.html", "python/api/tensorstore.Indexable.html", "python/api/tensorstore.KvStore.html", "python/api/tensorstore.KvStore.KeyRange.html", "python/api/tensorstore.KvStore.KeyRange.__eq__.html", "python/api/tensorstore.KvStore.KeyRange.__init__.html", "python/api/tensorstore.KvStore.KeyRange.copy.html", "python/api/tensorstore.KvStore.KeyRange.empty.html", "python/api/tensorstore.KvStore.KeyRange.exclusive_max.html", "python/api/tensorstore.KvStore.KeyRange.inclusive_min.html", "python/api/tensorstore.KvStore.ReadResult.html", "python/api/tensorstore.KvStore.ReadResult.__init__.html", "python/api/tensorstore.KvStore.ReadResult.stamp.html", "python/api/tensorstore.KvStore.ReadResult.state.html", "python/api/tensorstore.KvStore.ReadResult.value.html", "python/api/tensorstore.KvStore.Spec.html", "python/api/tensorstore.KvStore.Spec.__add__.html", "python/api/tensorstore.KvStore.Spec.__new__.html", "python/api/tensorstore.KvStore.Spec.__repr__.html", "python/api/tensorstore.KvStore.Spec.__truediv__.html", "python/api/tensorstore.KvStore.Spec.copy.html", "python/api/tensorstore.KvStore.Spec.path.html", "python/api/tensorstore.KvStore.Spec.to_json.html", "python/api/tensorstore.KvStore.Spec.update.html", "python/api/tensorstore.KvStore.Spec.url.html", "python/api/tensorstore.KvStore.TimestampedStorageGeneration.html", "python/api/tensorstore.KvStore.TimestampedStorageGeneration.__eq__.html", "python/api/tensorstore.KvStore.TimestampedStorageGeneration.__init__.html", "python/api/tensorstore.KvStore.TimestampedStorageGeneration.generation.html", "python/api/tensorstore.KvStore.TimestampedStorageGeneration.time.html", "python/api/tensorstore.KvStore.__delitem__.html", "python/api/tensorstore.KvStore.__getitem__.html", "python/api/tensorstore.KvStore.__repr__.html", "python/api/tensorstore.KvStore.__setitem__.html", "python/api/tensorstore.KvStore.copy.html", "python/api/tensorstore.KvStore.delete_range.html", "python/api/tensorstore.KvStore.list.html", "python/api/tensorstore.KvStore.open.html", "python/api/tensorstore.KvStore.path.html", "python/api/tensorstore.KvStore.read.html", "python/api/tensorstore.KvStore.spec.html", "python/api/tensorstore.KvStore.transaction.html", "python/api/tensorstore.KvStore.url.html", "python/api/tensorstore.KvStore.with_transaction.html", "python/api/tensorstore.KvStore.write.html", "python/api/tensorstore.OutputIndexMap.html", "python/api/tensorstore.OutputIndexMap.__init__-constant.html", "python/api/tensorstore.OutputIndexMap.__init__-index_array.html", "python/api/tensorstore.OutputIndexMap.__init__-input_dimension.html", "python/api/tensorstore.OutputIndexMap.index_array.html", "python/api/tensorstore.OutputIndexMap.index_range.html", "python/api/tensorstore.OutputIndexMap.input_dimension.html", "python/api/tensorstore.OutputIndexMap.method.html", "python/api/tensorstore.OutputIndexMap.offset.html", "python/api/tensorstore.OutputIndexMap.stride.html", "python/api/tensorstore.OutputIndexMaps.html", "python/api/tensorstore.OutputIndexMaps.__getitem__.html", "python/api/tensorstore.OutputIndexMaps.__len__.html", "python/api/tensorstore.OutputIndexMaps.rank.html", "python/api/tensorstore.OutputIndexMethod.html", "python/api/tensorstore.OutputIndexMethod.__init__.html", "python/api/tensorstore.OutputIndexMethod.__str__.html", "python/api/tensorstore.OutputIndexMethod.array.html", "python/api/tensorstore.OutputIndexMethod.constant.html", "python/api/tensorstore.OutputIndexMethod.name.html", "python/api/tensorstore.OutputIndexMethod.single_input_dimension.html", "python/api/tensorstore.OutputIndexMethod.value.html", "python/api/tensorstore.Promise.html", "python/api/tensorstore.Promise.new.html", "python/api/tensorstore.Promise.set_exception.html", "python/api/tensorstore.Promise.set_result.html", "python/api/tensorstore.Schema.html", "python/api/tensorstore.Schema.T.html", "python/api/tensorstore.Schema.__eq__.html", "python/api/tensorstore.Schema.__getitem__-domain.html", "python/api/tensorstore.Schema.__getitem__-expr.html", "python/api/tensorstore.Schema.__getitem__-indices.html", "python/api/tensorstore.Schema.__getitem__-transform.html", "python/api/tensorstore.Schema.__init__-components.html", "python/api/tensorstore.Schema.__init__-json.html", "python/api/tensorstore.Schema.__repr__.html", "python/api/tensorstore.Schema.chunk_layout.html", "python/api/tensorstore.Schema.codec.html", "python/api/tensorstore.Schema.copy.html", "python/api/tensorstore.Schema.dimension_units.html", "python/api/tensorstore.Schema.domain.html", "python/api/tensorstore.Schema.dtype.html", "python/api/tensorstore.Schema.fill_value.html", "python/api/tensorstore.Schema.ndim.html", "python/api/tensorstore.Schema.oindex.html", "python/api/tensorstore.Schema.origin.html", "python/api/tensorstore.Schema.rank.html", "python/api/tensorstore.Schema.shape.html", "python/api/tensorstore.Schema.size.html", "python/api/tensorstore.Schema.to_json.html", "python/api/tensorstore.Schema.update.html", "python/api/tensorstore.Schema.vindex.html", "python/api/tensorstore.Spec.html", "python/api/tensorstore.Spec.T.html", "python/api/tensorstore.Spec.__eq__.html", "python/api/tensorstore.Spec.__getitem__-domain.html", "python/api/tensorstore.Spec.__getitem__-expr.html", "python/api/tensorstore.Spec.__getitem__-indices.html", "python/api/tensorstore.Spec.__getitem__-transform.html", "python/api/tensorstore.Spec.__new__.html", "python/api/tensorstore.Spec.__repr__.html", "python/api/tensorstore.Spec.chunk_layout.html", "python/api/tensorstore.Spec.codec.html", "python/api/tensorstore.Spec.copy.html", "python/api/tensorstore.Spec.dimension_units.html", "python/api/tensorstore.Spec.domain.html", "python/api/tensorstore.Spec.dtype.html", "python/api/tensorstore.Spec.fill_value.html", "python/api/tensorstore.Spec.kvstore.html", "python/api/tensorstore.Spec.ndim.html", "python/api/tensorstore.Spec.oindex.html", "python/api/tensorstore.Spec.origin.html", "python/api/tensorstore.Spec.rank.html", "python/api/tensorstore.Spec.schema.html", "python/api/tensorstore.Spec.shape.html", "python/api/tensorstore.Spec.size.html", "python/api/tensorstore.Spec.to_json.html", "python/api/tensorstore.Spec.transform.html", "python/api/tensorstore.Spec.update.html", "python/api/tensorstore.Spec.vindex.html", "python/api/tensorstore.TensorStore.html", "python/api/tensorstore.TensorStore.T.html", "python/api/tensorstore.TensorStore.__array__.html", "python/api/tensorstore.TensorStore.__getitem__-domain.html", "python/api/tensorstore.TensorStore.__getitem__-expr.html", "python/api/tensorstore.TensorStore.__getitem__-indices.html", "python/api/tensorstore.TensorStore.__getitem__-transform.html", "python/api/tensorstore.TensorStore.__setitem__-domain.html", "python/api/tensorstore.TensorStore.__setitem__-expr.html", "python/api/tensorstore.TensorStore.__setitem__-indices.html", "python/api/tensorstore.TensorStore.__setitem__-transform.html", "python/api/tensorstore.TensorStore.astype.html", "python/api/tensorstore.TensorStore.chunk_layout.html", "python/api/tensorstore.TensorStore.codec.html", "python/api/tensorstore.TensorStore.dimension_units.html", "python/api/tensorstore.TensorStore.domain.html", "python/api/tensorstore.TensorStore.dtype.html", "python/api/tensorstore.TensorStore.fill_value.html", "python/api/tensorstore.TensorStore.kvstore.html", "python/api/tensorstore.TensorStore.mode.html", "python/api/tensorstore.TensorStore.ndim.html", "python/api/tensorstore.TensorStore.oindex.html", "python/api/tensorstore.TensorStore.oindex.__setitem__.html", "python/api/tensorstore.TensorStore.origin.html", "python/api/tensorstore.TensorStore.rank.html", "python/api/tensorstore.TensorStore.read.html", "python/api/tensorstore.TensorStore.readable.html", "python/api/tensorstore.TensorStore.resize.html", "python/api/tensorstore.TensorStore.resolve.html", "python/api/tensorstore.TensorStore.schema.html", "python/api/tensorstore.TensorStore.shape.html", "python/api/tensorstore.TensorStore.size.html", "python/api/tensorstore.TensorStore.spec.html", "python/api/tensorstore.TensorStore.transaction.html", "python/api/tensorstore.TensorStore.vindex.html", "python/api/tensorstore.TensorStore.vindex.__setitem__.html", "python/api/tensorstore.TensorStore.with_transaction.html", "python/api/tensorstore.TensorStore.writable.html", "python/api/tensorstore.TensorStore.write.html", "python/api/tensorstore.Transaction.html", "python/api/tensorstore.Transaction.__init__.html", "python/api/tensorstore.Transaction.abort.html", "python/api/tensorstore.Transaction.aborted.html", "python/api/tensorstore.Transaction.atomic.html", "python/api/tensorstore.Transaction.commit_async.html", "python/api/tensorstore.Transaction.commit_started.html", "python/api/tensorstore.Transaction.commit_sync.html", "python/api/tensorstore.Transaction.future.html", "python/api/tensorstore.Transaction.open.html", "python/api/tensorstore.Unit.html", "python/api/tensorstore.Unit.__eq__.html", "python/api/tensorstore.Unit.__init__-components.html", "python/api/tensorstore.Unit.__init__-json.html", "python/api/tensorstore.Unit.__init__-multiplier.html", "python/api/tensorstore.Unit.__init__-pair.html", "python/api/tensorstore.Unit.__init__-unit.html", "python/api/tensorstore.Unit.__mul__.html", "python/api/tensorstore.Unit.__truediv__.html", "python/api/tensorstore.Unit.base_unit.html", "python/api/tensorstore.Unit.multiplier.html", "python/api/tensorstore.Unit.to_json.html", "python/api/tensorstore.VirtualChunkedReadParameters.html", "python/api/tensorstore.VirtualChunkedReadParameters.if_not_equal.html", "python/api/tensorstore.VirtualChunkedReadParameters.staleness_bound.html", "python/api/tensorstore.VirtualChunkedWriteParameters.html", "python/api/tensorstore.VirtualChunkedWriteParameters.if_equal.html", "python/api/tensorstore.WriteFutures.html", "python/api/tensorstore.WriteFutures.add_done_callback.html", "python/api/tensorstore.WriteFutures.cancel.html", "python/api/tensorstore.WriteFutures.cancelled.html", "python/api/tensorstore.WriteFutures.commit.html", "python/api/tensorstore.WriteFutures.copy.html", "python/api/tensorstore.WriteFutures.done.html", "python/api/tensorstore.WriteFutures.exception.html", "python/api/tensorstore.WriteFutures.remove_done_callback.html", "python/api/tensorstore.WriteFutures.result.html", "python/api/tensorstore.array.html", "python/api/tensorstore.bfloat16.html", "python/api/tensorstore.bool.html", "python/api/tensorstore.cast.html", "python/api/tensorstore.complex128.html", "python/api/tensorstore.complex64.html", "python/api/tensorstore.d.html", "python/api/tensorstore.d.__class_getitem__.html", "python/api/tensorstore.downsample-spec.html", "python/api/tensorstore.downsample-store.html", "python/api/tensorstore.dtype.html", "python/api/tensorstore.dtype.__call__.html", "python/api/tensorstore.dtype.__init__-dtype.html", "python/api/tensorstore.dtype.__init__-name.html", "python/api/tensorstore.dtype.name.html", "python/api/tensorstore.dtype.numpy_dtype.html", "python/api/tensorstore.dtype.to_json.html", "python/api/tensorstore.dtype.type.html", "python/api/tensorstore.float16.html", "python/api/tensorstore.float32.html", "python/api/tensorstore.float64.html", "python/api/tensorstore.inf.html", "python/api/tensorstore.int16.html", "python/api/tensorstore.int32.html", "python/api/tensorstore.int64.html", "python/api/tensorstore.int8.html", "python/api/tensorstore.json.html", "python/api/tensorstore.newaxis.html", "python/api/tensorstore.open.html", "python/api/tensorstore.string.html", "python/api/tensorstore.uint16.html", "python/api/tensorstore.uint32.html", "python/api/tensorstore.uint64.html", "python/api/tensorstore.uint8.html", "python/api/tensorstore.ustring.html", "python/api/tensorstore.virtual_chunked.html", "python/indexing.html", "python/tutorial.html", "schema.html", "spec.html"]})