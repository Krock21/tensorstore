Search.setIndex({docurls:["context.html","driver/array/index.html","driver/cast/index.html","driver/downsample/index.html","driver/image/avif/index.html","driver/image/jpeg/index.html","driver/image/png/index.html","driver/image/tiff/index.html","driver/index.html","driver/json/index.html","driver/n5/index.html","driver/neuroglancer_precomputed/index.html","driver/stack/index.html","driver/zarr/index.html","environment.html","index.html","index_space.html","installation.html","kvstore/file/index.html","kvstore/gcs/index.html","kvstore/http/index.html","kvstore/index.html","kvstore/memory/index.html","kvstore/neuroglancer_uint64_sharded/index.html","python/api/index.html","python/api/tensorstore.ChunkLayout.html","python/api/tensorstore.ChunkLayout.Grid.html","python/api/tensorstore.ChunkLayout.Grid.__eq__.html","python/api/tensorstore.ChunkLayout.Grid.__init__-components.html","python/api/tensorstore.ChunkLayout.Grid.__init__-json.html","python/api/tensorstore.ChunkLayout.Grid.aspect_ratio.html","python/api/tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.elements.html","python/api/tensorstore.ChunkLayout.Grid.elements_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.ndim.html","python/api/tensorstore.ChunkLayout.Grid.rank.html","python/api/tensorstore.ChunkLayout.Grid.shape.html","python/api/tensorstore.ChunkLayout.Grid.shape_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.to_json.html","python/api/tensorstore.ChunkLayout.Grid.update.html","python/api/tensorstore.ChunkLayout.__eq__.html","python/api/tensorstore.ChunkLayout.__init__-components.html","python/api/tensorstore.ChunkLayout.__init__-json.html","python/api/tensorstore.ChunkLayout.codec_chunk.html","python/api/tensorstore.ChunkLayout.grid_origin.html","python/api/tensorstore.ChunkLayout.grid_origin_soft_constraint.html","python/api/tensorstore.ChunkLayout.inner_order.html","python/api/tensorstore.ChunkLayout.inner_order_soft_constraint.html","python/api/tensorstore.ChunkLayout.ndim.html","python/api/tensorstore.ChunkLayout.rank.html","python/api/tensorstore.ChunkLayout.read_chunk.html","python/api/tensorstore.ChunkLayout.read_chunk_template.html","python/api/tensorstore.ChunkLayout.to_json.html","python/api/tensorstore.ChunkLayout.update.html","python/api/tensorstore.ChunkLayout.write_chunk.html","python/api/tensorstore.ChunkLayout.write_chunk_template.html","python/api/tensorstore.CodecSpec.html","python/api/tensorstore.CodecSpec.__init__.html","python/api/tensorstore.CodecSpec.to_json.html","python/api/tensorstore.Context.html","python/api/tensorstore.Context.Resource.html","python/api/tensorstore.Context.Resource.to_json.html","python/api/tensorstore.Context.Spec.html","python/api/tensorstore.Context.Spec.__init__.html","python/api/tensorstore.Context.Spec.to_json.html","python/api/tensorstore.Context.__getitem__.html","python/api/tensorstore.Context.__init__-default.html","python/api/tensorstore.Context.__init__-json.html","python/api/tensorstore.Context.__init__-spec.html","python/api/tensorstore.Context.parent.html","python/api/tensorstore.Context.spec.html","python/api/tensorstore.Dim.html","python/api/tensorstore.Dim.__contains__-dim.html","python/api/tensorstore.Dim.__contains__-index.html","python/api/tensorstore.Dim.__eq__.html","python/api/tensorstore.Dim.__init__-exclusive_max.html","python/api/tensorstore.Dim.__init__-inclusive_max.html","python/api/tensorstore.Dim.__init__-size.html","python/api/tensorstore.Dim.__init__-unbounded.html","python/api/tensorstore.Dim.__iter__.html","python/api/tensorstore.Dim.__len__.html","python/api/tensorstore.Dim.__repr__.html","python/api/tensorstore.Dim.__str__.html","python/api/tensorstore.Dim.empty.html","python/api/tensorstore.Dim.exclusive_max.html","python/api/tensorstore.Dim.exclusive_min.html","python/api/tensorstore.Dim.finite.html","python/api/tensorstore.Dim.hull.html","python/api/tensorstore.Dim.implicit_lower.html","python/api/tensorstore.Dim.implicit_upper.html","python/api/tensorstore.Dim.inclusive_max.html","python/api/tensorstore.Dim.inclusive_min.html","python/api/tensorstore.Dim.intersect.html","python/api/tensorstore.Dim.label.html","python/api/tensorstore.Dim.size.html","python/api/tensorstore.DimExpression.html","python/api/tensorstore.DimExpression.__getitem__.html","python/api/tensorstore.DimExpression.diagonal.html","python/api/tensorstore.DimExpression.label.html","python/api/tensorstore.DimExpression.oindex.html","python/api/tensorstore.DimExpression.stride.html","python/api/tensorstore.DimExpression.translate_backward_by.html","python/api/tensorstore.DimExpression.translate_by.html","python/api/tensorstore.DimExpression.translate_to.html","python/api/tensorstore.DimExpression.transpose.html","python/api/tensorstore.DimExpression.vindex.html","python/api/tensorstore.Future.html","python/api/tensorstore.Future.__new__.html","python/api/tensorstore.Future.add_done_callback.html","python/api/tensorstore.Future.cancel.html","python/api/tensorstore.Future.cancelled.html","python/api/tensorstore.Future.done.html","python/api/tensorstore.Future.exception.html","python/api/tensorstore.Future.force.html","python/api/tensorstore.Future.remove_done_callback.html","python/api/tensorstore.Future.result.html","python/api/tensorstore.FutureLike.html","python/api/tensorstore.IndexDomain.html","python/api/tensorstore.IndexDomain.__getitem__-domain.html","python/api/tensorstore.IndexDomain.__getitem__-expr.html","python/api/tensorstore.IndexDomain.__getitem__-identifier.html","python/api/tensorstore.IndexDomain.__getitem__-selection.html","python/api/tensorstore.IndexDomain.__getitem__-transform.html","python/api/tensorstore.IndexDomain.__init__-components.html","python/api/tensorstore.IndexDomain.__init__-dimensions.html","python/api/tensorstore.IndexDomain.__init__-json.html","python/api/tensorstore.IndexDomain.__len__.html","python/api/tensorstore.IndexDomain.__repr__.html","python/api/tensorstore.IndexDomain.exclusive_max.html","python/api/tensorstore.IndexDomain.hull.html","python/api/tensorstore.IndexDomain.implicit_lower_bounds.html","python/api/tensorstore.IndexDomain.implicit_upper_bounds.html","python/api/tensorstore.IndexDomain.inclusive_max.html","python/api/tensorstore.IndexDomain.inclusive_min.html","python/api/tensorstore.IndexDomain.index_exp.html","python/api/tensorstore.IndexDomain.intersect.html","python/api/tensorstore.IndexDomain.labels.html","python/api/tensorstore.IndexDomain.ndim.html","python/api/tensorstore.IndexDomain.origin.html","python/api/tensorstore.IndexDomain.rank.html","python/api/tensorstore.IndexDomain.shape.html","python/api/tensorstore.IndexDomain.size.html","python/api/tensorstore.IndexDomain.to_json.html","python/api/tensorstore.IndexTransform.html","python/api/tensorstore.IndexTransform.T.html","python/api/tensorstore.IndexTransform.__call__.html","python/api/tensorstore.IndexTransform.__getitem__-domain.html","python/api/tensorstore.IndexTransform.__getitem__-expr.html","python/api/tensorstore.IndexTransform.__getitem__-indices.html","python/api/tensorstore.IndexTransform.__getitem__-transform.html","python/api/tensorstore.IndexTransform.__init__-components.html","python/api/tensorstore.IndexTransform.__init__-domain.html","python/api/tensorstore.IndexTransform.__init__-json.html","python/api/tensorstore.IndexTransform.__repr__.html","python/api/tensorstore.IndexTransform.domain.html","python/api/tensorstore.IndexTransform.implicit_lower_bounds.html","python/api/tensorstore.IndexTransform.implicit_upper_bounds.html","python/api/tensorstore.IndexTransform.input_exclusive_max.html","python/api/tensorstore.IndexTransform.input_inclusive_max.html","python/api/tensorstore.IndexTransform.input_inclusive_min.html","python/api/tensorstore.IndexTransform.input_labels.html","python/api/tensorstore.IndexTransform.input_origin.html","python/api/tensorstore.IndexTransform.input_rank.html","python/api/tensorstore.IndexTransform.input_shape.html","python/api/tensorstore.IndexTransform.ndim.html","python/api/tensorstore.IndexTransform.oindex.html","python/api/tensorstore.IndexTransform.origin.html","python/api/tensorstore.IndexTransform.output.html","python/api/tensorstore.IndexTransform.output_rank.html","python/api/tensorstore.IndexTransform.shape.html","python/api/tensorstore.IndexTransform.size.html","python/api/tensorstore.IndexTransform.to_json.html","python/api/tensorstore.IndexTransform.vindex.html","python/api/tensorstore.Indexable.html","python/api/tensorstore.KvStore.html","python/api/tensorstore.KvStore.KeyRange.html","python/api/tensorstore.KvStore.KeyRange.__eq__.html","python/api/tensorstore.KvStore.KeyRange.__init__.html","python/api/tensorstore.KvStore.KeyRange.copy.html","python/api/tensorstore.KvStore.KeyRange.empty.html","python/api/tensorstore.KvStore.KeyRange.exclusive_max.html","python/api/tensorstore.KvStore.KeyRange.inclusive_min.html","python/api/tensorstore.KvStore.ReadResult.html","python/api/tensorstore.KvStore.ReadResult.__init__.html","python/api/tensorstore.KvStore.ReadResult.stamp.html","python/api/tensorstore.KvStore.ReadResult.state.html","python/api/tensorstore.KvStore.ReadResult.value.html","python/api/tensorstore.KvStore.Spec.html","python/api/tensorstore.KvStore.Spec.__add__.html","python/api/tensorstore.KvStore.Spec.__new__.html","python/api/tensorstore.KvStore.Spec.__repr__.html","python/api/tensorstore.KvStore.Spec.__truediv__.html","python/api/tensorstore.KvStore.Spec.copy.html","python/api/tensorstore.KvStore.Spec.path.html","python/api/tensorstore.KvStore.Spec.to_json.html","python/api/tensorstore.KvStore.Spec.update.html","python/api/tensorstore.KvStore.Spec.url.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.__eq__.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.__init__.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.generation.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.time.html","python/api/tensorstore.KvStore.__delitem__.html","python/api/tensorstore.KvStore.__getitem__.html","python/api/tensorstore.KvStore.__repr__.html","python/api/tensorstore.KvStore.__setitem__.html","python/api/tensorstore.KvStore.copy.html","python/api/tensorstore.KvStore.delete_range.html","python/api/tensorstore.KvStore.list.html","python/api/tensorstore.KvStore.open.html","python/api/tensorstore.KvStore.path.html","python/api/tensorstore.KvStore.read.html","python/api/tensorstore.KvStore.spec.html","python/api/tensorstore.KvStore.transaction.html","python/api/tensorstore.KvStore.url.html","python/api/tensorstore.KvStore.with_transaction.html","python/api/tensorstore.KvStore.write.html","python/api/tensorstore.OutputIndexMap.html","python/api/tensorstore.OutputIndexMap.__init__-constant.html","python/api/tensorstore.OutputIndexMap.__init__-index_array.html","python/api/tensorstore.OutputIndexMap.__init__-input_dimension.html","python/api/tensorstore.OutputIndexMap.index_array.html","python/api/tensorstore.OutputIndexMap.index_range.html","python/api/tensorstore.OutputIndexMap.input_dimension.html","python/api/tensorstore.OutputIndexMap.method.html","python/api/tensorstore.OutputIndexMap.offset.html","python/api/tensorstore.OutputIndexMap.stride.html","python/api/tensorstore.OutputIndexMaps.html","python/api/tensorstore.OutputIndexMaps.__getitem__.html","python/api/tensorstore.OutputIndexMaps.__len__.html","python/api/tensorstore.OutputIndexMaps.rank.html","python/api/tensorstore.OutputIndexMethod.html","python/api/tensorstore.OutputIndexMethod.__init__.html","python/api/tensorstore.OutputIndexMethod.__str__.html","python/api/tensorstore.OutputIndexMethod.array.html","python/api/tensorstore.OutputIndexMethod.constant.html","python/api/tensorstore.OutputIndexMethod.name.html","python/api/tensorstore.OutputIndexMethod.single_input_dimension.html","python/api/tensorstore.OutputIndexMethod.value.html","python/api/tensorstore.Promise.html","python/api/tensorstore.Promise.new.html","python/api/tensorstore.Promise.set_exception.html","python/api/tensorstore.Promise.set_result.html","python/api/tensorstore.Schema.html","python/api/tensorstore.Schema.T.html","python/api/tensorstore.Schema.__eq__.html","python/api/tensorstore.Schema.__getitem__-domain.html","python/api/tensorstore.Schema.__getitem__-expr.html","python/api/tensorstore.Schema.__getitem__-indices.html","python/api/tensorstore.Schema.__getitem__-transform.html","python/api/tensorstore.Schema.__init__-components.html","python/api/tensorstore.Schema.__init__-json.html","python/api/tensorstore.Schema.__repr__.html","python/api/tensorstore.Schema.chunk_layout.html","python/api/tensorstore.Schema.codec.html","python/api/tensorstore.Schema.copy.html","python/api/tensorstore.Schema.dimension_units.html","python/api/tensorstore.Schema.domain.html","python/api/tensorstore.Schema.dtype.html","python/api/tensorstore.Schema.fill_value.html","python/api/tensorstore.Schema.ndim.html","python/api/tensorstore.Schema.oindex.html","python/api/tensorstore.Schema.origin.html","python/api/tensorstore.Schema.rank.html","python/api/tensorstore.Schema.shape.html","python/api/tensorstore.Schema.size.html","python/api/tensorstore.Schema.to_json.html","python/api/tensorstore.Schema.update.html","python/api/tensorstore.Schema.vindex.html","python/api/tensorstore.Spec.html","python/api/tensorstore.Spec.T.html","python/api/tensorstore.Spec.__eq__.html","python/api/tensorstore.Spec.__getitem__-domain.html","python/api/tensorstore.Spec.__getitem__-expr.html","python/api/tensorstore.Spec.__getitem__-indices.html","python/api/tensorstore.Spec.__getitem__-transform.html","python/api/tensorstore.Spec.__new__.html","python/api/tensorstore.Spec.__repr__.html","python/api/tensorstore.Spec.chunk_layout.html","python/api/tensorstore.Spec.codec.html","python/api/tensorstore.Spec.copy.html","python/api/tensorstore.Spec.dimension_units.html","python/api/tensorstore.Spec.domain.html","python/api/tensorstore.Spec.dtype.html","python/api/tensorstore.Spec.fill_value.html","python/api/tensorstore.Spec.kvstore.html","python/api/tensorstore.Spec.ndim.html","python/api/tensorstore.Spec.oindex.html","python/api/tensorstore.Spec.origin.html","python/api/tensorstore.Spec.rank.html","python/api/tensorstore.Spec.schema.html","python/api/tensorstore.Spec.shape.html","python/api/tensorstore.Spec.size.html","python/api/tensorstore.Spec.to_json.html","python/api/tensorstore.Spec.transform.html","python/api/tensorstore.Spec.update.html","python/api/tensorstore.Spec.vindex.html","python/api/tensorstore.TensorStore.html","python/api/tensorstore.TensorStore.T.html","python/api/tensorstore.TensorStore.__array__.html","python/api/tensorstore.TensorStore.__getitem__-domain.html","python/api/tensorstore.TensorStore.__getitem__-expr.html","python/api/tensorstore.TensorStore.__getitem__-indices.html","python/api/tensorstore.TensorStore.__getitem__-transform.html","python/api/tensorstore.TensorStore.__setitem__-domain.html","python/api/tensorstore.TensorStore.__setitem__-expr.html","python/api/tensorstore.TensorStore.__setitem__-indices.html","python/api/tensorstore.TensorStore.__setitem__-transform.html","python/api/tensorstore.TensorStore.astype.html","python/api/tensorstore.TensorStore.chunk_layout.html","python/api/tensorstore.TensorStore.codec.html","python/api/tensorstore.TensorStore.dimension_units.html","python/api/tensorstore.TensorStore.domain.html","python/api/tensorstore.TensorStore.dtype.html","python/api/tensorstore.TensorStore.fill_value.html","python/api/tensorstore.TensorStore.kvstore.html","python/api/tensorstore.TensorStore.mode.html","python/api/tensorstore.TensorStore.ndim.html","python/api/tensorstore.TensorStore.oindex.html","python/api/tensorstore.TensorStore.oindex.__setitem__.html","python/api/tensorstore.TensorStore.origin.html","python/api/tensorstore.TensorStore.rank.html","python/api/tensorstore.TensorStore.read.html","python/api/tensorstore.TensorStore.readable.html","python/api/tensorstore.TensorStore.resolve.html","python/api/tensorstore.TensorStore.schema.html","python/api/tensorstore.TensorStore.shape.html","python/api/tensorstore.TensorStore.size.html","python/api/tensorstore.TensorStore.spec.html","python/api/tensorstore.TensorStore.transaction.html","python/api/tensorstore.TensorStore.vindex.html","python/api/tensorstore.TensorStore.vindex.__setitem__.html","python/api/tensorstore.TensorStore.with_transaction.html","python/api/tensorstore.TensorStore.writable.html","python/api/tensorstore.TensorStore.write.html","python/api/tensorstore.Transaction.html","python/api/tensorstore.Transaction.__init__.html","python/api/tensorstore.Transaction.abort.html","python/api/tensorstore.Transaction.aborted.html","python/api/tensorstore.Transaction.atomic.html","python/api/tensorstore.Transaction.commit_async.html","python/api/tensorstore.Transaction.commit_started.html","python/api/tensorstore.Transaction.commit_sync.html","python/api/tensorstore.Transaction.future.html","python/api/tensorstore.Transaction.open.html","python/api/tensorstore.Unit.html","python/api/tensorstore.Unit.__eq__.html","python/api/tensorstore.Unit.__init__-components.html","python/api/tensorstore.Unit.__init__-json.html","python/api/tensorstore.Unit.__init__-multiplier.html","python/api/tensorstore.Unit.__init__-pair.html","python/api/tensorstore.Unit.__init__-unit.html","python/api/tensorstore.Unit.__mul__.html","python/api/tensorstore.Unit.__truediv__.html","python/api/tensorstore.Unit.base_unit.html","python/api/tensorstore.Unit.multiplier.html","python/api/tensorstore.Unit.to_json.html","python/api/tensorstore.VirtualChunkedReadParameters.html","python/api/tensorstore.VirtualChunkedReadParameters.if_not_equal.html","python/api/tensorstore.VirtualChunkedReadParameters.staleness_bound.html","python/api/tensorstore.VirtualChunkedWriteParameters.html","python/api/tensorstore.VirtualChunkedWriteParameters.if_equal.html","python/api/tensorstore.WriteFutures.html","python/api/tensorstore.WriteFutures.add_done_callback.html","python/api/tensorstore.WriteFutures.cancel.html","python/api/tensorstore.WriteFutures.cancelled.html","python/api/tensorstore.WriteFutures.commit.html","python/api/tensorstore.WriteFutures.copy.html","python/api/tensorstore.WriteFutures.done.html","python/api/tensorstore.WriteFutures.exception.html","python/api/tensorstore.WriteFutures.remove_done_callback.html","python/api/tensorstore.WriteFutures.result.html","python/api/tensorstore.array.html","python/api/tensorstore.bfloat16.html","python/api/tensorstore.bool.html","python/api/tensorstore.cast.html","python/api/tensorstore.complex128.html","python/api/tensorstore.complex64.html","python/api/tensorstore.d.html","python/api/tensorstore.d.__class_getitem__.html","python/api/tensorstore.downsample-spec.html","python/api/tensorstore.downsample-store.html","python/api/tensorstore.dtype.html","python/api/tensorstore.dtype.__call__.html","python/api/tensorstore.dtype.__init__-dtype.html","python/api/tensorstore.dtype.__init__-name.html","python/api/tensorstore.dtype.name.html","python/api/tensorstore.dtype.numpy_dtype.html","python/api/tensorstore.dtype.to_json.html","python/api/tensorstore.dtype.type.html","python/api/tensorstore.float16.html","python/api/tensorstore.float32.html","python/api/tensorstore.float64.html","python/api/tensorstore.inf.html","python/api/tensorstore.int16.html","python/api/tensorstore.int32.html","python/api/tensorstore.int64.html","python/api/tensorstore.int8.html","python/api/tensorstore.json.html","python/api/tensorstore.newaxis.html","python/api/tensorstore.open.html","python/api/tensorstore.string.html","python/api/tensorstore.uint16.html","python/api/tensorstore.uint32.html","python/api/tensorstore.uint64.html","python/api/tensorstore.uint8.html","python/api/tensorstore.ustring.html","python/api/tensorstore.virtual_chunked.html","python/indexing.html","python/tutorial.html","schema.html","spec.html"],envversion:{"sphinx.domains.c":2,"sphinx.domains.changeset":1,"sphinx.domains.citation":1,"sphinx.domains.cpp":4,"sphinx.domains.index":1,"sphinx.domains.javascript":2,"sphinx.domains.math":2,"sphinx.domains.python":3,"sphinx.domains.rst":2,"sphinx.domains.std":2,"sphinx.ext.intersphinx":1,sphinx:56},objects:{"":{"ChunkLayout/Grid":[410,0,1,"json-ChunkLayout/Grid","Constraints on the write/read/codec chunk grids."],"KvStoreUrl/file":[18,0,1,"json-KvStoreUrl/file","file:// KvStore URL scheme"],"KvStoreUrl/gs":[19,0,1,"json-KvStoreUrl/gs","gs:// KvStore URL scheme"],"KvStoreUrl/http":[20,0,1,"json-KvStoreUrl/http","http:// and https:// KvStore URL scheme"],"KvStoreUrl/memory":[22,0,1,"json-KvStoreUrl/memory","memory:// KvStore URL scheme"],"driver/array":[1,0,1,"json-driver/array",""],"driver/avif":[4,0,1,"json-driver/avif",""],"driver/cast":[2,0,1,"json-driver/cast",""],"driver/downsample":[3,0,1,"json-driver/downsample",""],"driver/jpeg":[5,0,1,"json-driver/jpeg",""],"driver/json":[9,0,1,"json-driver/json",""],"driver/n5":[10,0,1,"json-driver/n5",""],"driver/n5/Codec":[10,0,1,"json-driver/n5/Codec",""],"driver/n5/Compression":[10,0,1,"json-driver/n5/Compression",""],"driver/n5/Compression/blosc":[10,0,1,"json-driver/n5/Compression/blosc",""],"driver/n5/Compression/bzip2":[10,0,1,"json-driver/n5/Compression/bzip2",""],"driver/n5/Compression/gzip":[10,0,1,"json-driver/n5/Compression/gzip",""],"driver/n5/Compression/raw":[10,0,1,"json-driver/n5/Compression/raw",""],"driver/n5/Compression/xz":[10,0,1,"json-driver/n5/Compression/xz",""],"driver/neuroglancer_precomputed":[11,0,1,"json-driver/neuroglancer_precomputed",""],"driver/neuroglancer_precomputed/Codec":[11,0,1,"json-driver/neuroglancer_precomputed/Codec","Neuroglancer Precomputed Codec"],"driver/png":[6,0,1,"json-driver/png",""],"driver/stack":[12,0,1,"json-driver/stack",""],"driver/tiff":[7,0,1,"json-driver/tiff",""],"driver/zarr":[13,0,1,"json-driver/zarr",""],"driver/zarr/Codec":[13,0,1,"json-driver/zarr/Codec",""],"driver/zarr/Compressor":[13,0,1,"json-driver/zarr/Compressor","Compressor"],"driver/zarr/Compressor/blosc":[13,0,1,"json-driver/zarr/Compressor/blosc",""],"driver/zarr/Compressor/bz2":[13,0,1,"json-driver/zarr/Compressor/bz2",""],"driver/zarr/Compressor/zlib":[13,0,1,"json-driver/zarr/Compressor/zlib",""],"kvstore/file":[18,0,1,"json-kvstore/file","JSON specification of file-backed key-value store."],"kvstore/gcs":[19,0,1,"json-kvstore/gcs",""],"kvstore/http":[20,0,1,"json-kvstore/http",""],"kvstore/memory":[22,0,1,"json-kvstore/memory",""],"kvstore/neuroglancer_uint64_sharded":[23,0,1,"json-kvstore/neuroglancer_uint64_sharded","JSON specification of neuroglancer_uint64_sharded key-value store."],"kvstore/neuroglancer_uint64_sharded/ShardingSpec":[23,0,1,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec","Sharding metadata"],ARCHFLAGS:[17,9,1,"-",""],BAZELISK_HOME:[17,9,1,"-",""],CacheRevalidationBound:[8,0,1,"json-CacheRevalidationBound",""],ChunkLayout:[410,0,1,"json-ChunkLayout",""],Codec:[410,0,1,"json-Codec",""],Context:[0,0,1,"json-Context",""],ContextResource:[0,0,1,"json-ContextResource",""],DownsampleMethod:[3,0,1,"json-DownsampleMethod","Downsample method"],GOOGLE_APPLICATION_CREDENTIALS:[14,9,1,"-",""],IndexDomain:[16,0,1,"json-IndexDomain",""],IndexInterval:[16,0,1,"json-IndexInterval","Specifies a closed interval of integer index values."],IndexTransform:[16,0,1,"json-IndexTransform",""],KeyValueStoreBackedChunkDriver:[8,0,1,"json-KeyValueStoreBackedChunkDriver",""],KvStore:[21,0,1,"json-KvStore","Key-value store specification."],KvStoreUrl:[21,0,1,"json-KvStoreUrl","URL representation of a key-value store."],MACOSX_DEPLOYMENT_TARGET:[17,9,1,"-",""],OutputIndexMap:[16,0,1,"json-OutputIndexMap","Specifies a transform from an input space to a single output index."],SSLKEYLOGFILE:[14,9,1,"-",""],Schema:[410,0,1,"json-Schema",""],TENSORSTORE_BAZELISK:[17,9,1,"-",""],TENSORSTORE_BAZEL_BUILD_OPTIONS:[17,9,1,"-",""],TENSORSTORE_BAZEL_COMPILATION_MODE:[17,9,1,"-",""],TENSORSTORE_BAZEL_STARTUP_OPTIONS:[17,9,1,"-",""],TENSORSTORE_CA_BUNDLE:[14,9,1,"-",""],TENSORSTORE_CA_PATH:[14,9,1,"-",""],TENSORSTORE_CURL_VERBOSE:[14,9,1,"-",""],TENSORSTORE_GCS_HTTP_URL:[14,9,1,"-",""],TENSORSTORE_GCS_REQUEST_CONCURRENCY:[14,9,1,"-",""],TENSORSTORE_PREBUILT_DIR:[17,9,1,"-",""],TENSORSTORE_SYSTEM_LIBS:[17,9,1,"-",""],TensorStore:[411,0,1,"json-TensorStore","Specifies a TensorStore to open/create."],Unit:[410,0,1,"json-Unit","Specifies a physical quantity/unit."],all_proxy:[14,9,1,"-",""],dtype:[411,0,1,"json-dtype","Specifies a TensorStore data type."],http_proxy:[14,9,1,"-",""],https_proxy:[14,9,1,"-",""],no_proxy:[14,9,1,"-",""]},"ChunkLayout/Grid":{aspect_ratio:[410,1,2,"json-ChunkLayout/Grid.aspect_ratio","Aspect ratio of the chunk shape."],aspect_ratio_soft_constraint:[410,1,2,"json-ChunkLayout/Grid.aspect_ratio_soft_constraint","Soft constraint on aspect ratio, lower precedence than aspect_ratio."],elements:[410,1,2,"json-ChunkLayout/Grid.elements","Preferred number of elements per chunk."],elements_soft_constraint:[410,1,2,"json-ChunkLayout/Grid.elements_soft_constraint","Preferred number of elements per chunk, lower precedence than\nelements."],shape:[410,1,2,"json-ChunkLayout/Grid.shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[410,1,2,"json-ChunkLayout/Grid.shape_soft_constraint","Preferred chunk sizes for each dimension."]},"Context.cache_pool":{queued_for_writeback_bytes_limit:[0,1,2,"json-Context.cache_pool.queued_for_writeback_bytes_limit",""],total_bytes_limit:[0,1,2,"json-Context.cache_pool.total_bytes_limit",""]},"Context.data_copy_concurrency":{limit:[0,1,2,"json-Context.data_copy_concurrency.limit",""]},"Context.file_io_concurrency":{limit:[0,1,2,"json-Context.file_io_concurrency.limit",""]},"Context.gcs_request_concurrency":{limit:[19,1,2,"json-Context.gcs_request_concurrency.limit",""]},"Context.gcs_request_retries":{initial_delay:[19,1,2,"json-Context.gcs_request_retries.initial_delay",""],max_delay:[19,1,2,"json-Context.gcs_request_retries.max_delay",""],max_retries:[19,1,2,"json-Context.gcs_request_retries.max_retries",""]},"Context.gcs_user_project":{project_id:[19,1,2,"json-Context.gcs_user_project.project_id","Google Cloud project id, e.g. \"my-project\".  The Google Cloud\naccount that is used must have appropriate permissions to bill to the\nspecified project."]},"Context.http_request_concurrency":{limit:[20,1,2,"json-Context.http_request_concurrency.limit",""]},"Context.http_request_retries":{initial_delay:[20,1,2,"json-Context.http_request_retries.initial_delay",""],max_delay:[20,1,2,"json-Context.http_request_retries.max_delay",""],max_retries:[20,1,2,"json-Context.http_request_retries.max_retries",""]},"driver/array":{array:[1,1,2,"json-driver/array.array","Nested array of rank equal to rank specifying the initial value."],context:[1,1,2,"json-driver/array.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[1,1,2,"json-driver/array.data_copy_concurrency",""],driver:[1,1,2,"json-driver/array.driver",""],dtype:[1,1,2,"json-driver/array.dtype","Specifies the data type."],rank:[1,1,2,"json-driver/array.rank","Specifies the rank of the TensorStore."],schema:[1,1,2,"json-driver/array.schema","Specifies constraints on the schema."],transform:[1,1,2,"json-driver/array.transform","Specifies a transform."]},"driver/avif":{cache_pool:[4,1,2,"json-driver/avif.cache_pool",""],context:[4,1,2,"json-driver/avif.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[4,1,2,"json-driver/avif.data_copy_concurrency",""],driver:[4,1,2,"json-driver/avif.driver",""],dtype:[4,1,2,"json-driver/avif.dtype",""],kvstore:[4,1,2,"json-driver/avif.kvstore",""],quantizer:[4,1,2,"json-driver/avif.quantizer",""],rank:[4,1,2,"json-driver/avif.rank","Specifies the rank of the TensorStore."],schema:[4,1,2,"json-driver/avif.schema","Specifies constraints on the schema."],speed:[4,1,2,"json-driver/avif.speed",""],transform:[4,1,2,"json-driver/avif.transform","Specifies a transform."]},"driver/cast":{base:[2,1,2,"json-driver/cast.base","Base TensorStore to convert."],context:[2,1,2,"json-driver/cast.context","Specifies context resources that augment/override the parent context."],driver:[2,1,2,"json-driver/cast.driver",""],dtype:[2,1,2,"json-driver/cast.dtype","Specifies the data type under which to view the base TensorStore."],rank:[2,1,2,"json-driver/cast.rank","Specifies the rank of the TensorStore."],schema:[2,1,2,"json-driver/cast.schema","Specifies constraints on the schema."],transform:[2,1,2,"json-driver/cast.transform","Specifies a transform."]},"driver/downsample":{base:[3,1,2,"json-driver/downsample.base","Base TensorStore to downsample."],context:[3,1,2,"json-driver/downsample.context","Specifies context resources that augment/override the parent context."],downsample_factors:[3,1,2,"json-driver/downsample.downsample_factors",""],downsample_method:[3,1,2,"json-driver/downsample.downsample_method",""],driver:[3,1,2,"json-driver/downsample.driver",""],dtype:[3,1,2,"json-driver/downsample.dtype","Specifies the data type."],rank:[3,1,2,"json-driver/downsample.rank","Specifies the rank of the TensorStore."],schema:[3,1,2,"json-driver/downsample.schema","Specifies constraints on the schema."],transform:[3,1,2,"json-driver/downsample.transform","Specifies a transform."]},"driver/jpeg":{cache_pool:[5,1,2,"json-driver/jpeg.cache_pool",""],context:[5,1,2,"json-driver/jpeg.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[5,1,2,"json-driver/jpeg.data_copy_concurrency",""],driver:[5,1,2,"json-driver/jpeg.driver",""],dtype:[5,1,2,"json-driver/jpeg.dtype",""],kvstore:[5,1,2,"json-driver/jpeg.kvstore",""],quality:[5,1,2,"json-driver/jpeg.quality",""],rank:[5,1,2,"json-driver/jpeg.rank","Specifies the rank of the TensorStore."],schema:[5,1,2,"json-driver/jpeg.schema","Specifies constraints on the schema."],transform:[5,1,2,"json-driver/jpeg.transform","Specifies a transform."]},"driver/json":{cache_pool:[9,1,2,"json-driver/json.cache_pool",""],context:[9,1,2,"json-driver/json.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[9,1,2,"json-driver/json.data_copy_concurrency",""],driver:[9,1,2,"json-driver/json.driver",""],dtype:[9,1,2,"json-driver/json.dtype",""],json_pointer:[9,1,2,"json-driver/json.json_pointer",""],kvstore:[9,1,2,"json-driver/json.kvstore",""],path:[9,1,2,"json-driver/json.path","Additional path to the JSON file within the KvStore specified by\nkvstore."],rank:[9,1,2,"json-driver/json.rank",""],recheck_cached_data:[9,1,2,"json-driver/json.recheck_cached_data",""],schema:[9,1,2,"json-driver/json.schema","Specifies constraints on the schema."],transform:[9,1,2,"json-driver/json.transform","Specifies a transform."]},"driver/n5":{assume_metadata:[10,1,2,"json-driver/n5.assume_metadata",""],cache_pool:[10,1,2,"json-driver/n5.cache_pool",""],context:[10,1,2,"json-driver/n5.context","Specifies context resources that augment/override the parent context."],create:[10,1,2,"json-driver/n5.create",""],data_copy_concurrency:[10,1,2,"json-driver/n5.data_copy_concurrency",""],delete_existing:[10,1,2,"json-driver/n5.delete_existing",""],driver:[10,1,2,"json-driver/n5.driver",""],dtype:[10,1,2,"json-driver/n5.dtype","Specifies the data type."],kvstore:[10,1,2,"json-driver/n5.kvstore",""],metadata:[10,1,2,"json-driver/n5.metadata","N5 array metadata."],open:[10,1,2,"json-driver/n5.open",""],path:[10,1,2,"json-driver/n5.path","Additional path within the KvStore specified by\nkvstore."],rank:[10,1,2,"json-driver/n5.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[10,1,2,"json-driver/n5.recheck_cached_data",""],recheck_cached_metadata:[10,1,2,"json-driver/n5.recheck_cached_metadata",""],schema:[10,1,2,"json-driver/n5.schema","Specifies constraints on the schema."],transform:[10,1,2,"json-driver/n5.transform","Specifies a transform."]},"driver/n5.metadata":{axes:[10,1,2,"json-driver/n5.metadata.axes","Specifies a label for each dimension of the dataset."],blockSize:[10,1,2,"json-driver/n5.metadata.blockSize","Chunk dimensions."],compression:[10,1,2,"json-driver/n5.metadata.compression","Specifies the chunk compression method."],dataType:[10,1,2,"json-driver/n5.metadata.dataType","Specifies the data type."],dimensions:[10,1,2,"json-driver/n5.metadata.dimensions","Dimensions of the dataset."],resolution:[10,1,2,"json-driver/n5.metadata.resolution","Specifies the multiplier for the physical units."],units:[10,1,2,"json-driver/n5.metadata.units","Specifies the base physical unit for each dimension."]},"driver/n5/Codec":{compression:[10,1,2,"json-driver/n5/Codec.compression","Specifies the chunk compression method."],driver:[10,1,2,"json-driver/n5/Codec.driver",""]},"driver/n5/Compression":{type:[10,1,2,"json-driver/n5/Compression.type",""]},"driver/n5/Compression/blosc":{clevel:[10,1,2,"json-driver/n5/Compression/blosc.clevel","Specifies the Blosc compression level to use."],cname:[10,1,2,"json-driver/n5/Compression/blosc.cname",""],shuffle:[10,1,2,"json-driver/n5/Compression/blosc.shuffle",""],type:[10,1,2,"json-driver/n5/Compression/blosc.type",""]},"driver/n5/Compression/bzip2":{blockSize:[10,1,2,"json-driver/n5/Compression/bzip2.blockSize","Specifies the bzip2 block size to use (in units of 100KB), which also determine the compression level."],type:[10,1,2,"json-driver/n5/Compression/bzip2.type",""]},"driver/n5/Compression/gzip":{level:[10,1,2,"json-driver/n5/Compression/gzip.level","Specifies the zlib compression level to use."],type:[10,1,2,"json-driver/n5/Compression/gzip.type",""],useZlib:[10,1,2,"json-driver/n5/Compression/gzip.useZlib",""]},"driver/n5/Compression/raw":{type:[10,1,2,"json-driver/n5/Compression/raw.type",""]},"driver/n5/Compression/xz":{preset:[10,1,2,"json-driver/n5/Compression/xz.preset",""],type:[10,1,2,"json-driver/n5/Compression/xz.type",""]},"driver/neuroglancer_precomputed":{assume_metadata:[11,1,2,"json-driver/neuroglancer_precomputed.assume_metadata",""],cache_pool:[11,1,2,"json-driver/neuroglancer_precomputed.cache_pool",""],context:[11,1,2,"json-driver/neuroglancer_precomputed.context","Specifies context resources that augment/override the parent context."],create:[11,1,2,"json-driver/neuroglancer_precomputed.create",""],data_copy_concurrency:[11,1,2,"json-driver/neuroglancer_precomputed.data_copy_concurrency",""],delete_existing:[11,1,2,"json-driver/neuroglancer_precomputed.delete_existing",""],driver:[11,1,2,"json-driver/neuroglancer_precomputed.driver",""],dtype:[11,1,2,"json-driver/neuroglancer_precomputed.dtype","Specifies the data type."],kvstore:[11,1,2,"json-driver/neuroglancer_precomputed.kvstore",""],multiscale_metadata:[11,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata","Scale-independent metadata."],open:[11,1,2,"json-driver/neuroglancer_precomputed.open",""],path:[11,1,2,"json-driver/neuroglancer_precomputed.path","Additional path within the KvStore specified by\nkvstore."],rank:[11,1,2,"json-driver/neuroglancer_precomputed.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[11,1,2,"json-driver/neuroglancer_precomputed.recheck_cached_data",""],recheck_cached_metadata:[11,1,2,"json-driver/neuroglancer_precomputed.recheck_cached_metadata",""],scale_index:[11,1,2,"json-driver/neuroglancer_precomputed.scale_index","Zero-based index of the scale to open or create."],scale_metadata:[11,1,2,"json-driver/neuroglancer_precomputed.scale_metadata","Per-scale metadata."],schema:[11,1,2,"json-driver/neuroglancer_precomputed.schema","Specifies constraints on the schema."],transform:[11,1,2,"json-driver/neuroglancer_precomputed.transform","Specifies a transform."]},"driver/neuroglancer_precomputed.multiscale_metadata":{data_type:[11,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.data_type","Specifies the data type."],num_channels:[11,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.num_channels","Number of channels."],type:[11,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.type","Specifying the type of volume."]},"driver/neuroglancer_precomputed.scale_metadata":{chunk_size:[11,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.chunk_size","Chunk dimensions (XYZ order)."],compressed_segmentation_block_size:[11,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.compressed_segmentation_block_size","Block size for compressed segmentation encoding."],encoding:[11,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.encoding","Specifies the chunk encoding."],jpeg_quality:[11,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.jpeg_quality","JPEG encoding quality."],key:[11,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.key","Specifies the scale key (relative to path)."],resolution:[11,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.resolution","Voxel size in nanometers (XYZ order)."],sharding:[11,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.sharding",""],size:[11,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.size","Voxel dimensions of the volume (XYZ order)."],voxel_offset:[11,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.voxel_offset","Voxel origin of the volume (XYZ order)."]},"driver/neuroglancer_precomputed/Codec":{driver:[11,1,2,"json-driver/neuroglancer_precomputed/Codec.driver",""],encoding:[11,1,2,"json-driver/neuroglancer_precomputed/Codec.encoding","Specifies the chunk encoding."],jpeg_quality:[11,1,2,"json-driver/neuroglancer_precomputed/Codec.jpeg_quality","JPEG encoding quality."],shard_data_encoding:[11,1,2,"json-driver/neuroglancer_precomputed/Codec.shard_data_encoding","Additional data compression when using the sharded format."]},"driver/png":{cache_pool:[6,1,2,"json-driver/png.cache_pool",""],compression_level:[6,1,2,"json-driver/png.compression_level",""],context:[6,1,2,"json-driver/png.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[6,1,2,"json-driver/png.data_copy_concurrency",""],driver:[6,1,2,"json-driver/png.driver",""],dtype:[6,1,2,"json-driver/png.dtype",""],kvstore:[6,1,2,"json-driver/png.kvstore",""],rank:[6,1,2,"json-driver/png.rank","Specifies the rank of the TensorStore."],schema:[6,1,2,"json-driver/png.schema","Specifies constraints on the schema."],transform:[6,1,2,"json-driver/png.transform","Specifies a transform."]},"driver/stack":{context:[12,1,2,"json-driver/stack.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[12,1,2,"json-driver/stack.data_copy_concurrency",""],driver:[12,1,2,"json-driver/stack.driver",""],dtype:[12,1,2,"json-driver/stack.dtype","Specifies the data type."],layers:[12,1,2,"json-driver/stack.layers","Array of layered tensorstore drivers."],rank:[12,1,2,"json-driver/stack.rank","Specifies the rank of the TensorStore."],schema:[12,1,2,"json-driver/stack.schema","Specifies constraints on the schema."],transform:[12,1,2,"json-driver/stack.transform","Specifies a transform."]},"driver/tiff":{cache_pool:[7,1,2,"json-driver/tiff.cache_pool",""],context:[7,1,2,"json-driver/tiff.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[7,1,2,"json-driver/tiff.data_copy_concurrency",""],driver:[7,1,2,"json-driver/tiff.driver",""],dtype:[7,1,2,"json-driver/tiff.dtype",""],kvstore:[7,1,2,"json-driver/tiff.kvstore",""],page:[7,1,2,"json-driver/tiff.page",""],rank:[7,1,2,"json-driver/tiff.rank","Specifies the rank of the TensorStore."],schema:[7,1,2,"json-driver/tiff.schema","Specifies constraints on the schema."],transform:[7,1,2,"json-driver/tiff.transform","Specifies a transform."]},"driver/zarr":{assume_metadata:[13,1,2,"json-driver/zarr.assume_metadata",""],cache_pool:[13,1,2,"json-driver/zarr.cache_pool",""],context:[13,1,2,"json-driver/zarr.context","Specifies context resources that augment/override the parent context."],create:[13,1,2,"json-driver/zarr.create",""],data_copy_concurrency:[13,1,2,"json-driver/zarr.data_copy_concurrency",""],delete_existing:[13,1,2,"json-driver/zarr.delete_existing",""],driver:[13,1,2,"json-driver/zarr.driver",""],dtype:[13,1,2,"json-driver/zarr.dtype","Specifies the data type."],field:[13,1,2,"json-driver/zarr.field","Name of field to open."],key_encoding:[13,1,2,"json-driver/zarr.key_encoding","Specifies the encoding of chunk indices into key-value store keys."],kvstore:[13,1,2,"json-driver/zarr.kvstore",""],metadata:[13,1,2,"json-driver/zarr.metadata","Zarr array metadata."],metadata_key:[13,1,2,"json-driver/zarr.metadata_key","Specifies the key under which to store the array metadata in JSON format."],open:[13,1,2,"json-driver/zarr.open",""],path:[13,1,2,"json-driver/zarr.path","Additional path within the KvStore specified by\nkvstore."],rank:[13,1,2,"json-driver/zarr.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[13,1,2,"json-driver/zarr.recheck_cached_data",""],recheck_cached_metadata:[13,1,2,"json-driver/zarr.recheck_cached_metadata",""],schema:[13,1,2,"json-driver/zarr.schema","Specifies constraints on the schema."],transform:[13,1,2,"json-driver/zarr.transform","Specifies a transform."]},"driver/zarr.metadata":{chunks:[13,1,2,"json-driver/zarr.metadata.chunks","Chunk dimensions."],compressor:[13,1,2,"json-driver/zarr.metadata.compressor","Specifies the chunk compression method."],dimension_separator:[13,1,2,"json-driver/zarr.metadata.dimension_separator","Specifies the encoding of chunk indices into key-value store keys."],dtype:[13,1,2,"json-driver/zarr.metadata.dtype","Specifies the scalar or structured data type."],fill_value:[13,1,2,"json-driver/zarr.metadata.fill_value","Specifies the fill value."],filters:[13,1,2,"json-driver/zarr.metadata.filters","Specifies the filters to apply to chunks."],order:[13,1,2,"json-driver/zarr.metadata.order","Specifies the data layout for encoded chunks."],shape:[13,1,2,"json-driver/zarr.metadata.shape","Chunked dimensions of the array."],zarr_format:[13,1,2,"json-driver/zarr.metadata.zarr_format",""]},"driver/zarr/Codec":{compressor:[13,1,2,"json-driver/zarr/Codec.compressor","Specifies the chunk compression method."],driver:[13,1,2,"json-driver/zarr/Codec.driver",""],filters:[13,1,2,"json-driver/zarr/Codec.filters","Specifies the filters to apply to chunks."]},"driver/zarr/Compressor":{id:[13,1,2,"json-driver/zarr/Compressor.id",""]},"driver/zarr/Compressor/blosc":{blocksize:[13,1,2,"json-driver/zarr/Compressor/blosc.blocksize","Specifies the Blosc blocksize."],clevel:[13,1,2,"json-driver/zarr/Compressor/blosc.clevel","Specifies the Blosc compression level to use."],cname:[13,1,2,"json-driver/zarr/Compressor/blosc.cname",""],id:[13,1,2,"json-driver/zarr/Compressor/blosc.id",""],shuffle:[13,1,2,"json-driver/zarr/Compressor/blosc.shuffle",""]},"driver/zarr/Compressor/bz2":{id:[13,1,2,"json-driver/zarr/Compressor/bz2.id",""],level:[13,1,2,"json-driver/zarr/Compressor/bz2.level","Specifies the bzip2 buffer size/compression level to use."]},"driver/zarr/Compressor/zlib":{id:[13,1,2,"json-driver/zarr/Compressor/zlib.id",""],level:[13,1,2,"json-driver/zarr/Compressor/zlib.level","Specifies the zlib compression level to use."]},"kvstore/file":{context:[18,1,2,"json-kvstore/file.context",""],driver:[18,1,2,"json-kvstore/file.driver",""],file_io_concurrency:[18,1,2,"json-kvstore/file.file_io_concurrency",""],path:[18,1,2,"json-kvstore/file.path","Path to root directory on local filesystem."]},"kvstore/gcs":{bucket:[19,1,2,"json-kvstore/gcs.bucket","Google Cloud Storage bucket to use."],context:[19,1,2,"json-kvstore/gcs.context",""],driver:[19,1,2,"json-kvstore/gcs.driver",""],gcs_request_concurrency:[19,1,2,"json-kvstore/gcs.gcs_request_concurrency",""],gcs_request_retries:[19,1,2,"json-kvstore/gcs.gcs_request_retries",""],gcs_user_project:[19,1,2,"json-kvstore/gcs.gcs_user_project",""],path:[19,1,2,"json-kvstore/gcs.path","Key prefix within the key-value store."]},"kvstore/http":{base_url:[20,1,2,"json-kvstore/http.base_url","Base URL."],context:[20,1,2,"json-kvstore/http.context",""],driver:[20,1,2,"json-kvstore/http.driver",""],headers:[20,1,2,"json-kvstore/http.headers","Additional HTTP headers to send with every request."],http_request_concurrency:[20,1,2,"json-kvstore/http.http_request_concurrency",""],http_request_retries:[20,1,2,"json-kvstore/http.http_request_retries",""],path:[20,1,2,"json-kvstore/http.path","Path relative to base_url."]},"kvstore/memory":{atomic:[22,1,2,"json-kvstore/memory.atomic",""],context:[22,1,2,"json-kvstore/memory.context",""],driver:[22,1,2,"json-kvstore/memory.driver",""],memory_key_value_store:[22,1,2,"json-kvstore/memory.memory_key_value_store",""],path:[22,1,2,"json-kvstore/memory.path","Key prefix within the key-value store."]},"kvstore/neuroglancer_uint64_sharded":{base:[23,1,2,"json-kvstore/neuroglancer_uint64_sharded.base","Underlying key-value store."],cache_pool:[23,1,2,"json-kvstore/neuroglancer_uint64_sharded.cache_pool",""],context:[23,1,2,"json-kvstore/neuroglancer_uint64_sharded.context",""],data_copy_concurrency:[23,1,2,"json-kvstore/neuroglancer_uint64_sharded.data_copy_concurrency",""],driver:[23,1,2,"json-kvstore/neuroglancer_uint64_sharded.driver",""],metadata:[23,1,2,"json-kvstore/neuroglancer_uint64_sharded.metadata","Specifies the sharding format."],path:[23,1,2,"json-kvstore/neuroglancer_uint64_sharded.path","Key prefix within the key-value store."]},"kvstore/neuroglancer_uint64_sharded/ShardingSpec":{"@type":[23,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.@type",""],data_encoding:[23,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.data_encoding","Specifies the encoding of the data chunks."],hash:[23,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.hash","Specifies the hash function used to map chunk IDs to shards."],minishard_bits:[23,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.minishard_bits","Number of bits of the hashed chunk ID that determine the minishard number."],minishard_index_encoding:[23,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.minishard_index_encoding","Specifies the encoding of the minishard index."],preshift_bits:[23,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.preshift_bits","Number of low-order bits of the chunk ID that do not contribute to the hashed chunk ID."],shard_bits:[23,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.shard_bits","Number of bits of the hashed chunk ID that determine the shard number."]},"tensorstore.ChunkLayout":{"__init__(components)":[41,3,1,"","Constructs from component parts."],"__init__(json)":[42,3,1,"","Constructs from the JSON representation."],Grid:[26,2,1,"","Describes a regular grid layout for write/read/codec chunks."],__eq__:[40,3,1,"","Compares two chunk layouts for equality."],codec_chunk:[43,5,1,"","Chunk grid used by the codec."],grid_origin:[44,5,1,"","Hard constraints on the grid origin."],grid_origin_soft_constraint:[45,5,1,"","Soft constraints on the grid origin."],inner_order:[46,5,1,"","Permutation specifying the element storage order within the innermost chunks."],inner_order_soft_constraint:[47,5,1,"","Permutation specifying soft constraint on the element storage order."],ndim:[48,5,1,"","Alias for rank."],rank:[49,5,1,"","Number of dimensions in the index space."],read_chunk:[50,5,1,"","Chunk grid for efficient reads."],read_chunk_template:[51,5,1,"","Chunk offset and shape for efficient reads."],to_json:[52,3,1,"","Converts to the JSON representation."],update:[53,3,1,"","Adds additional constraints."],write_chunk:[54,5,1,"","Chunk grid for efficient writes."],write_chunk_template:[55,5,1,"","Chunk offset and shape for efficient writes."]},"tensorstore.ChunkLayout.Grid":{"__init__(components)":[28,3,1,"","Constructs a chunk grid."],"__init__(json)":[29,3,1,"","Constructs from the JSON representation."],__eq__:[27,3,1,"","Compares two chunk grids for equality."],aspect_ratio:[30,5,1,"","Chunk shape aspect ratio."],aspect_ratio_soft_constraint:[31,5,1,"","Soft constraints on chunk shape aspect ratio."],elements:[32,5,1,"","Target number of elements per chunk."],elements_soft_constraint:[33,5,1,"","Soft constraint on target number of elements per chunk."],ndim:[34,5,1,"","Alias for rank."],rank:[35,5,1,"","Number of dimensions, or None if unspecified."],shape:[36,5,1,"","Hard constraints on chunk shape."],shape_soft_constraint:[37,5,1,"","Soft constraints on chunk shape."],to_json:[38,3,1,"","Converts to the JSON representation."],update:[39,3,1,"","Adds additional constraints."]},"tensorstore.ChunkLayout.Grid.__init__(components)":{aspect_ratio:[28,4,2,"p-aspect_ratio","Aspect ratio for each dimension."],aspect_ratio_soft_constraint:[28,4,2,"p-aspect_ratio_soft_constraint","Soft constraints on the aspect ratio for each dimension."],elements:[28,4,2,"p-elements","Target number of elements per chunk."],elements_soft_constraint:[28,4,2,"p-elements_soft_constraint","Soft constraint on the target number of elements per chunk."],grid:[28,4,2,"p-grid","Other grid constraints to merge in."],grid_soft_constraint:[28,4,2,"p-grid_soft_constraint","Other grid constraints to merge in as soft constraints."],rank:[28,4,2,"p-rank","Specifies the number of dimensions."],shape:[28,4,2,"p-shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[28,4,2,"p-shape_soft_constraint","Soft constraints on the chunk size for each dimension."]},"tensorstore.ChunkLayout.Grid.update":{aspect_ratio:[39,4,2,"p-aspect_ratio","Aspect ratio for each dimension."],aspect_ratio_soft_constraint:[39,4,2,"p-aspect_ratio_soft_constraint","Soft constraints on the aspect ratio for each dimension."],elements:[39,4,2,"p-elements","Target number of elements per chunk."],elements_soft_constraint:[39,4,2,"p-elements_soft_constraint","Soft constraint on the target number of elements per chunk."],grid:[39,4,2,"p-grid","Other grid constraints to merge in."],grid_soft_constraint:[39,4,2,"p-grid_soft_constraint","Other grid constraints to merge in as soft constraints."],rank:[39,4,2,"p-rank","Specifies the number of dimensions."],shape:[39,4,2,"p-shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[39,4,2,"p-shape_soft_constraint","Soft constraints on the chunk size for each dimension."]},"tensorstore.ChunkLayout.__init__(components)":{chunk:[41,4,2,"p-chunk","Common constraints on write, read, and codec chunks."],chunk_aspect_ratio:[41,4,2,"p-chunk_aspect_ratio","Hard constraints on the write, read, and codec chunk aspect ratio."],chunk_aspect_ratio_soft_constraint:[41,4,2,"p-chunk_aspect_ratio_soft_constraint","Soft constraints on the write, read, and codec chunk aspect ratio."],chunk_elements:[41,4,2,"p-chunk_elements","Hard constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON elements member of\nChunkLayout.chunk."],chunk_elements_soft_constraint:[41,4,2,"p-chunk_elements_soft_constraint","Soft constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON\nelements_soft_constraint member of\nChunkLayout.chunk."],chunk_shape:[41,4,2,"p-chunk_shape","Hard constraints on both the write and read chunk shape."],chunk_shape_soft_constraint:[41,4,2,"p-chunk_shape_soft_constraint","Soft constraints on both the write and read chunk shape."],codec_chunk:[41,4,2,"p-codec_chunk","Constraints on codec chunks."],codec_chunk_aspect_ratio:[41,4,2,"p-codec_chunk_aspect_ratio","Soft constraints on the codec chunk aspect ratio."],codec_chunk_aspect_ratio_soft_constraint:[41,4,2,"p-codec_chunk_aspect_ratio_soft_constraint","Soft constraints on the codec chunk aspect ratio."],codec_chunk_elements:[41,4,2,"p-codec_chunk_elements","Hard constraints on the target number of elements for codec chunks."],codec_chunk_elements_soft_constraint:[41,4,2,"p-codec_chunk_elements_soft_constraint","Soft constraints on the target number of elements for codec chunks."],codec_chunk_shape:[41,4,2,"p-codec_chunk_shape","Soft constraints on the codec chunk shape."],codec_chunk_shape_soft_constraint:[41,4,2,"p-codec_chunk_shape_soft_constraint","Soft constraints on the codec chunk shape."],finalize:[41,4,2,"p-finalize","Validates and converts the layout into a precise chunk\nlayout."],grid_origin:[41,4,2,"p-grid_origin","Hard constraints on the origin of the chunk grid.\nCorresponds to the JSON ChunkLayout.grid_origin member."],grid_origin_soft_constraint:[41,4,2,"p-grid_origin_soft_constraint","Soft constraints on the origin of the chunk grid."],inner_order:[41,4,2,"p-inner_order","Permutation specifying the element storage order within the innermost chunks.\nCorresponds to the JSON ChunkLayout.inner_order member."],inner_order_soft_constraint:[41,4,2,"p-inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint."],rank:[41,4,2,"p-rank","Specifies the number of dimensions."],read_chunk:[41,4,2,"p-read_chunk","Constraints on read chunks."],read_chunk_aspect_ratio:[41,4,2,"p-read_chunk_aspect_ratio","Hard constraints on the read chunk aspect ratio."],read_chunk_aspect_ratio_soft_constraint:[41,4,2,"p-read_chunk_aspect_ratio_soft_constraint","Soft constraints on the read chunk aspect ratio."],read_chunk_elements:[41,4,2,"p-read_chunk_elements","Hard constraints on the target number of elements for read chunks."],read_chunk_elements_soft_constraint:[41,4,2,"p-read_chunk_elements_soft_constraint","Soft constraints on the target number of elements for read chunks."],read_chunk_shape:[41,4,2,"p-read_chunk_shape","Hard constraints on the read chunk shape."],read_chunk_shape_soft_constraint:[41,4,2,"p-read_chunk_shape_soft_constraint","Soft constraints on the read chunk shape."],write_chunk:[41,4,2,"p-write_chunk","Constraints on write chunks."],write_chunk_aspect_ratio:[41,4,2,"p-write_chunk_aspect_ratio","Hard constraints on the write chunk aspect ratio."],write_chunk_aspect_ratio_soft_constraint:[41,4,2,"p-write_chunk_aspect_ratio_soft_constraint","Soft constraints on the write chunk aspect ratio."],write_chunk_elements:[41,4,2,"p-write_chunk_elements","Hard constraints on the target number of elements for write chunks."],write_chunk_elements_soft_constraint:[41,4,2,"p-write_chunk_elements_soft_constraint","Soft constraints on the target number of elements for write chunks."],write_chunk_shape:[41,4,2,"p-write_chunk_shape","Hard constraints on the write chunk shape."],write_chunk_shape_soft_constraint:[41,4,2,"p-write_chunk_shape_soft_constraint","Soft constraints on the write chunk shape."]},"tensorstore.ChunkLayout.update":{chunk:[53,4,2,"p-chunk","Common constraints on write, read, and codec chunks."],chunk_aspect_ratio:[53,4,2,"p-chunk_aspect_ratio","Hard constraints on the write, read, and codec chunk aspect ratio."],chunk_aspect_ratio_soft_constraint:[53,4,2,"p-chunk_aspect_ratio_soft_constraint","Soft constraints on the write, read, and codec chunk aspect ratio."],chunk_elements:[53,4,2,"p-chunk_elements","Hard constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON elements member of\nChunkLayout.chunk."],chunk_elements_soft_constraint:[53,4,2,"p-chunk_elements_soft_constraint","Soft constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON\nelements_soft_constraint member of\nChunkLayout.chunk."],chunk_shape:[53,4,2,"p-chunk_shape","Hard constraints on both the write and read chunk shape."],chunk_shape_soft_constraint:[53,4,2,"p-chunk_shape_soft_constraint","Soft constraints on both the write and read chunk shape."],codec_chunk:[53,4,2,"p-codec_chunk","Constraints on codec chunks."],codec_chunk_aspect_ratio:[53,4,2,"p-codec_chunk_aspect_ratio","Soft constraints on the codec chunk aspect ratio."],codec_chunk_aspect_ratio_soft_constraint:[53,4,2,"p-codec_chunk_aspect_ratio_soft_constraint","Soft constraints on the codec chunk aspect ratio."],codec_chunk_elements:[53,4,2,"p-codec_chunk_elements","Hard constraints on the target number of elements for codec chunks."],codec_chunk_elements_soft_constraint:[53,4,2,"p-codec_chunk_elements_soft_constraint","Soft constraints on the target number of elements for codec chunks."],codec_chunk_shape:[53,4,2,"p-codec_chunk_shape","Soft constraints on the codec chunk shape."],codec_chunk_shape_soft_constraint:[53,4,2,"p-codec_chunk_shape_soft_constraint","Soft constraints on the codec chunk shape."],finalize:[53,4,2,"p-finalize","Validates and converts the layout into a precise chunk\nlayout."],grid_origin:[53,4,2,"p-grid_origin","Hard constraints on the origin of the chunk grid.\nCorresponds to the JSON ChunkLayout.grid_origin member."],grid_origin_soft_constraint:[53,4,2,"p-grid_origin_soft_constraint","Soft constraints on the origin of the chunk grid."],inner_order:[53,4,2,"p-inner_order","Permutation specifying the element storage order within the innermost chunks.\nCorresponds to the JSON ChunkLayout.inner_order member."],inner_order_soft_constraint:[53,4,2,"p-inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint."],rank:[53,4,2,"p-rank","Specifies the number of dimensions."],read_chunk:[53,4,2,"p-read_chunk","Constraints on read chunks."],read_chunk_aspect_ratio:[53,4,2,"p-read_chunk_aspect_ratio","Hard constraints on the read chunk aspect ratio."],read_chunk_aspect_ratio_soft_constraint:[53,4,2,"p-read_chunk_aspect_ratio_soft_constraint","Soft constraints on the read chunk aspect ratio."],read_chunk_elements:[53,4,2,"p-read_chunk_elements","Hard constraints on the target number of elements for read chunks."],read_chunk_elements_soft_constraint:[53,4,2,"p-read_chunk_elements_soft_constraint","Soft constraints on the target number of elements for read chunks."],read_chunk_shape:[53,4,2,"p-read_chunk_shape","Hard constraints on the read chunk shape."],read_chunk_shape_soft_constraint:[53,4,2,"p-read_chunk_shape_soft_constraint","Soft constraints on the read chunk shape."],write_chunk:[53,4,2,"p-write_chunk","Constraints on write chunks."],write_chunk_aspect_ratio:[53,4,2,"p-write_chunk_aspect_ratio","Hard constraints on the write chunk aspect ratio."],write_chunk_aspect_ratio_soft_constraint:[53,4,2,"p-write_chunk_aspect_ratio_soft_constraint","Soft constraints on the write chunk aspect ratio."],write_chunk_elements:[53,4,2,"p-write_chunk_elements","Hard constraints on the target number of elements for write chunks."],write_chunk_elements_soft_constraint:[53,4,2,"p-write_chunk_elements_soft_constraint","Soft constraints on the target number of elements for write chunks."],write_chunk_shape:[53,4,2,"p-write_chunk_shape","Hard constraints on the write chunk shape."],write_chunk_shape_soft_constraint:[53,4,2,"p-write_chunk_shape_soft_constraint","Soft constraints on the write chunk shape."]},"tensorstore.CodecSpec":{__init__:[57,3,1,"","Constructs from the JSON representation."],to_json:[58,3,1,"","Converts to the JSON representation."]},"tensorstore.Context":{"__init__(default)":[66,3,1,"","Constructs a default context."],"__init__(json)":[67,3,1,"","Constructs a context from its JSON representation."],"__init__(spec)":[68,3,1,"","Constructs a context from a parsed spec."],Resource:[60,2,1,"","Handle to a context resource."],Spec:[62,2,1,"","Parsed representation of a JSON Context specification."],__getitem__:[65,3,1,"","Creates or retrieves the context resource for the given key."],parent:[69,5,1,"","Parent context from which this context inherits."],spec:[70,5,1,"","Spec from which this context was constructed."]},"tensorstore.Context.Resource":{to_json:[61,3,1,"","Returns the JSON representation of the context resource."]},"tensorstore.Context.Spec":{__init__:[63,3,1,"","Creates a context specification from its JSON representation."],to_json:[64,3,1,"","Returns the JSON representation."]},"tensorstore.Context.Spec.to_json":{include_defaults:[64,4,2,"p-include_defaults","Indicates whether to include members even if they are equal to the default value."]},"tensorstore.Context.__getitem__":{key:[65,4,2,"p-key","Resource key, of the form '<resource-type>' or\n<resource-type>#<id>."]},"tensorstore.Context.__init__(json)":{json:[67,4,2,"p-json","JSON representation of the context."],parent:[67,4,2,"p-parent","Parent context from which to inherit."]},"tensorstore.Context.__init__(spec)":{parent:[68,4,2,"p-parent","Parent context from which to inherit."],spec:[68,4,2,"p-spec","Parsed context spec."]},"tensorstore.Dim":{"__contains__(dim)":[72,3,1,"","Checks if the interval contains another interval."],"__contains__(index)":[73,3,1,"","Checks if the interval contains a given index."],"__init__(exclusive_max)":[75,3,1,"","Constructs a half-open interval [inclusive_min, exclusive_max)`."],"__init__(inclusive_max)":[76,3,1,"","Constructs a closed interval [inclusive_min, inclusive_max]."],"__init__(size)":[77,3,1,"","Constructs a sized interval [inclusive_min, inclusive_min+size)."],"__init__(unbounded)":[78,3,1,"","Constructs an unbounded interval (-inf, +inf)."],__eq__:[74,3,1,"","Compares for equality with another interval."],__iter__:[79,3,1,"","Enables iteration over the indices contained in the interval."],__len__:[80,3,1,"","Size of the interval, equivalent to size."],__repr__:[81,3,1,"","Returns the string representation as a Python expression."],__str__:[82,3,1,"","Returns the string representation of the interval."],empty:[83,5,1,"","Returns True if size is zero."],exclusive_max:[84,5,1,"","Exclusive upper bound of the interval."],exclusive_min:[85,5,1,"","Exclusive lower bound of the interval."],finite:[86,5,1,"","Indicates if the interval is finite."],hull:[87,3,1,"","Hull with another Dim."],implicit_lower:[88,5,1,"","Indicates if the lower bound is implicit/resizeable."],implicit_upper:[89,5,1,"","Indicates if the upper bound is implicit/resizeable."],inclusive_max:[90,5,1,"","Inclusive upper bound of the interval."],inclusive_min:[91,5,1,"","Inclusive lower bound of the interval."],intersect:[92,3,1,"","Intersect with another Dim."],label:[93,5,1,"","Dimension label, or the empty string to indicate an unlabeled dimension."],size:[94,5,1,"","Size of the interval."]},"tensorstore.Dim.__init__(exclusive_max)":{exclusive_max:[75,4,2,"p-exclusive_max","Exclusive upper bound."],implicit_lower:[75,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[75,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_min:[75,4,2,"p-inclusive_min","Inclusive lower bound."],label:[75,4,2,"p-label","Dimension label."]},"tensorstore.Dim.__init__(inclusive_max)":{implicit_lower:[76,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[76,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_max:[76,4,2,"p-inclusive_max","Inclusive upper bound."],inclusive_min:[76,4,2,"p-inclusive_min","Inclusive lower bound."],label:[76,4,2,"p-label","Dimension label."]},"tensorstore.Dim.__init__(size)":{implicit_lower:[77,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[77,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_min:[77,4,2,"p-inclusive_min","Inclusive lower bound."],label:[77,4,2,"p-label","Dimension label."],size:[77,4,2,"p-size","Size of the interval."]},"tensorstore.Dim.__init__(unbounded)":{implicit_lower:[78,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[78,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],label:[78,4,2,"p-label","Dimension label."]},"tensorstore.Dim.hull":{other:[87,4,2,"p-other","Object to hull with."]},"tensorstore.Dim.intersect":{other:[92,4,2,"p-other","Object to intersect with."]},"tensorstore.DimExpression":{__getitem__:[96,3,1,"","Applies a NumPy-style indexing operation with default index array semantics."],diagonal:[97,5,1,"","Extracts the diagonal of the selected dimensions."],label:[98,3,1,"","Sets (or changes) the labels of the selected dimensions."],oindex:[99,3,1,"","Applies a NumPy-style indexing operation with outer indexing semantics."],stride:[100,3,1,"","Strides the domains of the selected input dimensions by the specified amounts."],translate_backward_by:[101,3,1,"","Translates (shifts) the domains of the selected input dimensions backward by the\nspecified offsets, without affecting the output range."],translate_by:[102,3,1,"","Translates (shifts) the domains of the selected input dimensions by the\nspecified offsets, without affecting the output range."],translate_to:[103,3,1,"","Translates the domains of the selected input dimensions to the specified\norigins without affecting the output range."],transpose:[104,3,1,"","Transposes the selected dimensions to the specified target indices."],vindex:[105,3,1,"","Applies a NumPy-style indexing operation with vectorized indexing semantics."]},"tensorstore.DimExpression.label":{labels:[98,4,2,"p-labels","Dimension labels for each selected dimension."]},"tensorstore.DimExpression.stride":{strides:[100,4,2,"p-strides","Strides for each selected dimension."]},"tensorstore.DimExpression.translate_backward_by":{offsets:[101,4,2,"p-offsets","The offsets for each of the selected dimensions."]},"tensorstore.DimExpression.translate_by":{offsets:[102,4,2,"p-offsets","The offsets for each of the selected dimensions."]},"tensorstore.DimExpression.translate_to":{origins:[103,4,2,"p-origins","The new origins for each of the selected dimensions."]},"tensorstore.DimExpression.transpose":{target:[104,4,2,"p-target","Target dimension indices for the selected dimensions."]},"tensorstore.Future":{__new__:[107,3,1,"","Converts a FutureLike object to a Future."],add_done_callback:[108,3,1,"","Registers a callback to be invoked upon completion of the asynchronous operation."],cancel:[109,3,1,"","Requests cancellation of the asynchronous operation."],cancelled:[110,3,1,"","Queries whether the asynchronous operation has been cancelled."],done:[111,3,1,"","Queries whether the asynchronous operation has completed or been cancelled."],exception:[112,3,1,"","Blocks until asynchronous operation completes, and returns the error if any."],force:[113,3,1,"","Ensures the asynchronous operation begins executing."],remove_done_callback:[114,3,1,"","Unregisters a previously-registered callback."],result:[115,3,1,"","Blocks until the asynchronous operation completes, and returns the result."]},"tensorstore.Future.__new__":{future:[107,4,2,"p-future","Specifies the immediate or asynchronous result."],loop:[107,4,2,"p-loop","Event loop on which to run future if it is a\ncoroutine."]},"tensorstore.Future.exception":{deadline:[112,4,2,"p-deadline","Deadline in seconds since the Unix epoch."],timeout:[112,4,2,"p-timeout","Maximum number of seconds to block."]},"tensorstore.Future.result":{deadline:[115,4,2,"p-deadline","Deadline in seconds since the Unix epoch."],timeout:[115,4,2,"p-timeout","Maximum number of seconds to block."]},"tensorstore.IndexDomain":{"__getitem__(domain)":[118,3,1,"","Slices this domain by another domain."],"__getitem__(expr)":[119,3,1,"","Transforms the domain by a dimension expression."],"__getitem__(identifier)":[120,3,1,"","Returns the single dimension specified by identifier."],"__getitem__(selection)":[121,3,1,"","Returns a new domain with a subset of the dimensions."],"__getitem__(transform)":[122,3,1,"","Transforms the domain using an explicit index transform."],"__init__(components)":[123,3,1,"","Constructs an index domain from component vectors."],"__init__(dimensions)":[124,3,1,"","Constructs an index domain from a :py:class`.Dim` sequence."],"__init__(json)":[125,3,1,"","Constructs an index domain from its JSON representation."],__len__:[126,3,1,"","Returns the number of dimensions (rank)."],__repr__:[127,3,1,"","Returns the string representation."],exclusive_max:[128,5,1,"","Exclusive upper bound of the domain."],hull:[129,3,1,"","Computes the hull (minimum containing box) with another domain."],implicit_lower_bounds:[130,5,1,"","Indicates whether the lower bound of each dimension is implicit or explicit."],implicit_upper_bounds:[131,5,1,"","Indicates whether the upper bound of each dimension is implicit or explicit."],inclusive_max:[132,5,1,"","Inclusive upper bound of the domain."],inclusive_min:[133,5,1,"","Inclusive lower bound of the domain, alias of origin."],index_exp:[134,5,1,"","Equivalent NumPy-compatible index expression."],intersect:[135,3,1,"","Intersects with another domain."],labels:[136,5,1,"","Dimension labels for each dimension."],ndim:[137,5,1,"","Alias for rank."],origin:[138,5,1,"","Inclusive lower bound of the domain."],rank:[139,5,1,"","Number of dimensions in the index space."],shape:[140,5,1,"","Shape of the domain."],size:[141,5,1,"","Total number of elements in the domain."],to_json:[142,3,1,"","Returns the JSON representation."]},"tensorstore.IndexDomain.__getitem__(expr)":{expr:[119,4,2,"p-expr","Dimension expression to apply."]},"tensorstore.IndexDomain.__getitem__(identifier)":{identifier:[120,4,2,"p-identifier","Specifies a dimension by integer index or label."]},"tensorstore.IndexDomain.__getitem__(selection)":{selection:[121,4,2,"p-selection","Specifies the dimensions to include, either by index or label."]},"tensorstore.IndexDomain.__getitem__(transform)":{transform:[122,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.IndexDomain.__init__(components)":{exclusive_max:[123,4,2,"p-exclusive_max","Exclusive upper bounds for each dimension."],implicit_lower_bounds:[123,4,2,"p-implicit_lower_bounds","Indicates whether each lower bound is\nimplicit or explicit."],implicit_upper_bounds:[123,4,2,"p-implicit_upper_bounds","Indicates whether each upper bound is\nimplicit or explicit."],inclusive_max:[123,4,2,"p-inclusive_max","Inclusive upper bounds for each dimension."],inclusive_min:[123,4,2,"p-inclusive_min","Inclusive lower bounds for each dimension."],labels:[123,4,2,"p-labels","Dimension labels."],rank:[123,4,2,"p-rank","Number of dimensions."],shape:[123,4,2,"p-shape","Size for each dimension."]},"tensorstore.IndexDomain.__init__(dimensions)":{dimensions:[124,4,2,"p-dimensions","Sequence of :py:class`.Dim` objects."]},"tensorstore.IndexDomain.hull":{other:[129,4,2,"p-other","Object to hull with."]},"tensorstore.IndexDomain.intersect":{other:[135,4,2,"p-other","Object to intersect with."]},"tensorstore.IndexTransform":{"__getitem__(domain)":[146,3,1,"","Slices this index transform by another domain."],"__getitem__(expr)":[147,3,1,"","Applies a dimension expression to this transform."],"__getitem__(indices)":[148,3,1,"","Applies a NumPy-style indexing operation with default index array semantics."],"__getitem__(transform)":[149,3,1,"","Composes this index transform with another index transform."],"__init__(components)":[150,3,1,"","Constructs an index transform from component vectors."],"__init__(domain)":[151,3,1,"","Constructs an index transform from a domain and output index maps."],"__init__(json)":[152,3,1,"","Constructs an index transform from its JSON representation."],T:[144,5,1,"","View with transposed domain (reversed dimension order)."],__call__:[145,3,1,"","Maps an input index vector to an output index vector."],__repr__:[153,3,1,"","Returns the string representation."],domain:[154,5,1,"","Input domain of the index transform."],implicit_lower_bounds:[155,5,1,"","Indicates whether the lower bound of each input dimension is implicit or explicit."],implicit_upper_bounds:[156,5,1,"","Indicates whether the upper bound of each input dimension is implicit or explicit."],input_exclusive_max:[157,5,1,"","Exclusive upper bound of the input domain."],input_inclusive_max:[158,5,1,"","Inclusive upper bound of the input domain."],input_inclusive_min:[159,5,1,"","Inclusive lower bound of the input domain, alias for input_origin."],input_labels:[160,5,1,"","Dimension labels for each input dimension."],input_origin:[161,5,1,"","Inclusive lower bound of the input domain."],input_rank:[162,5,1,"","Rank of the input space."],input_shape:[163,5,1,"","Shape of the input domain."],ndim:[164,5,1,"","Rank of the input space, alias for input_rank."],oindex:[165,3,1,"","Applies a NumPy-style indexing operation with outer indexing semantics."],origin:[166,5,1,"","Inclusive lower bound of the domain."],output:[167,5,1,"","Output index maps."],output_rank:[168,5,1,"","Rank of the output space."],shape:[169,5,1,"","Shape of the domain."],size:[170,5,1,"","Total number of elements in the domain."],to_json:[171,3,1,"","Returns the JSON representation of the transform."],vindex:[172,3,1,"","Applies a NumPy-style indexing operation with vectorized indexing semantics."]},"tensorstore.IndexTransform.__call__":{indices:[145,4,2,"p-indices","Input vector of length input_rank."]},"tensorstore.IndexTransform.__init__(components)":{implicit_lower_bounds:[150,4,2,"p-implicit_lower_bounds","Indicates whether each lower bound is\nimplicit or explicit."],implicit_upper_bounds:[150,4,2,"p-implicit_upper_bounds","Indicates whether each upper bound is\nimplicit or explicit."],input_exclusive_max:[150,4,2,"p-input_exclusive_max","Exclusive upper bounds for each input dimension."],input_inclusive_max:[150,4,2,"p-input_inclusive_max","Inclusive upper bounds for each input dimension."],input_inclusive_min:[150,4,2,"p-input_inclusive_min","Inclusive lower bounds for each input dimension."],input_labels:[150,4,2,"p-input_labels","Dimension labels for each input\ndimension."],input_rank:[150,4,2,"p-input_rank","Number of input dimensions."],input_shape:[150,4,2,"p-input_shape","Size for each input dimension."],output:[150,4,2,"p-output","Sequence of output index maps, or OutputIndexMaps object\nfrom an existing transform."]},"tensorstore.IndexTransform.__init__(domain)":{domain:[151,4,2,"p-domain","The domain of the index transform."],output:[151,4,2,"p-output","Sequence of output index maps, or OutputIndexMaps object\nfrom an existing transform."]},"tensorstore.KvStore":{KeyRange:[175,2,1,"","Half-open interval of byte string keys, according to lexicographical order."],ReadResult:[182,2,1,"","Specifies the result of a read operation."],Spec:[187,2,1,"","Parsed representation of a JSON key-value store specification."],TimestampedStorageGeneration:[197,2,1,"","Specifies a storage generation identifier and a timestamp."],__delitem__:[202,3,1,"","Synchronously deletes a single key."],__getitem__:[203,3,1,"","Synchronously reads the value of a single key."],__repr__:[204,3,1,"","Returns a string representation based on the  JSON representation."],__setitem__:[205,3,1,"","Synchronously writes the value of a single key."],copy:[206,3,1,"","Returns a copy of the key-value store."],delete_range:[207,3,1,"","Deletes a key range."],list:[208,3,1,"","Lists the keys in the key-value store."],open:[209,3,1,"","Opens a key-value store."],path:[210,5,1,"","Path prefix within the base key-value store."],read:[211,3,1,"","Reads the value of a single key."],spec:[212,3,1,"","Spec that may be used to re-open or re-create the key-value store."],transaction:[213,5,1,"","Transaction bound to this key-value store."],url:[214,5,1,"","URL representation of the key-value store specification."],with_transaction:[215,3,1,"","Returns a transaction-bound view of this key-value store."],write:[216,3,1,"","Writes or deletes a single key."]},"tensorstore.KvStore.KeyRange":{__eq__:[176,3,1,"","Compares with another range for equality."],__init__:[177,3,1,"","Constructs a key range from the specified half-open bounds."],copy:[178,3,1,"","Returns a copy of the range."],empty:[179,5,1,"","Indicates if the range contains no keys."],exclusive_max:[180,5,1,"","Exclusive upper bound of the range."],inclusive_min:[181,5,1,"","Inclusive lower bound of the range."]},"tensorstore.KvStore.KeyRange.__init__":{exclusive_max:[177,4,2,"p-exclusive_max","Exclusive upper bound of the range."],inclusive_min:[177,4,2,"p-inclusive_min","Inclusive lower bound of the range."]},"tensorstore.KvStore.ReadResult":{__init__:[183,3,1,"","Constructs a read result."],stamp:[184,5,1,"","Generation and timestamp associated with the value."],state:[185,5,1,"","Indicates the interpretation of value."],value:[186,5,1,"","Value associated with the key."]},"tensorstore.KvStore.Spec":{__add__:[188,3,1,"","Returns a key-value store with the suffix appended to the path."],__new__:[189,3,1,"","Constructs from the JSON representation or a URL."],__repr__:[190,3,1,"","Returns a string representation based on the  JSON representation."],__truediv__:[191,3,1,"","Returns a key-value store with an additional path component joined to the path."],copy:[192,3,1,"","Returns a copy of the key-value store spec."],path:[193,5,1,"","Path prefix within the base key-value store."],to_json:[194,3,1,"","Converts to the JSON representation."],update:[195,3,1,"","Modifies a spec."],url:[196,5,1,"","URL representation of the key-value store specification."]},"tensorstore.KvStore.Spec.update":{context:[195,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],strip_context:[195,4,2,"p-strip_context","Replace any bound context resources and unbound context resource specs by\ndefault context resource specs."],unbind_context:[195,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.KvStore.TimestampedStorageGeneration":{__eq__:[198,3,1,"","Compares two timestamped storage generations for equality."],__init__:[199,3,1,"","Constructs from a storage generation and time."],generation:[200,5,1,"","Identifies a specific version of a key-value store entry."],time:[201,5,1,"","Time (seconds since Unix epoch) at which generation is valid."]},"tensorstore.KvStore.__delitem__":{key:[202,4,2,"p-key","Key to delete."]},"tensorstore.KvStore.__getitem__":{key:[203,4,2,"p-key","The key to read."]},"tensorstore.KvStore.__setitem__":{key:[205,4,2,"p-key","Key to write/delete."],value:[205,4,2,"p-value","Value to store, or None to delete."]},"tensorstore.KvStore.delete_range":{range:[207,4,2,"p-range","Key range to delete."]},"tensorstore.KvStore.list":{range:[208,4,2,"p-range","If specified, restricts to the specified key range."],strip_prefix_length:[208,4,2,"p-strip_prefix_length","Strips the specified number of bytes from the start of\nthe returned keys."]},"tensorstore.KvStore.open":{context:[209,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],spec:[209,4,2,"p-spec","Key-value store spec to open."],transaction:[209,4,2,"p-transaction","Transaction to use for read/write operations."]},"tensorstore.KvStore.read":{if_not_equal:[211,4,2,"p-if_not_equal","If specified, the read is aborted if the generation associated\nwith key matches if_not_equal."],key:[211,4,2,"p-key","The key to read."],staleness_bound:[211,4,2,"p-staleness_bound","Specifies a time in (fractional) seconds since the Unix\nepoch."]},"tensorstore.KvStore.spec":{retain_context:[212,4,2,"p-retain_context","Retain all bound context resources (e.g."],unbind_context:[212,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.KvStore.write":{if_equal:[216,4,2,"p-if_equal","If specified, indicates a conditional write operation."],key:[216,4,2,"p-key","Key to write/delete."],value:[216,4,2,"p-value","Value to store, or None to delete."]},"tensorstore.OutputIndexMap":{"__init__(constant)":[218,3,1,"","Constructs a constant map."],"__init__(index_array)":[219,3,1,"","Constructs an index array map."],"__init__(input_dimension)":[220,3,1,"","Constructs a single input dimension map."],index_array:[221,5,1,"",""],index_range:[222,5,1,"",""],input_dimension:[223,5,1,"",""],method:[224,5,1,"",""],offset:[225,5,1,"",""],stride:[226,5,1,"",""]},"tensorstore.OutputIndexMaps":{__getitem__:[228,3,1,"",""],__len__:[229,3,1,"","Returns the output rank."],rank:[230,5,1,"","Returns the output rank."]},"tensorstore.OutputIndexMethod":{__init__:[232,3,1,"",""],__str__:[233,3,1,"","name(self: handle) -> str"],array:[234,6,1,"",""],constant:[235,6,1,"",""],name:[236,5,1,"",""],single_input_dimension:[237,6,1,"",""],value:[238,5,1,"",""]},"tensorstore.Promise":{"new":[240,3,1,"","Creates a linked promise and future pair."],set_exception:[241,3,1,"","Marks the linked future as unsuccessfully completed with the specified error."],set_result:[242,3,1,"","Marks the linked future as successfully completed with the specified result."]},"tensorstore.Schema":{"__getitem__(domain)":[246,3,1,"","Transforms the schema using an explicit index domain."],"__getitem__(expr)":[247,3,1,"","Transforms the schema using a dimension expression."],"__getitem__(indices)":[248,3,1,"","Transforms the schema using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[249,3,1,"","Transforms the schema using an explicit index transform."],"__init__(components)":[250,3,1,"","Constructs from component parts."],"__init__(json)":[251,3,1,"","Constructs from its JSON representation."],T:[244,5,1,"","View with transposed domain (reversed dimension order)."],__eq__:[245,3,1,"","Compares with another Schema for equality based on the JSON representation."],__repr__:[252,3,1,"","Returns a string representation based on the  JSON representation."],chunk_layout:[253,5,1,"","Chunk layout constraints specified by the schema."],codec:[254,5,1,"","Codec constraints specified by the schema."],copy:[255,3,1,"","Returns a copy of the schema."],dimension_units:[256,5,1,"","Physical units of each dimension of the domain."],domain:[257,5,1,"","Domain of the schema, or None if unspecified."],dtype:[258,5,1,"","Data type, or None if unspecified."],fill_value:[259,5,1,"","Fill value specified by the schema."],ndim:[260,5,1,"","Alias for rank."],oindex:[261,3,1,"","Transforms the schema using NumPy-style indexing with outer indexing semantics."],origin:[262,5,1,"","Inclusive lower bound of the domain."],rank:[263,5,1,"","Rank of the schema, or None if unspecified."],shape:[264,5,1,"","Shape of the domain."],size:[265,5,1,"","Total number of elements in the domain."],to_json:[266,3,1,"","Converts to the JSON representation."],update:[267,3,1,"","Adds additional constraints."],vindex:[268,3,1,"","Transforms the schema using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.Schema.__getitem__(domain)":{domain:[246,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.Schema.__getitem__(transform)":{transform:[249,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.Schema.__init__(components)":{chunk_layout:[250,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[250,4,2,"p-codec","Constrains the codec."],dimension_units:[250,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[250,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[250,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[250,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],rank:[250,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[250,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[250,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.Schema.update":{chunk_layout:[267,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[267,4,2,"p-codec","Constrains the codec."],dimension_units:[267,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[267,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[267,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[267,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],rank:[267,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[267,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[267,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.Spec":{"__getitem__(domain)":[272,3,1,"","Transforms the spec using an explicit index domain."],"__getitem__(expr)":[273,3,1,"","Transforms the spec using a dimension expression."],"__getitem__(indices)":[274,3,1,"","Transforms the spec using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[275,3,1,"","Transforms the spec using an explicit index transform."],T:[270,5,1,"","View with transposed domain (reversed dimension order)."],__eq__:[271,3,1,"","Compares with another Spec for equality based on the JSON representation."],__new__:[276,3,1,"","Constructs from the JSON representation."],__repr__:[277,3,1,"","Returns a string representation based on the JSON representation."],chunk_layout:[278,5,1,"","Effective chunk layout, including any constraints implied\nby driver-specific options."],codec:[279,5,1,"","Effective codec, including any constraints implied\nby driver-specific options."],copy:[280,3,1,"","Returns a copy of the spec."],dimension_units:[281,5,1,"","Effective physical units of each dimension of the domain, including any\nconstraints implied by driver-specific options."],domain:[282,5,1,"","Effective index domain, including any constraints implied\nby driver-specific options."],dtype:[283,5,1,"","Data type, or None if unspecified."],fill_value:[284,5,1,"","Effective fill value, including any constraints implied by driver-specific\noptions."],kvstore:[285,5,1,"","Spec of the associated key-value store used as the underlying storage."],ndim:[286,5,1,"","Alias for rank."],oindex:[287,3,1,"","Transforms the spec using NumPy-style indexing with outer indexing semantics."],origin:[288,5,1,"","Inclusive lower bound of the domain."],rank:[289,5,1,"","Returns the rank of the domain, or None if unspecified."],schema:[290,5,1,"","Effective schema, including any constraints implied by driver-specific options."],shape:[291,5,1,"","Shape of the domain."],size:[292,5,1,"","Total number of elements in the domain."],to_json:[293,3,1,"","Converts to the JSON representation."],transform:[294,5,1,"","The index transform, or None if unspecified."],update:[295,3,1,"","Adds additional constraints or changes the open mode."],vindex:[296,3,1,"","Transforms the spec using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.Spec.__getitem__(domain)":{domain:[272,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.Spec.__getitem__(transform)":{transform:[275,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.Spec.update":{assume_metadata:[295,4,2,"p-assume_metadata","Skip reading the metadata if possible."],chunk_layout:[295,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[295,4,2,"p-codec","Constrains the codec."],context:[295,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],create:[295,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[295,4,2,"p-delete_existing","Delete any existing data before creating a new array."],dimension_units:[295,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[295,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[295,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[295,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],kvstore:[295,4,2,"p-kvstore","Sets the associated key-value store used as the underlying storage."],open:[295,4,2,"p-open","Allow opening an existing TensorStore."],rank:[295,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[295,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[295,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],strip_context:[295,4,2,"p-strip_context","Replace any bound context resources and unbound context resource specs by\ndefault context resource specs."],unbind_context:[295,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.TensorStore":{"__getitem__(domain)":[300,3,1,"","Computes a virtual view using an explicit index domain."],"__getitem__(expr)":[301,3,1,"","Computes a virtual view using a dimension expression."],"__getitem__(indices)":[302,3,1,"","Computes a virtual view using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[303,3,1,"","Computes a virtual view using an explicit index transform."],"__setitem__(domain)":[304,3,1,"","Synchronously writes using an explicit index domain."],"__setitem__(expr)":[305,3,1,"","Synchronously writes using a dimension expression."],"__setitem__(indices)":[306,3,1,"","Synchronously writes using NumPy-style indexing with default index array semantics."],"__setitem__(transform)":[307,3,1,"","Synchronously writes using an explicit index transform."],T:[298,5,1,"","View with transposed domain (reversed dimension order)."],__array__:[299,3,1,"","Automatic conversion to numpy.ndarray for interoperability with NumPy."],astype:[308,3,1,"","Returns a read/write view as the specified data type."],chunk_layout:[309,5,1,"","Chunk layout of the TensorStore."],codec:[310,5,1,"","Data codec spec."],dimension_units:[311,5,1,"","Physical units of each dimension of the domain."],domain:[312,5,1,"","Domain of the array."],dtype:[313,5,1,"","Data type of the array."],fill_value:[314,5,1,"","Fill value for positions not yet written."],kvstore:[315,5,1,"","Associated key-value store used as the underlying storage."],mode:[316,5,1,"","Read/write mode."],ndim:[317,5,1,"","Alias for rank."],oindex:[318,3,1,"","Computes a virtual view using NumPy-style indexing with outer indexing semantics."],origin:[320,5,1,"","Inclusive lower bound of the domain."],rank:[321,5,1,"","Number of dimensions in the domain."],read:[322,3,1,"","Reads the data within the current domain."],readable:[323,5,1,"","Indicates if reading is supported."],resolve:[324,3,1,"","Obtains updated bounds, subject to the cache policy."],schema:[325,5,1,"","Schema of this TensorStore."],shape:[326,5,1,"","Shape of the domain."],size:[327,5,1,"","Total number of elements in the domain."],spec:[328,3,1,"","Spec that may be used to re-open or re-create the TensorStore."],transaction:[329,5,1,"","Associated transaction used for read/write operations."],vindex:[330,3,1,"","Computes a virtual view using NumPy-style indexing with vectorized indexing semantics."],with_transaction:[332,3,1,"","Returns a transaction-bound view of this TensorStore."],writable:[333,5,1,"","Indicates if writing is supported."],write:[334,3,1,"","Writes to the current domain."]},"tensorstore.TensorStore.__getitem__(domain)":{domain:[300,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.TensorStore.__getitem__(transform)":{transform:[303,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.__setitem__(domain)":{source:[304,4,2,"p-source","Source array, broadcast-compatible with\nself.domain[transform] and with a data type convertible to\nself.dtype."],transform:[304,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.__setitem__(indices)":{indices:[306,4,2,"p-indices","NumPy-style indexing terms."],source:[306,4,2,"p-source","Source array, broadcast-compatible with\nself[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.__setitem__(transform)":{source:[307,4,2,"p-source","Source array, broadcast-compatible with\nself.domain[transform] and with a data type convertible to\nself.dtype."],transform:[307,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.oindex":{__setitem__:[319,3,1,"","Synchronously writes using NumPy-style indexing with outer indexing semantics."]},"tensorstore.TensorStore.oindex.__setitem__":{indices:[319,4,2,"p-indices","NumPy-style indexing terms."],source:[319,4,2,"p-source","Source array, broadcast-compatible with\nself.oindex[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.read":{order:[322,4,2,"p-order","Contiguous layout order of the returned array:"]},"tensorstore.TensorStore.spec":{assume_metadata:[328,4,2,"p-assume_metadata","Skip reading the metadata if possible."],create:[328,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[328,4,2,"p-delete_existing","Delete any existing data before creating a new array."],minimal_spec:[328,4,2,"p-minimal_spec","Indicates whether to include in the returned Spec the\nmetadata necessary to re-create the TensorStore."],open:[328,4,2,"p-open","Allow opening an existing TensorStore."],retain_context:[328,4,2,"p-retain_context","Retain all bound context resources (e.g."],unbind_context:[328,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.TensorStore.vindex":{__setitem__:[331,3,1,"","Synchronously writes using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.TensorStore.vindex.__setitem__":{indices:[331,4,2,"p-indices","NumPy-style indexing terms."],source:[331,4,2,"p-source","Source array, broadcast-compatible with\nself.vindex[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.write":{source:[334,4,2,"p-source","Source array, broadcast-compatible with\nself.domain and with a data type convertible to\nself.dtype."]},"tensorstore.Transaction":{__init__:[336,3,1,"","Creates a new transaction."],abort:[337,3,1,"","Aborts the transaction."],aborted:[338,5,1,"","Indicates whether the transaction has been aborted."],atomic:[339,5,1,"","Indicates whether the transaction is atomic."],commit_async:[340,3,1,"","Asynchronously commits the transaction."],commit_started:[341,5,1,"","Indicates whether the commit of the transaction has already started."],commit_sync:[342,3,1,"","Synchronously commits the transaction."],future:[343,5,1,"","Commit result future."],open:[344,5,1,"","Indicates whether the transaction is still open."]},"tensorstore.Unit":{"__init__(components)":[347,3,1,"","Constructs a unit from a multiplier and base unit."],"__init__(json)":[348,3,1,"","Constructs a unit from its JSON representation."],"__init__(multiplier)":[349,3,1,"","Constructs a dimension-less quantity of the specified value."],"__init__(pair)":[350,3,1,"","Constructs a unit from a multiplier and base unit pair."],"__init__(unit)":[351,3,1,"","Constructs a unit from a string."],__eq__:[346,3,1,"","Compares two units for equality."],__mul__:[352,3,1,"","Multiplies this unit by the specified multiplier."],__truediv__:[353,3,1,"","Divides this unit by the specified divisor."],base_unit:[354,5,1,"","Base unit from which this unit is derived."],multiplier:[355,5,1,"","Multiplier for the base_unit."],to_json:[356,3,1,"","Converts to the JSON representation."]},"tensorstore.VirtualChunkedReadParameters":{if_not_equal:[358,5,1,"","Cached generation, read request can be skipped if no newer data is available."],staleness_bound:[359,5,1,"","Read may be fulfilled with cached data no older than the specified bound."]},"tensorstore.VirtualChunkedWriteParameters":{if_equal:[361,5,1,"","If non-empty, writeback should be conditioned on the existing data matching the specified generation."]},"tensorstore.WriteFutures":{add_done_callback:[363,3,1,"",""],cancel:[364,3,1,"",""],cancelled:[365,3,1,"",""],commit:[366,5,1,"",""],copy:[367,5,1,"",""],done:[368,3,1,"",""],exception:[369,3,1,"",""],remove_done_callback:[370,3,1,"",""],result:[371,3,1,"",""]},"tensorstore.array":{array:[372,4,2,"p-array","Source array."],context:[372,4,2,"p-context","Context to use."],dtype:[372,4,2,"p-dtype","Data type to which array will be converted."]},"tensorstore.d":{__class_getitem__:[379,3,1,"","Constructs from a sequence of dimension indices, ranges, and/or labels."]},"tensorstore.dtype":{"__init__(dtype)":[384,3,1,"","Construct from an existing TensorStore or NumPy data type."],"__init__(name)":[385,3,1,"","Construct by name."],__call__:[383,3,1,"","Construct a scalar instance of this data type"],name:[386,5,1,"",""],numpy_dtype:[387,5,1,"",""],to_json:[388,3,1,"",""],type:[389,5,1,"",""]},"tensorstore.open":{assume_metadata:[400,4,2,"p-assume_metadata","Skip reading the metadata if possible."],chunk_layout:[400,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[400,4,2,"p-codec","Constrains the codec."],context:[400,4,2,"p-context","Shared resource context."],create:[400,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[400,4,2,"p-delete_existing","Delete any existing data before creating a new array."],dimension_units:[400,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[400,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[400,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[400,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],kvstore:[400,4,2,"p-kvstore","Sets the associated key-value store used as the underlying storage."],open:[400,4,2,"p-open","Allow opening an existing TensorStore."],rank:[400,4,2,"p-rank","Constrains the rank of the TensorStore."],read:[400,4,2,"p-read","Allow read access."],schema:[400,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[400,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],spec:[400,4,2,"p-spec","TensorStore Spec to open."],transaction:[400,4,2,"p-transaction","Transaction to use for opening/creating, and for subsequent operations."],write:[400,4,2,"p-write","Allow write access."]},"tensorstore.virtual_chunked":{chunk_layout:[407,4,2,"p-chunk_layout","Constrains the chunk layout."],context:[407,4,2,"p-context","Shared resource context."],dimension_units:[407,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[407,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[407,4,2,"p-dtype","Constrains the data type of the TensorStore."],loop:[407,4,2,"p-loop","Event loop on which to execute read_function and/or\nwrite_function if they are\nasync functions."],rank:[407,4,2,"p-rank","Constrains the rank of the TensorStore."],read_function:[407,4,2,"p-read_function","Callback that handles chunk read requests."],schema:[407,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[407,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],transaction:[407,4,2,"p-transaction","Transaction to use for opening/creating, and for subsequent operations."],write_function:[407,4,2,"p-write_function","Callback that handles chunk write requests."]},ChunkLayout:{chunk:[410,1,2,"json-ChunkLayout.chunk","Combined constraints on write/read/codec chunks."],codec_chunk:[410,1,2,"json-ChunkLayout.codec_chunk","Constraints on the chunk grid used by the codec, if applicable."],grid_origin:[410,1,2,"json-ChunkLayout.grid_origin","Specifies hard constraints on the origin of the chunk grid."],grid_origin_soft_constraint:[410,1,2,"json-ChunkLayout.grid_origin_soft_constraint","Specifies preferred values for the origin of the chunk grid rather than\nhard constraints."],inner_order:[410,1,2,"json-ChunkLayout.inner_order","Permutation specifying the element storage order within the innermost\nchunks."],inner_order_soft_constraint:[410,1,2,"json-ChunkLayout.inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint.  If inner_order is also specified, it\ntakes precedence."],rank:[410,1,2,"json-ChunkLayout.rank","Number of dimensions."],read_chunk:[410,1,2,"json-ChunkLayout.read_chunk","Constraints on the chunk grid over which reads may be efficiently\npartitioned."],write_chunk:[410,1,2,"json-ChunkLayout.write_chunk","Constraints on the chunk grid over which writes may be efficiently\npartitioned."]},Codec:{driver:[410,1,2,"json-Codec.driver","Driver identifier"]},Context:{"&lt;resource-type&gt;":[0,1,2,"json-Context.<resource-type>",null],"&lt;resource-type&gt;#&lt;id&gt;":[0,1,2,"json-Context.<resource-type>#<id>",null],cache_pool:[0,0,1,"json-Context.cache_pool",""],data_copy_concurrency:[0,0,1,"json-Context.data_copy_concurrency",""],file_io_concurrency:[0,0,1,"json-Context.file_io_concurrency",""],gcs_request_concurrency:[19,0,1,"json-Context.gcs_request_concurrency",""],gcs_request_retries:[19,0,1,"json-Context.gcs_request_retries",""],gcs_user_project:[19,0,1,"json-Context.gcs_user_project",""],http_request_concurrency:[20,0,1,"json-Context.http_request_concurrency",""],http_request_retries:[20,0,1,"json-Context.http_request_retries",""],memory_key_value_store:[22,0,1,"json-Context.memory_key_value_store",""]},DownsampleMethod:{max:[3,1,2,"json-DownsampleMethod.max",""],mean:[3,1,2,"json-DownsampleMethod.mean",""],median:[3,1,2,"json-DownsampleMethod.median",""],min:[3,1,2,"json-DownsampleMethod.min",""],mode:[3,1,2,"json-DownsampleMethod.mode",""],stride:[3,1,2,"json-DownsampleMethod.stride",""]},IndexDomain:{exclusive_max:[16,1,2,"json-IndexDomain.exclusive_max","Exclusive upper bounds of the domain."],inclusive_max:[16,1,2,"json-IndexDomain.inclusive_max","Inclusive upper bounds of the domain."],inclusive_min:[16,1,2,"json-IndexDomain.inclusive_min","Inclusive lower bounds of the domain."],labels:[16,1,2,"json-IndexDomain.labels","Dimension labels for each dimension."],rank:[16,1,2,"json-IndexDomain.rank","Number of dimensions."],shape:[16,1,2,"json-IndexDomain.shape","Extent of each dimension of the domain."]},IndexTransform:{input_exclusive_max:[16,1,2,"json-IndexTransform.input_exclusive_max","Exclusive upper bounds of the input domain."],input_inclusive_max:[16,1,2,"json-IndexTransform.input_inclusive_max","Inclusive upper bounds of the input domain."],input_inclusive_min:[16,1,2,"json-IndexTransform.input_inclusive_min","Inclusive lower bounds of the input domain."],input_labels:[16,1,2,"json-IndexTransform.input_labels","Dimension labels for each input domain dimension."],input_rank:[16,1,2,"json-IndexTransform.input_rank","Number of input dimensions."],input_shape:[16,1,2,"json-IndexTransform.input_shape","Extent of each dimension of the input domain."],output:[16,1,2,"json-IndexTransform.output","Specifies the output index map for each output dimension."]},KeyValueStoreBackedChunkDriver:{assume_metadata:[8,1,2,"json-KeyValueStoreBackedChunkDriver.assume_metadata",""],cache_pool:[8,1,2,"json-KeyValueStoreBackedChunkDriver.cache_pool",""],context:[8,1,2,"json-KeyValueStoreBackedChunkDriver.context","Specifies context resources that augment/override the parent context."],create:[8,1,2,"json-KeyValueStoreBackedChunkDriver.create",""],data_copy_concurrency:[8,1,2,"json-KeyValueStoreBackedChunkDriver.data_copy_concurrency",""],delete_existing:[8,1,2,"json-KeyValueStoreBackedChunkDriver.delete_existing",""],driver:[8,1,2,"json-KeyValueStoreBackedChunkDriver.driver","Driver identifier"],dtype:[8,1,2,"json-KeyValueStoreBackedChunkDriver.dtype","Specifies the data type."],kvstore:[8,1,2,"json-KeyValueStoreBackedChunkDriver.kvstore",""],open:[8,1,2,"json-KeyValueStoreBackedChunkDriver.open",""],path:[8,1,2,"json-KeyValueStoreBackedChunkDriver.path","Additional path within the KvStore specified by\nkvstore."],rank:[8,1,2,"json-KeyValueStoreBackedChunkDriver.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[8,1,2,"json-KeyValueStoreBackedChunkDriver.recheck_cached_data",""],recheck_cached_metadata:[8,1,2,"json-KeyValueStoreBackedChunkDriver.recheck_cached_metadata",""],schema:[8,1,2,"json-KeyValueStoreBackedChunkDriver.schema","Specifies constraints on the schema."],transform:[8,1,2,"json-KeyValueStoreBackedChunkDriver.transform","Specifies a transform."]},KvStore:{context:[21,1,2,"json-KvStore.context",""],driver:[21,1,2,"json-KvStore.driver","Key-value store driver identifier"],path:[21,1,2,"json-KvStore.path","Key prefix within the key-value store."]},OutputIndexMap:{index_array:[16,1,2,"json-OutputIndexMap.index_array","If present, indicates that this output dimension uses an index\narray map, with the index array specified as a nested list of rank\nequal to the input_rank."],index_array_bounds:[16,1,2,"json-OutputIndexMap.index_array_bounds",""],input_dimension:[16,1,2,"json-OutputIndexMap.input_dimension","If present, indicates that this output dimension uses a single\ninput dimension map with the specified input dimension.  Must not\nbe specified in conjunction with index_array."],offset:[16,1,2,"json-OutputIndexMap.offset","Specifies an offset for this output dimension.  If neither\ninput_dimension nor index_array is\nspecified, this specifies the constant value to which this output\ndimension maps."],stride:[16,1,2,"json-OutputIndexMap.stride","Multiplier for the input index specified by\ninput_dimension or the index array value specified by\nindex_array."]},Schema:{chunk_layout:[410,1,2,"json-Schema.chunk_layout","Data storage layout constraints."],codec:[410,1,2,"json-Schema.codec",""],dimension_units:[410,1,2,"json-Schema.dimension_units","Physical units of each dimension."],domain:[410,1,2,"json-Schema.domain","Domain of the TensorStore, including bounds and optional dimension labels."],dtype:[410,1,2,"json-Schema.dtype","Specifies the data type of the TensorStore."],fill_value:[410,1,2,"json-Schema.fill_value","Fill value to use for missing data."],rank:[410,1,2,"json-Schema.rank","Number of dimensions."]},TensorStore:{context:[411,1,2,"json-TensorStore.context","Specifies context resources that augment/override the parent context."],driver:[411,1,2,"json-TensorStore.driver","Driver identifier"],dtype:[411,1,2,"json-TensorStore.dtype","Specifies the data type."],rank:[411,1,2,"json-TensorStore.rank","Specifies the rank of the TensorStore."],schema:[411,1,2,"json-TensorStore.schema","Specifies constraints on the schema."],transform:[411,1,2,"json-TensorStore.transform","Specifies a transform."]},dtype:{"byte":[411,1,2,"json-dtype.byte","Single byte."],"char":[411,1,2,"json-dtype.char","Single byte, interpreted as an ASCII character."],bfloat16:[411,1,2,"json-dtype.bfloat16","bfloat16 floating-point format number."],bool:[411,1,2,"json-dtype.bool","Boolean value (0 or 1)."],complex128:[411,1,2,"json-dtype.complex128","Complex number, where the real and imaginary components are each\nrepresented by a float64."],complex64:[411,1,2,"json-dtype.complex64","Complex number, where the real and imaginary components are each\nrepresented by a float32."],float16:[411,1,2,"json-dtype.float16","IEEE 754 binary16\nhalf-precision floating-point number."],float32:[411,1,2,"json-dtype.float32","IEEE 754 binary32\nsingle-precision floating-point number."],float64:[411,1,2,"json-dtype.float64","IEEE 754 binary64\ndouble-precision floating-point number."],int16:[411,1,2,"json-dtype.int16","16-bit signed two's-complement integer."],int32:[411,1,2,"json-dtype.int32","32-bit signed two's-complement integer."],int64:[411,1,2,"json-dtype.int64","64-bit signed two's-complement integer."],int8:[411,1,2,"json-dtype.int8","8-bit signed two's-complement integer."],json:[411,1,2,"json-dtype.json","JSON value."],string:[411,1,2,"json-dtype.string","Byte string."],uint16:[411,1,2,"json-dtype.uint16","16-bit unsigned integer."],uint32:[411,1,2,"json-dtype.uint32","32-bit unsigned integer."],uint64:[411,1,2,"json-dtype.uint64","64-bit unsigned integer."],uint8:[411,1,2,"json-dtype.uint8","8-bit unsigned integer."],ustring:[411,1,2,"json-dtype.ustring","Unicode string (represented in memory as UTF-8)."]},tensorstore:{"downsample(spec)":[380,7,1,"","Returns a virtual downsampled view view of a Spec."],"downsample(store)":[381,7,1,"","Returns a virtual downsampled view of a TensorStore."],ChunkLayout:[25,2,1,"","Describes the storage layout of a tensorstore.TensorStore."],CodecSpec:[56,2,1,"","Specifies driver-specific encoding/decoding parameters."],Context:[59,2,1,"","Manages shared TensorStore context resources, such as caches and credentials."],Dim:[71,2,1,"","1-d index interval with optionally-implicit bounds and dimension label."],DimExpression:[95,2,1,"","Specifies an advanced indexing operation."],Future:[106,2,1,"","Handle for consuming the result of an asynchronous operation."],FutureLike:[116,2,1,"","Abstract base class for types representing an asynchronous result."],IndexDomain:[117,2,1,"","Domain (including bounds and optional dimension labels) of an N-dimensional index space."],IndexTransform:[143,2,1,"","Represents a transform from an input index space to an output space."],Indexable:[173,2,1,"","Abstract base class for types that support TensorStore indexing operations."],KvStore:[174,2,1,"","Key-value store that maps an ordered set of byte string keys to byte string values."],OutputIndexMap:[217,2,1,"","Represents an output index map for an index transform."],OutputIndexMaps:[227,2,1,"","View of the output index maps for an index transform."],OutputIndexMethod:[231,2,1,"","Indicates the output index method of an OutputIndexMap."],Promise:[239,2,1,"","Handle for producing the result of an asynchronous operation."],Schema:[243,2,1,"","Driver-independent options for defining a TensorStore schema."],Spec:[269,2,1,"","Specification for opening or creating a TensorStore."],TensorStore:[297,2,1,"","Asynchronous multi-dimensional array handle."],Transaction:[335,2,1,"","Transactions are used to stage a group of modifications (e.g. writes to\ntensorstore.TensorStore objects) in memory, and then either commit the\ngroup all at once or abort it."],Unit:[345,2,1,"","Specifies a physical quantity/unit."],VirtualChunkedReadParameters:[357,2,1,"","Options passed to read callbacks used with virtual_chunked."],VirtualChunkedWriteParameters:[360,2,1,"","Options passed to write callbacks used with virtual_chunked."],WriteFutures:[362,2,1,"","Handle for consuming the result of an asynchronous write operation."],array:[372,7,1,"","Returns a TensorStore that reads/writes from an in-memory array."],bfloat16:[373,8,1,"","bfloat16 floating-point data type."],bool:[374,8,1,"","Boolean data type (0 or 1).  Corresponds to the python:bool type and numpy.bool_."],cast:[375,7,1,"","Returns a read/write view as the specified data type."],complex128:[376,8,1,"","Complex number based on float64.  Corresponds to numpy.complex128."],complex64:[377,8,1,"","Complex number based on float32.  Corresponds to numpy.complex64."],d:[378,2,1,"","Specifies a dimension selection, for starting a dimension expression."],dtype:[382,2,1,"","TensorStore data type representation."],float16:[390,8,1,"","IEEE 754 binary16 half-precision floating-point data type.  Correspond to numpy.float16."],float32:[391,8,1,"","IEEE 754 binary32 single-precision floating-point data type.  Corresponds to numpy.float32."],float64:[392,8,1,"","IEEE 754 binary64 double-precision floating-point data type.  Corresponds to numpy.float64."],inf:[393,8,1,"","Special constant equal to 2^{62}-1 that indicates an unbounded index domain."],int16:[394,8,1,"","16-bit signed two's-complement integer data type.  Corresponds to numpy.int16."],int32:[395,8,1,"","32-bit signed two's-complement integer data type.  Corresponds to numpy.int32."],int64:[396,8,1,"","32-bit signed two's-complement integer data type.  Corresponds to numpy.int64."],int8:[397,8,1,"","8-bit signed two's-complement integer data type.  Corresponds to numpy.int8."],json:[398,8,1,"","JSON data type.  Corresponds to an arbitrary Python JSON value."],newaxis:[399,8,1,"","Alias for None used in indexing expressions to specify a new singleton dimension."],open:[400,7,1,"","Opens or creates a TensorStore from a Spec."],string:[401,8,1,"","Variable-length byte string data type.  Corresponds to the Python python:bytes type."],uint16:[402,8,1,"","16-bit unsigned integer.  Corresponds to numpy.uint16."],uint32:[403,8,1,"","32-bit unsigned integer.  Corresponds to numpy.uint32."],uint64:[404,8,1,"","64-bit unsigned integer data type.  Corresponds to numpy.uint64."],uint8:[405,8,1,"","8-bit unsigned integer.  Corresponds to numpy.uint8."],ustring:[406,8,1,"","Variable-length Unicode string data type.  Corresponds to the Python python:str type."],virtual_chunked:[407,7,1,"","Creates a TensorStore where the content is read/written chunk-wise by an arbitrary function."]}},objnames:{"0":["json","schema","JSON type"],"1":["json","subschema","JSON member"],"2":["py","class","Python class"],"3":["py","method","Python method"],"4":["py","parameter","Python parameter"],"5":["py","property","Python property"],"6":["py","attribute","Python attribute"],"7":["py","function","Python function"],"8":["py","data","Python data"],"9":["std","envvar","environment variable"]},objtypes:{"0":"json:schema","1":"json:subschema","2":"py:class","3":"py:method","4":"py:parameter","5":"py:property","6":"py:attribute","7":"py:function","8":"py:data","9":"std:envvar"},terms:{"0":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,16,17,23,24,41,46,48,49,52,53,77,81,87,91,96,97,98,99,100,101,102,103,104,105,106,118,119,120,121,122,123,124,129,134,145,146,147,148,149,150,151,152,154,165,171,172,208,217,218,219,220,231,235,246,247,248,249,250,251,253,257,261,263,266,268,272,273,274,275,282,287,290,293,294,295,296,297,300,301,302,303,304,305,306,307,308,309,310,312,318,319,322,325,328,330,331,334,335,356,374,375,379,399,400,407,408,409,410,411],"05":17,"098695591f3a":17,"0x":409,"0x8":[400,409],"1":[0,1,3,4,10,11,12,13,16,17,19,20,23,24,41,46,48,49,52,53,71,72,73,79,84,85,87,88,89,90,91,92,96,97,98,99,100,101,102,103,104,105,106,118,119,120,121,122,128,129,132,133,134,135,136,138,140,141,144,145,146,147,148,149,150,151,152,157,158,159,160,161,165,168,171,172,219,220,231,237,244,246,247,248,249,250,251,253,256,261,263,266,268,270,274,275,281,290,293,294,297,298,300,301,302,303,305,306,307,308,309,310,311,317,318,319,321,325,328,330,331,334,335,345,349,351,374,375,379,393,399,400,407,408,409,410,411],"10":[13,16,17,18,69,70,71,72,73,74,75,76,77,82,84,85,86,90,91,96,101,102,103,118,125,134,146,171,247,248,261,268,273,274,287,296,297,299,301,302,304,305,306,318,319,322,330,331,334,400,408],"100":[5,10,11,13,16,51,52,55,126,137,139,246,247,248,249,257,261,268,278,286,289,290,293,294,295,310,311,314,315,325,407,409],"1000":[10,11,13,246,247,248,249,261,268,282,290,297,309,400,409],"10000":11,"1000000":52,"10000000":[0,61,65,69,70,400],"100000000":[0,407,409],"1000000000":[11,23],"100_000_000":409,"100kb":10,"100mb":[407,409],"100x100x1":409,"101":407,"102":[10,13,309,400,407,409],"1020":11,"103":407,"104":407,"1049":297,"105":[51,55,293,294,407],"106":407,"11":[13,17,76,84,96,119,152,219,220,408],"1113":11,"1132030694":409,"1161117856":409,"1194100437":409,"12":[13,16,17,96,101,102,119,322,408],"1264":11,"128":[10,13],"13":[13,102,119,171,220],"14":[13,17,103,122],"1408314276":409,"1414":400,"15":[11,17,77,103,400,408,409],"15000":409,"15100":409,"159":[10,11,13],"16":[17,24,102,394,402,411],"17":[17,101,125,152],"18":102,"1gb":23,"1nm":[11,410],"1s":[19,20],"2":[1,3,9,10,11,12,13,16,17,20,23,24,48,49,52,71,79,96,97,98,99,100,101,102,103,104,105,106,118,119,120,121,122,123,128,129,130,131,132,133,134,135,136,138,140,141,145,146,147,148,150,151,152,155,156,157,158,159,160,161,165,171,172,219,220,231,234,246,247,248,249,250,251,253,255,261,263,266,268,275,286,289,290,294,297,302,303,305,306,307,308,309,317,318,319,321,328,330,331,334,335,352,353,375,379,393,399,400,407,408,409,410],"20":[11,16,86,96,101,102,103,248,261,268,274,287,296,299,302,318,330],"200":[10,11,13,51,52,55,126,137,139,246,247,248,249,257,261,268,278,281,286,289,290,293,294,295,311,315],"2000":[10,11,13,246,247,248,249,261,268,282,290,309,400],"20000":[297,409],"2000000":[10,11,13],"2019":17,"2030":11,"2048":11,"206":[51,55],"207":[51,55],"20base":20,"20data":20,"21":[17,408],"23":102,"25":103,"28":102,"29":17,"3":[1,3,10,11,12,13,16,17,20,23,48,49,71,79,87,92,94,96,97,98,99,100,101,102,103,104,105,106,107,118,119,120,121,122,123,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,146,147,148,149,150,151,152,154,155,156,157,158,159,160,161,162,163,164,165,168,171,172,219,245,246,247,248,249,250,251,255,256,258,260,261,263,266,267,268,274,275,287,290,296,302,303,305,307,308,317,318,321,330,331,335,346,347,348,349,350,352,353,354,355,356,375,379,399,400,407,408,409],"30":[11,96,312],"300":[10,11,13,51,55,126,137,139,246,247,248,249,257,261,268,278,281,290,295],"3000":[10,11,13,246,247,248,249,261,268,282,290,309,400],"300000":351,"30037":17,"3040":11,"307":[51,55],"32":[1,2,3,4,5,6,7,8,10,11,12,13,14,16,19,20,24,395,396,403,410,411],"34432":[11,400,409],"34452":11,"357":408,"37":17,"39552":[11,400,409],"39582":11,"3e5":351,"3nm":[256,346,356],"4":[0,1,3,4,10,11,12,13,16,17,72,79,85,90,96,99,101,102,103,104,105,118,120,121,122,128,129,130,131,132,133,134,135,136,138,140,141,146,150,151,152,154,155,156,157,158,159,160,161,162,163,164,168,171,249,256,275,303,306,307,317,321,331,335,351,375,400,407,408,409,410],"40":[10,11],"40000":11,"40nm":11,"41408":[400,409],"42":[9,13,107,245,259,284,297,304,314,325,334,335,400,407],"43":335,"44":335,"4443":19,"45":335,"4611686018427387903":[24,90,91,393],"4611686018427387904":[84,85],"48":17,"486000":410,"4_4_40":11,"4nm":[11,256,351,410],"5":[1,10,12,13,16,17,51,55,72,73,74,75,76,77,79,81,82,84,85,86,87,88,89,90,91,92,94,96,99,100,101,102,103,104,105,118,119,120,121,122,123,124,128,129,130,131,132,133,134,135,136,138,140,141,146,147,149,151,152,154,155,156,157,158,159,160,161,162,163,164,168,218,219,220,239,241,242,246,247,248,249,252,261,268,272,273,274,275,287,293,294,296,297,299,300,301,302,303,304,305,306,307,310,311,317,318,319,321,322,325,328,330,331,334,335,347,348,349,350,353,355,375,399,400,407,408,409,410],"50":[312,407],"500":[10,11,13],"50000":11,"5000000":[67,69,70],"512":11,"51508":11,"51548":11,"5813054053":409,"5e":410,"5nm":[311,352,354,355],"6":[1,3,4,10,11,12,13,16,17,51,55,73,79,96,99,100,101,102,103,105,118,119,120,121,122,124,128,129,130,131,134,135,146,148,151,155,156,157,165,172,246,247,248,272,273,274,297,300,301,302,303,304,305,306,307,317,319,321,331,334,335,400,407,408,409,410],"60":[141,272,273,300,301,304,305,330,410],"62":[16,24,71,393],"632":11,"64":[10,11,13,16,23,24,400,404,409,411],"6654436a307a":17,"6901":9,"7":[16,17,51,55,94,96,101,118,119,122,125,132,134,146,148,150,151,152,158,165,171,172,219,220,261,268,287,296,318,330,352,408],"70":[272,273,274,275,287,296,299,300,301,302,303,304,305,306,307,312,313,318,319,322,328,330,331,334],"707":400,"7230":20,"75":[5,11],"754":[24,390,391,392,411],"77":[19,20],"79":[10,11,13],"7nm":353,"8":[0,4,11,12,16,17,23,24,96,100,101,102,118,119,122,125,128,134,146,148,149,150,152,157,165,171,172,246,261,268,272,287,296,297,300,304,306,311,318,319,322,330,331,334,397,400,405,408,409,411],"80":[272,273,274,275,287,296,299,300,301,302,303,304,305,306,307,312,313,318,319,322,328,330,331,334,409],"8000":20,"8080":20,"81":11,"82":409,"83":[17,409],"8_8_8":11,"8nm":311,"9":[3,10,11,13,16,17,74,96,118,122,134,146,220,246,247,272,273,300,301,304,305,306,400,408,409,410],"90":410,"9223372036854775807":94,"9223372036854775808":410,"9801a2c5d6c6":17,"99":409,"9m":410,"abstract":[15,24,116,143,173],"boolean":[8,10,11,13,22,24,99,165,261,287,318,319,374,411],"break":13,"byte":[0,10,13,23,24,174,175,182,186,197,200,203,208,357,358,360,361,401,411],"case":[3,13,14,16,17,19,20,100,101,102,103,118,134,143,146,177,180,211,303,408,410],"char":411,"class":[24,26,56,60,62,71,95,106,116,117,124,143,173,175,182,187,197,217,227,231,239,243,269,297,335,345,357,360,362,378,382,408],"default":[0,1,4,5,6,7,8,9,10,11,12,13,14,16,17,19,20,23,59,64,66,67,68,75,76,77,95,96,107,123,143,148,150,174,195,209,212,243,248,269,274,295,297,302,306,328,378,400,407,408,410],"do":[1,2,3,4,5,6,7,8,9,10,11,12,13,16,23,408,411],"export":17,"final":[11,41,53],"float":[24,26,28,30,31,39,41,53,106,112,115,197,199,201,211,345,347,349,350,352,353,355,357,359,362,369,371,373,390,391,392,407,410,411],"function":[3,16,23,24,117,407,409],"import":[23,409],"int":[24,25,26,28,32,33,34,35,36,37,39,41,44,45,46,47,48,49,53,71,73,75,76,77,80,84,85,90,91,94,95,100,101,102,103,106,114,117,120,123,126,128,132,133,137,138,139,140,141,143,145,150,157,158,159,161,162,163,164,166,168,169,170,208,217,218,219,220,223,225,226,227,228,229,230,231,232,238,243,250,260,262,263,264,265,267,269,286,288,289,291,292,295,297,317,320,321,326,327,362,370,378,380,381,393,400,407,408],"long":12,"new":[0,1,2,3,4,5,6,7,8,9,12,15,16,24,67,68,96,97,98,100,101,102,103,110,117,121,122,174,195,212,216,239,240,241,242,246,247,248,249,250,253,256,261,267,268,272,273,274,275,287,295,296,310,325,328,335,336,399,407,408,409,410,411],"null":[0,7,11,13,401,406,410],"public":[19,409],"return":[3,8,9,10,11,13,16,24,60,61,62,64,65,66,67,68,71,81,82,83,96,98,99,100,101,102,103,104,105,106,107,112,115,117,120,121,122,126,127,142,143,145,153,171,174,175,178,187,188,190,191,192,203,204,206,207,208,211,215,216,227,229,230,243,246,247,248,249,252,253,255,261,268,269,272,273,274,275,277,280,287,289,296,297,299,300,301,302,303,308,315,316,322,328,332,334,340,342,372,375,380,381,400,407,410],"static":[174,209,239,240],"transient":[19,20,22],"true":[8,9,10,11,13,22,66,71,72,73,74,75,76,77,78,81,83,86,88,89,96,110,130,131,155,156,179,194,195,212,239,241,242,295,297,299,300,301,302,303,304,305,306,307,309,310,311,312,313,314,315,318,319,322,325,328,330,331,334,335,346,400,408,409],"while":[3,4,10,11,13,16,17,20,41,46,53,202,205,299,345,401,406,407,408,409,410],A:[0,10,11,13,18,96,104,211,239,250,256,267,295,311,322,345,378,400,407,408,410],As:[10,13,16,96,120,177,180,373,408],At:[16,123,150,408],By:[13,16,17,174,209,328,400,407],For:[3,9,10,11,12,13,15,16,17,19,20,51,55,100,119,143,299,334,362,407,410],If:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,19,20,21,22,23,41,46,47,51,53,55,79,84,85,90,91,94,97,98,100,101,102,103,104,106,107,109,112,115,118,121,123,134,146,150,151,195,202,203,205,207,208,211,216,246,247,248,249,250,261,267,268,272,273,274,275,287,295,296,315,328,334,335,351,360,361,400,407,408,410,411],In:[3,13,14,16,19,20,21,22,74,134,177,181,303,335,345,362,408,409,410],It:[1,3,4,5,6,7,8,9,10,11,12,13,16,17,22,23,96,118,146,295,345,400,408,410],No:[10,13],On:[13,14,17,19,118,146],One:[0,3,8,10,13,411],The:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,41,51,53,55,65,71,87,92,97,98,100,101,102,103,106,112,115,116,117,118,129,134,135,143,146,149,151,174,188,195,202,203,205,207,211,212,215,216,245,246,250,256,267,269,271,272,294,295,300,311,312,314,328,332,334,335,344,345,362,400,401,406,407,408,410,411],There:[17,398,401,406,409,411],To:[3,8,10,11,13,15,17,19,66,188,209,295,302,328,400,407,408],With:[8,9,10,11,13],_:11,__add__:[187,188],__array__:[297,299,322],__call__:[143,145,382,383],__contains__:[71,72,73],__delitem__:[174,202,203,205,211,216],__eq__:[25,26,27,40,71,74,175,176,197,198,243,245,269,271,345,346],__getitem__:[59,65,95,96,99,105,117,118,119,120,121,122,143,146,147,148,149,165,172,174,202,203,205,211,227,228,243,246,247,248,249,261,268,269,272,273,274,275,287,296,297,300,301,302,303,305,318,330,378],__index__:408,__iter__:[71,79],__len__:[71,80,117,126,227,229],__mul__:[345,352],__repr__:[71,81,117,127,143,153,174,187,190,204,243,252,269,277],__setitem__:[174,202,203,205,211,216,297,304,305,306,307,319,331],__str__:[71,82,231,233],__truediv__:[187,188,191,345,353],_arrai:16,_bit:23,_dimens:16,_origin:16,_rank:16,_shape:16,a1:16,a2:16,aa:207,abc:[18,188,191,192,194,195,206,209,212,285,315],abort:[24,211,335,337,338,340,342,343,344],abov:[16,84,90,94,96,408],absolut:20,abstracteventloop:[107,407],access:[9,10,11,13,15,16,18,19,20,21,46,47,253,362,400,408,409],accomplish:334,accord:[10,11,13,16,17,118,146,174,175,177,181],account:[19,51,55,74,410],achiev:[10,13],acid:15,acknowledg:334,actual:[134,174,202,205,207,216,250,267,295,302,334,400,408,410],ad:[17,19,97,98,99,100,101,102,103,104,105,172,268,296,330,331],adapt:1,add:[17,25,26,39,53,96,243,267,269,295,408],add_done_callback:[106,108,113,362,363],addit:[3,8,9,10,11,13,14,16,17,19,20,21,23,25,26,39,53,74,95,96,187,191,243,250,267,269,295,335,344,345,362,400,407,408,410],addition:[16,17,71,195,209,256,295,335,407,408],address:14,advanc:[15,24,95,408],advantag:[15,334],advis:11,affect:[17,95,101,102,103,119,122,253,334,378,407,408,410],after:[8,9,10,11,13,17,211,250,267,295,334,351,362,400,407,408,410],ag:211,against:410,alia:[24,25,26,34,48,117,133,137,143,155,156,157,158,159,160,161,163,164,243,260,269,286,297,317,399],align:[17,118,146,246,272,300,304,331,334,410],all:[0,3,8,10,11,12,13,14,15,16,20,21,22,24,41,51,53,55,96,100,101,102,103,104,123,143,150,208,212,250,267,295,303,322,328,334,335,400,407,408,410,411],all_proxi:14,allow:[0,12,13,16,17,18,19,20,96,295,306,307,328,334,335,400,410],allus:19,along:[11,250,256,267,295,311,400,407,410],alreadi:[8,10,11,13,16,17,109,195,209,250,267,295,335,337,340,341,400,407],also:[1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,41,53,71,74,95,96,100,101,102,103,174,209,250,267,295,306,315,334,335,362,373,400,407,408,409,410,411],altern:[14,334,408],alwai:[3,8,9,10,11,13,96,100,304,305,306,307,319,331,408,410],among:3,amount:[95,100,208,378,408],amplif:[23,410],an:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,24,51,55,71,78,93,95,96,97,100,101,102,106,107,109,116,117,118,119,122,123,124,125,134,143,145,146,150,151,152,174,177,180,181,187,191,200,202,203,205,208,209,211,216,217,219,227,231,239,243,246,249,250,256,267,269,272,275,295,297,299,300,303,304,306,307,319,328,331,334,335,342,345,362,372,373,378,382,384,393,398,407,408,409,410,411],analog:15,ancestor:9,ani:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,19,20,24,25,26,29,38,41,42,51,52,53,55,56,57,58,59,60,61,62,63,64,67,96,99,103,105,106,112,117,118,121,125,134,142,143,146,152,165,171,172,174,187,188,189,194,195,202,203,205,207,209,211,212,216,239,240,243,251,261,266,268,269,271,276,278,279,281,282,284,287,290,293,295,296,302,304,306,307,312,318,319,322,328,330,331,334,335,344,345,348,356,400,407,408,409,410,411],anoth:[0,71,72,74,87,92,117,118,129,135,143,146,149,175,176,243,245,269,271,407,408],api:[1,14,15,19],append:[20,187,188,202,203,205,211,216],appl:17,appli:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,20,41,53,95,96,99,105,117,119,143,147,148,165,172,248,261,268,274,287,296,301,312,318,319,378,400,408,410,411],applic:[17,19,310,314,407,410],application_default_credenti:19,appropri:[19,407],aqacaamabaafaayaaaagqqaameeaaebbaabqqqaaye:13,ar:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,23,24,28,39,41,51,53,55,64,74,96,97,99,104,105,117,118,119,122,146,165,172,173,174,208,209,211,250,256,261,267,268,271,277,278,279,281,282,284,287,290,295,296,306,318,319,330,331,334,335,345,373,400,401,406,407,408,410,411],arbitrari:[10,16,20,24,398,407,408],arch:17,archflag:17,architectur:17,archiv:17,aren:17,arg0:[227,228,382,383],arg:408,argument:408,arithmet:3,arm64:17,arr:134,arrai:[2,3,4,5,6,7,8,9,12,15,16,20,21,24,95,99,105,106,119,122,134,143,148,150,152,165,172,217,219,231,234,243,248,259,261,268,269,274,277,284,287,295,296,297,299,302,303,304,305,306,307,308,312,313,314,317,318,319,321,322,328,330,331,334,335,372,373,375,378,407,409,410,411],arrang:334,array_lik:[24,96,217,219,221,243,250,259,267,269,284,295,297,299,304,305,306,307,314,319,322,331,334,372,400,407,408],ascii:411,aspect:[26,28,30,31,39,41,53,410],aspect_ratio:[10,11,13,26,28,30,39,41,53,410],aspect_ratio_soft_constraint:[26,28,31,39,41,53,410],assert:[69,107,245,271,393],assign:[10,11,16,304,305,306,307,319,331,407,408,409],associ:[71,107,182,184,186,203,211,216,269,285,295,297,315,329,340,400],assum:[8,9,10,11,13,16,295,328,400,410],assume_metadata:[8,10,11,13,295,328],astyp:[297,308],async:[107,335,407,409],asynchron:[15,106,107,108,109,110,111,112,113,115,116,239,297,304,305,306,307,319,322,331,334,335,340,362,409],asyncio:[106,107,109,334,407,409],atom:[9,15,22,335,336,339,407],attempt:[9,19,20,400,407,408],attribut:[9,10,408],augment:[1,2,3,4,5,6,7,8,9,10,11,12,13,18,19,20,21,22,23,411],auth:19,authent:[0,14],author:[14,19,20],automat:[1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,19,113,297,299,335,400,410,411],avail:[0,14,17,357,358,373],averag:3,avif:[8,411],avoid:[11,13,107,118,146,400,408],await:[106,107,174,204,206,207,209,210,211,212,214,215,216,297,299,300,301,302,303,309,310,311,312,313,314,315,318,322,325,328,330,334,335,375,400,407,408,409],awar:[13,408],ax:[10,294,300,301],b1:13,b:[9,17,74,104,118,146,149,174,179,183,192,200,202,203,205,206,207,208,209,211,215,216,245,255,271,280,400,408],back:[1,4,5,6,7,10,11,12,13,15,18,21,335,409],backoff:[19,20],backward:[8,9,10,11,13,95,101,378,408],bandwidth:15,base:[1,2,3,4,5,6,7,8,9,10,11,12,13,16,18,19,20,23,24,116,173,174,187,190,193,204,210,243,245,252,269,271,277,295,308,328,345,347,350,354,375,376,377,380,381,400,408,410,411],base_unit:[345,347,349,351,354,355,410],base_url:20,basic:408,bazel:17,bazel_cach:17,bazel_tool:17,bazelisk:17,bazelisk_hom:17,bazelrc:17,bdist_wheel:17,bear:11,bearer:20,becaus:[9,11,334,407,408],becom:[112,115,207,334,343],been:[13,16,106,110,111,250,267,285,295,312,334,335,337,338,340,343,344,400,407],befor:[8,10,11,13,211,295,328,400],begin:[20,96,106,113,408],behav:119,behavior:[14,16,17,22,96,118,146,211,322,334,408],being:[8,9,10,11,13,17,211,335,407],below:[16,85,91,94,408],best:[10,11,13],better:[299,407],between:[4,16,19,400,407],bfloat16:[13,24,373,411],big:[10,13,23,411],bill:19,binari:17,binary16:[24,390,411],binary32:[24,391,411],binary64:[24,392,411],bind:[17,195,209,212,295,328,407],bit:[4,10,13,16,23,24,394,395,396,397,402,403,404,405,411],block:[3,10,11,13,18,107,112,115,202,203,205,299,304,305,306,307,319,322,331,334,335,407,410],blocksiz:[10,13,297,300,301,302,303,310,318,325,328,330,335,400,409],blosc:[10,13,17,297,300,301,302,303,310,318,325,328,330,400,410],blosclz:[10,13],bool:[3,13,24,25,26,27,38,40,41,53,56,58,60,61,62,64,71,72,73,74,75,76,77,78,83,86,88,89,96,106,109,110,111,117,123,130,131,143,150,155,156,174,175,176,179,187,194,195,197,198,212,243,245,266,269,271,293,295,297,323,324,328,333,335,336,338,339,341,344,345,346,362,364,365,368,374,400,408,411],bool_:[24,374],boringssl:17,both:[8,10,11,13,16,41,53,118,146,250,267,295,400,407,410],bound:[3,8,10,11,12,13,16,20,24,71,74,75,76,77,78,84,85,87,88,89,90,91,92,96,97,99,100,103,105,117,118,123,128,129,130,131,132,133,134,135,138,143,146,148,150,152,155,156,157,158,159,161,165,166,172,174,175,177,180,181,195,209,211,212,213,215,243,250,262,267,269,271,277,288,295,297,312,315,320,324,328,332,357,359,400,407,408,410],boundari:410,box:[117,129],broadcast:[13,96,105,172,246,250,267,268,272,295,296,300,304,306,307,314,319,330,331,334,400,408,410],broader:407,brotli:17,browser:20,bsd:14,bucket:[2,3,4,5,6,7,9,11,13,19,23,196,210,214,400,409],buffer:[3,13,407],bug:17,build:15,build_def:17,build_doc:17,build_ext:17,built:[14,17,373,408],bundl:[14,17],bz2:13,bzip2:[10,13,17],bzl:17,c16:13,c8:13,c:[1,15,18,41,46,53,96,104,207,278,290,297,302,303,318,322,328,330,400,408,410],c_rehash:14,cach:[0,8,9,10,11,13,15,17,23,24,59,211,212,297,322,324,328,334,357,358,359,400,409],cache_pool:[0,4,5,6,7,8,9,10,11,13,23,61,65,67,69,70,277,297,300,301,302,303,318,328,330,334,400,407,409],cacherevalidationbound:[8,9,10,11,13],cafil:[19,20],call:[66,96,106,107,110,113,121,202,203,205,211,241,249,253,302,322,334,337,340,407,408],callabl:[106,108,114,362,363,370,407],callback:[24,108,114,357,360,362,363,370,407],can:[8,10,11,13,14,15,16,17,19,134,208,246,250,256,267,272,295,300,328,334,335,357,358,400,407,408,409,410],cancel:[106,109,110,111,334,362,364,365],cancellederror:[109,110],cannot:[95,96,249,335],canon:410,capabl:[13,408],capath:[19,20],captur:[195,212,295,328],care:[11,400],cartesian:117,cast:[8,24,308,375,411],caus:[12,13,408],cc:207,cd:17,cdot:16,cert:[14,19,20],certain:[16,21],certif:17,chain:[96,408],chang:[16,17,95,98,211,269,295,335,378,408],channel:[4,5,6,7,11,400,409],charact:[17,20,411],characterist:400,check:[8,10,11,13,71,72,73,340,408],child:[69,70],choic:23,choos:410,chosen:[3,10,11,13,400],chunk:[15,23,24,26,27,28,30,31,32,33,36,37,39,40,41,43,46,50,51,53,54,55,243,250,253,267,269,278,290,295,297,302,303,309,318,328,330,334,400,407],chunk_aspect_ratio:[10,11,13,41,53,400],chunk_aspect_ratio_soft_constraint:[41,53],chunk_el:[10,13,41,53,400],chunk_elements_soft_constraint:[41,53],chunk_layout:[1,2,3,4,5,6,7,8,9,10,11,12,13,243,246,247,248,249,250,251,253,261,263,266,267,268,269,278,290,295,297,309,325,400,407,410,411],chunk_shap:[10,13,41,53,400],chunk_shape_soft_constraint:[41,53],chunk_siz:[11,400,409],chunklayout:[10,11,13,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,243,246,247,248,249,250,253,261,263,266,267,268,269,278,295,297,309,400,407,410],chunkss:410,circumst:8,cl:17,clang:17,clear:[41,53],clevel:[10,13,297,300,301,302,303,310,318,325,328,330,400,410],clone:17,close:[16,71,76],cloud:[15,19,21,334,400,409],cloudpickl:407,cloudsdk_config:19,cmake:17,cname:[10,13,297,300,301,302,303,310,318,325,328,330,400,410],coalesc:[334,335],code:17,codec:[12,25,26,41,43,53,243,250,254,267,269,279,290,295,297,310,325,400],codec_chunk:[10,11,13,25,41,43,53,410],codec_chunk_aspect_ratio:[41,53],codec_chunk_aspect_ratio_soft_constraint:[41,53],codec_chunk_el:[41,53],codec_chunk_elements_soft_constraint:[41,53],codec_chunk_shap:[41,53],codec_chunk_shape_soft_constraint:[41,53],codecspec:[11,24,56,57,58,243,250,254,267,269,279,295,297,310,400],colexicograph:[10,11,41,46,53,322,410],column:[41,46,53,322,410],com:[14,17,20],com_github_cares_car:17,com_github_nlohmann_json:17,com_github_pybind_pybind11:17,com_google_boringssl:17,com_google_brotli:17,com_google_snappi:17,com_google_tensorstor:17,combin:[1,2,3,4,5,6,7,8,9,10,11,12,13,345,400,408,410,411],comma:[14,17],command:[14,17],commit:[24,202,205,207,211,216,322,334,335,340,341,342,343,344,362,366,407],commit_async:[215,334,335,337,340,342],commit_start:[335,341],commit_sync:[174,306,335,340,342],common:[3,8,12,14,21,41,53,143,408],compar:[25,26,27,40,71,74,175,176,197,198,243,245,269,271,345,346],comparison:[245,250,267,271,295,400],compat:[0,8,9,10,11,12,13,14,16,17,117,134,250,267,295,304,306,307,314,319,331,334,400,408,409,410],compil:17,complement:[24,394,395,396,397,411],complet:[16,106,108,109,111,112,115,202,203,205,207,211,216,239,241,242,304,305,306,307,319,322,331,334,362,408,409],complex128:[13,24,376,411],complex64:[13,24,377,411],complex:[3,24,376,377,408,411],compon:[8,9,10,11,13,20,25,41,117,123,143,150,187,191,243,250,411],compos:[2,15,16,122,143,149,249,275],composit:16,compress:[6,13,300,301,335,400,409,410],compressed_segment:[11,400,409],compressed_segmentation_block_s:[11,400,409],compression_level:6,compressor:[10,254,279,284,297,302,303,310,318,325,328,330,400,410],comput:[3,12,16,19,117,129,202,203,205,246,272,297,300,301,302,303,318,330,407,408],concaten:14,concis:21,concurr:[0,8,9,10,11,13,14,15,18,19,20,21,106,212,295,328,334],condit:[19,118,146,211,216,360,361],config:19,configur:[0,15,19,20],confirm:400,confus:408,conjunct:[16,295,328,400,410],connect:[14,15,19,20],consecut:[19,96,408],consequ:[119,122,195,212,295,328],consid:[10,334,410],consist:[8,9,10,11,13,15,96,134,211,408],constant:[1,16,24,217,218,231,235,393,408],constrain:[10,11,12,15,16,250,267,295,400,407,408,410],constraint:[1,2,3,4,5,6,7,8,9,12,16,25,26,28,31,33,36,37,39,41,44,45,46,47,51,53,55,243,250,253,254,256,267,269,278,279,281,282,284,290,295,328,345,400,407,410,411],construct:[25,26,28,29,41,42,56,57,59,66,67,68,70,71,75,76,77,78,117,123,124,125,143,150,151,152,175,177,182,183,187,189,197,199,217,218,219,220,243,250,251,269,276,345,347,348,349,350,351,378,379,382,383,384,385],constructor:66,consum:[24,96,106,208,362,408],contain:[3,9,14,16,17,71,72,73,79,96,100,117,129,175,179,351,407,408,409,410],content:[18,24,400,407],context:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,24,59,60,61,62,63,64,65,66,67,68,69,70,96,106,194,195,204,206,209,212,271,277,295,297,299,300,301,302,303,308,315,318,328,330,334,335,372,375,400,407,408,409,411],context_a:271,context_b:271,contextresourc:[0,1,4,5,6,7,8,9,10,11,12,13,18,19,20,22,23],contigu:[1,71,322],continu:[202,203,205],contrast:408,contribut:23,control:[20,334],conveni:[1,4,5,6,7,8,9,10,11,12,13,19,23,303],convers:[2,297,299,409],convert:[2,4,10,25,26,38,41,52,53,56,58,106,107,121,187,194,195,212,243,250,266,267,269,293,295,304,306,307,319,328,331,334,345,356,372,400,408],coordin:[96,408],copi:[0,16,17,174,175,178,187,192,206,243,245,253,255,269,271,280,334,362,367,408],core:[0,15,408],coroutin:[107,116,407],correctli:16,correspond:[10,11,13,16,19,20,21,22,23,24,28,39,41,53,87,92,96,97,106,107,129,134,135,239,250,256,267,295,311,362,373,374,376,377,390,391,392,394,395,396,397,398,400,401,402,403,404,405,406,407,408,410,411],corrupt:[8,10,11,13,295,328,400],cost:16,count:134,cpu:[0,17],crash:334,creat:[1,2,3,4,5,6,7,8,9,12,15,17,24,59,62,63,65,174,195,209,212,239,240,256,269,295,297,299,300,301,302,303,304,305,306,307,309,310,311,312,313,314,315,318,319,322,325,328,330,331,334,335,336,407,409,410,411],credenti:[0,19,24,59,409],crlf:20,cross:17,crt:[14,19,20],curl:[17,19,20],current:[0,7,13,16,17,106,202,203,205,211,297,299,322,334,335,407,409],custom:22,d:[24,71,96,97,98,99,100,101,102,103,104,105,118,119,144,145,146,147,244,247,270,273,293,294,298,301,305,378,379,393,408,409],dask:408,data:[0,1,2,3,8,9,12,15,20,21,22,23,188,189,190,191,192,193,204,206,211,243,250,258,267,269,283,295,302,304,306,307,308,310,313,314,319,322,328,331,334,357,358,359,360,361,372,373,374,375,382,383,384,390,391,392,394,395,396,397,398,400,401,404,406,407,408,410,411],data_copy_concurr:[0,1,4,5,6,7,8,9,10,11,12,13,23,96,106,277,297,300,301,302,303,308,318,328,330,375,400,407,408,409],data_encod:[11,23,400,409],data_typ:11,dataabc:188,databas:15,dataset:[10,18,19,22,194,297,299,300,301,302,303,304,305,306,307,312,313,317,318,319,321,322,328,330,331,334,335],dataset_3d:409,dataset_futur:409,datatyp:[10,283,300,301,335,400,409],date:[17,20],datetim:13,deadlin:[112,115,369,371],deadlock:[107,407],decod:[0,15,24,56,410],decrypt:14,def:[107,407],defer:408,defin:[0,1,4,5,6,7,8,9,10,11,12,13,16,18,19,20,22,23,24,96,117,243,373,407,408,410],del:202,delai:[19,20],delet:[8,10,11,13,174,202,205,207,216,295,328,400],delete_exist:[8,10,11,13,295,328,335,400,409],delete_rang:[174,207],demand:12,demonstr:409,denot:408,depend:[14,19,20,96,322,334,408,411],deprec:[13,408],depth:4,deriv:[12,345,354],describ:[12,16,21,24,25,26],desir:256,detail:[14,15,20],determin:[8,10,16,23,118,146,174,400,410],determinist:3,develop:19,deviat:[345,410],dexpr:408,diagon:[95,97,378],did:[112,115],differ:[3,8,10,11,13,16,20,21,99,105,106,165,172,211,250,261,267,268,287,295,296,318,319,325,328,330,331,400,401,406,407],dim:[24,51,55,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,117,118,120,124,146,150,171,217,219,222,393],dimens:[3,12,13,15,16,24,25,26,28,35,39,41,49,51,53,55,71,75,76,77,78,93,95,97,98,99,100,101,102,103,104,105,117,119,120,121,123,124,126,130,131,134,136,139,143,144,147,150,155,156,160,172,217,220,243,244,246,247,250,256,267,268,269,270,272,273,281,286,289,293,294,295,296,297,298,300,301,305,311,321,330,331,335,345,349,378,379,399,400,407,409],dimension:[3,15,16,24,96,117,297,408],dimension_separ:[13,297,302,303,318,328,330,400],dimension_unit:[10,11,12,243,250,256,267,269,281,295,297,311,400,407,410],dimensionless:[10,345,410],dimexpress:[24,95,96,97,98,99,100,101,102,103,104,105,117,119,143,147,243,247,269,273,297,301,305,378,408],dimselectionlik:[95,104,117,121,378,379],direct:96,directli:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,16,17,18,19,20,134,143,188,278,279,281,282,284,290,304,305,306,307,319,331,345,407,408,410,411],directori:[14,17,18,19,20,21,22,23],disabl:[13,14],discrep:[118,146],disjoint:334,dist:17,distribut:[14,17,400],divid:[345,353,408],divisor:[345,353],do_read:407,do_writ:407,doc:17,document:[14,21,410,411],doe:[8,10,11,13,14,16,17,18,20,66,96,98,100,101,102,103,134,143,278,279,281,282,284,285,290,295,302,315,328,334,345,373,400,408,410],domain:[3,12,15,24,95,96,97,98,99,100,101,102,103,104,105,106,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,144,146,147,148,149,150,151,152,154,155,156,157,158,159,160,161,163,165,166,169,170,172,243,244,246,247,248,249,250,256,257,261,262,264,265,267,268,269,270,272,275,281,282,288,289,290,291,292,294,295,296,297,298,299,300,301,303,304,305,306,307,311,312,319,320,321,322,325,326,327,330,331,334,378,393,399,400,407,408,409,410],domin:408,don:17,done:[15,17,19,100,106,107,111,239,241,242,250,267,295,362,368,400,408],dot:13,doubl:[24,345,392,410,411],download:17,downsampl:[8,24,380,381,411],downsample_factor:[3,24,380,381],downsample_method:3,downsamplemethod:[3,380,381],driver:[0,15,24,56,96,106,174,188,189,190,191,192,193,194,195,196,202,203,204,205,206,207,208,209,210,211,212,214,215,216,243,254,256,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,289,290,293,294,295,296,297,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,318,319,322,325,328,330,331,334,335,345,375,400,408,409,410,411],drop:[16,334],dtype:[1,2,3,4,5,6,7,8,9,10,11,12,13,24,96,106,243,245,250,251,252,255,258,263,266,267,269,280,282,283,284,290,295,297,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,317,318,319,321,322,325,328,330,331,334,335,372,373,374,375,376,377,382,383,384,385,386,387,388,389,390,391,392,394,395,396,397,398,400,401,402,403,404,405,406,407,408,409,410,411],due:[11,18,23,211],dummi:[96,408],duplic:[98,408],durabl:[15,202,205,207,216,334,362],dynam:14,e:[10,11,13,14,16,17,19,24,41,46,53,94,96,100,101,102,103,118,122,146,211,212,253,322,328,335,407,408,410],each:[0,3,8,9,10,11,12,13,14,16,20,23,28,39,66,98,100,101,102,103,117,123,130,131,134,136,143,150,155,156,160,243,250,253,256,267,269,281,295,297,299,311,400,407,408,410,411],earlier:[12,17],easili:408,effect:[12,16,96,118,146,195,212,269,278,279,281,282,284,290,295,328,337,340,408],effici:[3,11,15,16,25,50,51,54,55,334,335,410,411],effort:17,either:[8,10,11,13,16,19,24,71,118,121,146,304,305,306,307,319,331,334,335,343,378,400,408],element:[2,3,11,25,26,28,32,33,39,41,46,47,52,53,96,117,141,143,170,243,265,269,277,292,297,327,408,410],elements_soft_constraint:[26,28,33,39,41,53,410],empti:[9,10,16,71,83,87,92,93,118,146,175,177,179,180,181,200,216,250,267,295,345,360,361,400,407,408,410],enabl:[8,10,11,13,15,19,71,79,143,334,407,408],encod:[0,4,5,10,13,15,17,20,23,24,56,400,409,410,411],end:[19,20,21,22,23,104,134,408],endian:[10,11,13,23,411],engin:19,enhanc:408,ensur:[17,106,113,188,256,334,335,400,408],entir:[9,11,13,16,23,118,146,299,334,351,408,410,411],entri:[197,200],environ:[17,19,20],epoch:[8,112,115,197,201,211],equal:[0,1,10,11,13,16,23,24,25,26,27,40,46,47,64,71,74,84,85,90,91,94,96,97,122,175,176,197,198,243,245,246,247,249,250,267,269,271,272,273,275,285,295,300,303,304,307,310,314,315,345,346,393,400,407,408,410],equival:[3,4,10,13,20,41,53,71,80,96,97,100,101,102,104,117,122,134,144,166,169,170,211,244,250,262,264,265,267,270,288,291,292,295,298,299,303,320,321,326,327,328,334,342,349,400,407,408,410],error:[9,10,11,12,13,16,19,20,106,107,112,115,118,146,202,203,205,211,239,241,250,267,295,342,400,407,408],escap:17,etag:20,etc:[3,14,17,19,20,325],even:[3,9,15,20,64,202,205,408],evenli:410,event:[107,407],everi:[8,9,10,11,13,15,16,20,23,97,400,407,410],evict:0,exactli:[3,10,11,13,96,400,407,408],exampl:[17,189,209,335,407,409],except:[10,11,13,100,106,107,110,112,113,202,203,205,239,241,250,267,271,295,335,362,369,400,407,408,410],excess:11,exclud:21,exclus:[16,71,75,84,85,117,123,128,143,150,157,175,177,180,408],exclusive_max:[10,11,13,16,71,72,73,74,75,76,79,81,82,84,85,86,87,88,89,90,92,94,117,118,119,120,121,122,123,125,128,129,130,131,134,135,146,150,151,157,171,175,177,180,246,247,248,261,268,272,290,295,300,304,325,408],exclusive_min:[71,85,91],execut:[0,17,106,113,400,407],exist:[1,2,3,4,5,6,7,8,9,10,11,12,13,17,96,100,118,146,150,151,202,203,205,207,209,211,216,250,256,267,295,304,306,307,319,328,331,334,360,361,382,384,407,408,410,411],exit:335,expect:[14,17,116,256,408],experiment:7,explicit:[8,16,71,117,122,123,130,131,143,150,155,156,243,246,249,250,267,269,272,275,295,297,300,303,304,307,334,400,407,408,410],explicitli:[10,11,13,113,408,410],exponenti:19,expos:9,expr:[100,117,119,143,147,243,247,249,269,273,275,297,301,303,305,307,408],express:[15,24,71,81,95,96,98,99,100,101,102,103,104,105,117,119,134,143,147,243,247,269,273,297,301,305,378,399],extend:[1,2,3,4,5,6,7,8,9,10,11,12,13,16,18,19,20,22,23],extens:[13,17,96,373],extent:[13,16,141,202,205,207,216,410],extern:[195,211,212,295,328,335],extract:[95,97,378,408],f2:13,f4:[13,284,400],f8:13,f:[13,106,297,322,334,400,407],facil:14,factor:3,fail:[1,2,3,4,5,6,7,8,9,10,11,12,13,19,211,335,407,408,411],fake:19,fals:[8,10,11,13,22,26,38,56,58,60,61,62,64,72,73,75,76,77,78,86,88,89,94,96,107,110,130,131,155,156,179,187,194,195,212,239,241,242,243,266,269,293,295,297,324,328,335,336,400,408,410],faster:17,fastest:[10,13,17],fetch:17,few:408,fewer:[0,408],field:[13,87,92,410],file:[4,6,7,9,10,11,13,14,15,17,19,21,22,188,189,190,191,192,193,194,204,206,334,335,400,409],file_io_concurr:[0,18,69,70,194,204,206],filesystem:[0,15,18,21,400,409],fill:[15,104,243,250,259,267,269,284,295,297,314,400,409,410],fill_valu:[12,13,243,245,250,259,267,269,284,295,297,302,303,314,318,325,328,330,400,410],filter:[13,254,297,302,303,310,318,325,328,330,400,410],find:[14,17],fine:[304,305,306,307,319,331],finit:[16,71,78,79,86,94,134,250,267,295,400,407,410],first:[11,16,17,96,97,105,172,268,296,330,331,400,408,410],fix:[334,401,406],fix_resizable_bound:[297,324],flag:[17,87,92,129,135],flatten:408,float16:[13,24,390,411],float32:[10,11,13,24,284,309,375,377,391,400,411],float64:[10,13,24,376,392,411],fly:3,flyeem:409,flyem:400,fold:20,follow:[3,10,11,12,13,14,16,17,19,20,116,118,146,250,267,295,345,400,407,408,410,411],forc:[106,113],form:[16,65,303,408],format:[10,11,13,14,15,23,400,410,411],fortran:[10,11,41,46,53,322,410],forward:362,found:203,fraction:211,fragment:20,framework:59,free:407,frequent:3,fresh:[8,9,10,11,13],from:[0,1,2,3,7,8,9,10,11,12,13,15,16,18,19,20,24,25,26,29,41,42,53,56,57,59,62,63,67,68,69,70,96,97,104,117,120,123,124,125,134,143,150,151,152,175,177,187,189,197,199,208,209,211,243,250,251,253,269,276,299,334,335,345,347,348,350,351,354,372,378,379,382,384,400,408,409,410],fsync:334,fulfil:[357,359],full:[9,13,16,22,96,328,408,410],fulli:[13,15,16,143,195,212,295,328,334,400],further:410,futur:[17,24,106,107,108,109,110,111,112,113,114,115,116,174,207,208,209,211,216,239,240,241,242,297,322,324,334,335,340,343,362,363,366,367,370,400,409],futurelik:[24,106,107,116,407],g:[13,14,19,24,96,100,101,102,103,212,253,328,335,407,408],gc:[2,3,9,13,21,22,196,210,214,334,400,409],gcc:17,gce:19,gcloud:19,gcs_request_concurr:[14,19,400,409],gcs_request_retri:[19,400,409],gcs_user_project:[19,400,409],gener:[17,96,174,182,184,197,198,199,200,201,211,216,303,345,357,358,360,361,407,408,410],get_running_loop:[107,407],get_valu:107,git:17,github:17,given:[0,3,18,59,65,71,73,96,100,101,102,103,408,410],global:[0,19,20,407],good:23,googl:[15,17,19,334,409],google_application_credenti:[14,19],googleapi:14,grain:[304,305,306,307,319,331],granular:[11,410],graph:[195,212,295,328],grei:4,greya:4,grid:[10,11,13,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,44,45,50,53,54,334,410],grid_origin:[10,11,13,25,41,44,45,51,53,55,246,247,248,249,250,251,253,261,263,266,268,290,309,325,410],grid_origin_soft_constraint:[25,41,45,51,53,55,410],grid_soft_constraint:[28,39],group:[11,23,24,335],gs:[4,5,6,7,11,19,21,23,196,214,409],gsutil:19,guarante:[9,15,202,205,207,211,216,334,335,362,373],guid:15,gzip:[10,11,13,23,400,409,410],ha:[10,11,12,13,16,19,96,103,104,106,109,110,111,195,207,212,250,267,285,295,314,328,334,335,337,338,340,341,343,344,362,400,407,408],half:[0,24,71,75,174,175,177,390,411],handl:[19,20,24,59,60,65,106,231,233,239,297,362,407],hard:[10,11,13,16,25,26,28,36,39,41,44,46,47,51,53,55,410],hash:[11,23,400,409],have:[10,11,12,13,16,17,19,20,71,98,118,146,195,212,246,250,267,272,295,300,312,328,335,373,400,408,409,410],header:[10,13,20],height:[4,5,6,7],help:23,hemibrain:400,here:10,hierarch:410,high:[15,400],higher:[4,10,13,211],hit:409,hold:362,hostnam:14,how:[14,19,20,410],howev:[3,13,17,19,96,106,143,407],htab:20,http:[17,19,21],http_archiv:17,http_proxi:14,http_request_concurr:20,http_request_retri:20,https_proxi:14,hull:[12,71,87,117,129],i1:13,i2:13,i4:[13,400],i8:13,i:[0,10,11,13,15,16,19,41,46,51,53,55,94,96,100,104,118,122,146,202,203,205,211,219,220,278,279,281,282,284,290,322,334,335,408,409,410],id:[0,13,19,23,65,297,302,303,310,318,325,328,330,400,410],ident:[10,11,16,23,122,150,151,212,271,328,400,409],identifi:[0,8,10,13,16,17,21,117,118,120,146,174,197,200,407,408,410,411],ieee:[24,390,391,392,411],iexpr:408,if_equ:[216,360,361],if_not_equ:[211,357,358,407],ignor:[1,2,3,4,5,6,7,8,9,10,11,12,13,51,55,410,411],ijg:11,imag:[4,5,6,7,11],imaginari:411,immedi:[16,107,116,408],immut:[117,345,407,408],implement:[9,13,15,17,23,211],impli:[269,278,279,281,282,284,290],implicit:[10,11,12,13,16,24,71,75,76,77,78,87,88,89,92,96,97,117,118,123,129,130,131,135,143,146,150,155,156,250,267,295,400,407,408,410],implicit_low:[71,74,75,76,77,78,88],implicit_lower_bound:[117,123,130,143,150,155,171,408],implicit_upp:[71,74,75,76,77,78,81,89],implicit_upper_bound:[117,123,131,143,150,156,171],implicitli:[10,11,13,16,408,409,410],impos:[16,345,410],improv:[334,335],includ:[10,11,13,14,15,17,20,22,24,64,117,121,269,278,279,281,282,284,290,304,306,307,319,322,328,331,334,408,410],include_default:[26,38,56,58,60,61,62,64,187,194,243,266,269,293],inclus:[16,71,75,76,77,90,91,117,123,132,133,138,143,150,158,159,161,166,175,177,181,243,262,269,288,297,320,408],inclusive_max:[16,71,74,76,84,85,89,90,91,94,117,123,132,158,393],inclusive_min:[10,11,13,16,71,72,73,74,75,76,77,79,81,82,84,85,86,87,88,89,90,91,92,94,117,118,119,120,121,122,123,125,128,129,130,131,132,133,134,135,136,138,140,141,146,150,151,159,171,175,177,181,246,247,248,261,268,272,290,295,300,304,325,393],incompat:[12,51,55,250,267,295,400,407],inconsist:9,increment:[17,250,256,267,295,311,400,407,410],indefinit:407,independ:[11,16,24,243,400,410],index:[3,4,5,6,7,11,15,23,25,49,71,73,95,97,98,99,100,101,102,103,104,105,118,119,120,121,122,123,124,125,134,139,145,146,147,148,149,150,151,152,154,165,167,172,173,217,219,227,231,246,248,249,250,256,261,267,268,272,274,275,282,287,294,295,296,300,302,303,304,306,307,311,318,319,330,331,378,393,399,400,407,410],index_arrai:[16,152,171,217,219,221,249,274,275,287,296,302,303,307,318,330],index_array_bound:[16,152],index_exp:[117,134,407],index_rang:[150,171,217,219,222],indexdomain:[10,11,13,16,24,25,51,55,71,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,146,151,154,243,246,247,248,249,250,257,261,267,268,269,272,282,295,297,300,301,304,305,312,400,407,408,410],indexerror:[96,98,100,101,102,103,249,408],indexinterv:16,indextransform:[1,2,3,4,5,6,7,8,9,10,11,12,13,16,24,96,97,98,99,100,101,102,103,104,105,117,119,122,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,217,218,219,220,227,231,243,248,249,261,268,269,272,273,274,275,287,294,296,297,300,301,303,307,399,408,411],indic:[3,10,11,13,16,24,64,71,75,76,77,78,79,86,88,89,93,95,96,99,100,104,105,117,118,123,130,131,134,143,145,146,148,150,155,156,165,172,175,177,179,180,181,182,185,200,211,216,231,243,248,249,250,256,261,267,268,269,274,275,277,287,295,296,297,302,303,306,307,311,318,319,323,328,330,331,333,334,335,338,339,341,344,345,362,378,379,393,400,407,408,410],indicaet:10,indirectli:[143,410],individu:[9,11,12,408,410],ineffici:11,inf:[16,24,51,55,71,75,76,78,82,84,85,90,91,96,97,98,99,103,105,122,123,125,147,148,149,150,152,165,172,183,199,211,393,399,407,408],infinit:[16,71,134,250,267,295,400,407,410],info:11,inform:[14,17,19,20,400],infti:16,inherit:[59,67,68,69],init:0,initi:[1,17,19,20,407,408],initial_delai:[19,20],inlin:408,inner:[13,46,47,71,72],inner_ord:[10,11,13,25,41,46,47,48,49,52,53,246,247,248,249,250,251,253,261,266,268,290,309,325,400,410],inner_order_soft_constraint:[25,41,46,47,53,410],innermost:[25,41,46,53,410],input:[1,2,3,4,5,6,7,8,10,11,12,13,16,24,95,96,97,98,99,100,101,102,103,104,105,121,143,145,146,147,148,149,150,151,152,154,155,156,157,158,159,160,161,162,163,164,165,172,217,220,250,267,294,295,378,399,400,407,408,411],input_dimens:[12,16,122,149,150,151,152,171,217,220,223,274,293,302,330,408,409],input_exclusive_max:[12,16,96,106,143,146,150,152,155,156,157,171,272,273,274,275,287,293,295,296,297,300,301,302,303,308,318,328,330,375,400,408,409],input_inclusive_max:[16,100,143,150,158],input_inclusive_min:[12,16,96,100,101,102,106,143,146,150,152,155,156,157,158,159,160,161,171,272,273,274,275,287,293,295,296,297,300,301,302,303,308,318,328,330,375,400,408,409],input_label:[16,96,97,99,100,101,102,103,104,105,143,146,150,152,154,160,162,164,168,171,272,273,300,301,400,408,409],input_origin:[143,159,161],input_rank:[16,96,122,143,145,146,147,149,150,155,156,162,164,218,220,249,275,303,399,408],input_shap:[16,97,101,102,103,104,143,150,154,155,156,157,158,159,160,161,162,163,164,168,171,219,249,272,273,274,275,287,296,303,307,408],insensit:20,insert:408,instal:[15,19],instanc:[0,66,109,382,383],instead:[8,9,10,11,13,14,17,106,134,143,188,211,295,303,328,334,400,407,408],instruct:15,int16:[10,11,13,24,394,411],int32:[1,2,10,11,12,13,24,96,245,317,321,395,400,408,411],int64:[10,13,24,396,411],int8:[10,11,13,24,397,411],integ:[0,1,2,3,4,5,6,7,8,10,11,12,13,16,19,20,23,24,71,99,119,120,122,165,261,287,318,319,394,395,396,397,402,403,404,405,410,411],integr:408,intend:[17,19,21,22,23],interdepend:[195,212,295,328],interfac:[15,23,174,239,304,305,306,307,319,331,362],interleav:408,intermedi:408,intern:[10,11,211],interoper:[297,299,373,409],interpret:[20,134,182,185,345,408,410,411],interrupt:[112,115],intersect:[71,92,97,117,135],interv:[3,16,24,51,55,71,72,73,74,75,76,77,78,79,80,82,84,85,86,90,91,94,174,175],introduc:15,introspect:65,invoc:[17,408],invok:[17,106,108],involv:[16,408],ip:14,irrespect:[100,211],isol:[15,335],isomorph:[195,212,295,328],issu:334,iter:[71,79],its:[16,18,59,62,63,67,117,125,143,152,211,243,251,345,348,408,410],itself:[9,17,334,362,408],j:[16,118,146],janelia:400,jax:[13,373],join:[8,9,10,11,13,187,191],jointli:334,jpeg:[8,11,17,23,411],jpeg_qual:11,jpg:5,json:[0,1,2,3,4,5,6,7,8,10,12,13,14,15,16,17,18,19,20,21,22,24,25,26,29,38,41,42,43,44,45,46,47,50,52,53,54,56,57,58,59,60,61,62,63,64,67,117,125,142,143,152,171,174,187,189,190,194,204,209,243,245,251,252,266,269,271,276,277,293,345,348,356,398,400,410],json_point:9,just:[8,10,11,13,16,295,328,400,408,409],k:[104,118,146],keep:334,kei:[9,10,11,13,15,24,59,65,174,175,177,179,182,186,187,188,191,192,193,196,197,200,202,203,205,206,207,208,209,210,211,212,213,214,215,216,269,285,295,297,315,334,335,400,409,410],kept:[11,17],key_encod:13,keyboard:[112,115],keyboardinterrupt:[112,115],keyerror:[202,203,205,211],keyrang:[174,175,176,177,178,179,180,181,207,208],keyvaluestorebackedchunkdriv:[8,10,11,13,411],keyword:106,know:400,kvstore:[2,3,4,5,6,7,8,9,10,11,13,18,19,20,21,22,23,24,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,289,290,293,294,295,296,297,299,300,301,302,303,304,305,306,307,309,310,311,312,313,314,315,318,319,322,325,328,330,331,334,335,400,407,409],kvstoreurl:[8,9,10,11,13,18,19,20,21,22],label:[10,11,13,15,16,24,71,74,75,76,77,78,81,82,87,92,93,95,96,97,98,104,117,119,120,121,123,124,125,129,135,136,143,147,150,160,246,247,248,249,250,257,261,267,268,272,295,300,301,304,305,312,378,379,400,407,410],lambda:106,larg:[15,208,299],larger:[16,409],largest:11,last:[16,96,110,120,121,202,203,205,211,241,249,408],latenc:[15,334,400],later:[17,18,400],latest:17,latter:13,layer:[9,10,11,13,334,410],layout:[15,24,25,26,40,41,48,49,51,52,53,55,243,250,253,267,269,278,295,297,309,322,400,407],lead:[8,10,11,13,16,107,295,328,351,400,410],least:[0,10,16,118,146,408],leav:[10,100,101,102,407],left:[11,16,118,146,400,407],legaci:408,len:126,length:[3,10,13,16,24,145,401,406,408,410],leq:16,less:[16,250,256,267,295,311,345,349,400,407,408,410],level:[2,6,10,13,14,15,211,409,410],lexicograph:[3,41,46,53,174,175,177,181,322,410],libavif:17,libcurl:14,libjpeg:17,libpng:17,librari:[13,15,134,143,408],libtiff:17,lightweight:408,like:[14,15,19,20,119,122,256,400,408],likewis:408,limit:[0,7,15,16,19,20,21,69,70,362,407],line:20,link:[14,17,239,240,241,242],linux:[14,17],list:[10,14,16,17,79,120,174,207,208,211,380,381,400,408],liter:408,littl:[11,13,411],load:17,local:[0,14,15,18,19,21],localhost:19,locat:[14,19,20,325,400],lock:18,logic:[16,117,334,411],login:19,longer:362,loop:[107,407],lost:9,low:[16,23],lower:[3,4,16,71,75,76,77,78,85,88,91,97,100,103,117,123,130,133,134,138,143,150,155,159,161,166,175,177,181,243,262,269,288,297,320,408,410],lowest:3,lru:0,lz4:[10,13,17,297,300,301,302,303,310,318,325,328,330,400,410],lz4hc:[10,13],m1:16,m2:16,m:[16,17,410],mac:14,machin:[15,18,19,400],maco:17,macosx_deployment_target:17,made:[211,335,407],mai:[0,3,9,10,11,12,13,14,16,17,18,19,20,21,22,23,71,100,101,102,103,104,107,116,117,121,123,150,174,202,203,205,209,211,212,215,239,256,297,299,304,306,307,310,319,322,325,328,331,332,334,340,344,345,357,359,378,400,407,408,410,411],main:[112,115],major:[41,46,53,322,410],make:[14,17,410],manag:[24,59,335],mani:[14,16,19,20,96,143,400,408],manipul:22,manual:[16,17],map:[0,12,16,23,24,96,97,98,99,100,101,102,103,104,105,119,122,143,145,146,147,148,149,150,151,152,165,167,172,174,217,218,219,220,227,294,399,408],mark:[16,71,109,239,241,242,408],match:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,16,20,22,87,92,98,100,101,102,103,118,146,208,211,216,250,267,295,328,360,361,400,407,408,410,411],mathrm:[16,23],mathtt:16,max:3,max_delai:[19,20],max_retri:[19,20],maximum:[0,3,19,20,112,115],mayb:17,mean:[3,8,9,10,11,13,408],meaning:94,mechan:[4,5,6,7,8,9,10,11,13,15,174,362,408],median:3,member:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,16,18,19,20,21,22,23,41,43,44,45,46,47,50,53,54,64,410,411],memori:[0,1,8,10,11,13,15,16,20,21,24,174,195,202,203,205,207,208,209,211,212,215,216,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,289,290,293,294,295,296,297,299,300,301,302,303,304,305,306,307,309,310,311,312,313,314,315,318,319,322,325,328,330,331,334,335,372,400,407,409,411],memory_key_value_stor:[22,195,212,277,297,300,301,302,303,315,318,328,330,400],mere:[302,334,362],merg:[28,39,250,267,295,400,407,410],metadata:[8,10,11,13,19,23,256,278,279,281,282,283,284,286,289,290,293,294,295,297,300,301,302,303,318,328,330,335,409],metadata_kei:13,metdata:10,method:[3,10,13,19,24,217,224,231,303,380,381,408,409],microsoft:17,middl:409,million:[10,11,13],min:[3,16],mind:334,minim:[400,408],minimal_spec:328,minimum:[3,17,117,129],minishard:23,minishard_bit:[11,23,400,409],minishard_index_encod:[11,23,400,409],mismatch:16,miss:[174,182,183,185,211,216,410],mix:408,mode:[3,17,96,99,105,269,295,297,316,328,335,400],model:13,modif:[24,335],modifi:[9,16,117,187,195,253,334],modul:[17,407],more:[1,4,5,6,7,8,9,10,11,12,13,14,16,17,21,23,96,121,303,334,407,408,411],most:[3,11,13,14,16,19,21,96,110,121,123,150,174,202,203,205,211,241,249,303,334,408,410],ms:14,msvc:17,much:17,multi:[15,22,24,297],multipl:[0,3,8,10,11,13,15,16,17,18,19,20,22,256,295,304,305,306,307,319,328,331,334,335,400,407,408],multipli:[10,11,16,345,347,349,350,351,352,355,410],multiscal:11,multiscale_metadata:[11,400,409],murmurhash3_x86_128:23,must:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,19,20,41,53,66,87,92,96,104,113,122,211,246,249,250,267,272,275,295,300,303,304,307,328,334,400,407,408,410,411],my:[2,3,4,5,6,7,9,11,13,19,20,23,196,210,214],n5:[8,15,271,276,277,280,281,283,285,286,289,293,294,295,300,301,304,305,311,312,315,335,400,410],n:[16,24,96,117,408],name:[10,11,13,17,20,231,233,236,382,385,386,407,408],nanomet:11,nasm:17,nativ:[10,13,15,408],ndarrai:[297,299,407,408,409],ndim:[25,26,34,48,117,137,143,164,243,260,269,286,297,317],nearest:3,necessari:[8,10,11,13,14,16,118,146,295,328,400,411],necessarili:[96,408,410],need:[16,17,96,143,345,408,410],neg:[104,120,134,408,410],neither:[8,9,10,11,13,16,328,400,407],neq:16,nest:[1,12,16,195,209,295],nesteddirectorystor:13,net_zlib:17,net_zstd:17,network:[15,18,19,20],neuroglanc:[11,15,23,400,409,410],neuroglancer_multiscale_volum:11,neuroglancer_precomput:[8,23,256,400,409,410],neuroglancer_uint64_shard:[11,21],neuroglancer_uint64_sharded_v1:[11,23,400,409],never:[8,322,334,408],newaxi:[24,96,97,399,408],newer:[357,358],newli:97,nghttp2:17,nlohmann:17,nm:[10,11,256,281,311,346,347,348,350,351,352,353,354,356,410],no_proxi:14,non:[3,8,9,10,11,13,16,17,19,23,87,92,96,104,118,146,174,209,250,267,295,335,360,361,362,400,407,408,410],none:[16,19,20,24,25,26,28,30,31,32,33,34,35,36,37,39,41,44,45,46,47,51,52,53,55,59,66,67,68,71,75,76,77,78,95,96,100,101,102,103,106,107,108,112,113,114,115,117,123,134,143,150,151,174,187,195,202,205,207,208,209,211,212,213,215,216,217,221,222,223,226,239,241,242,243,246,247,248,249,250,254,256,257,258,259,260,261,263,267,268,269,272,273,274,275,279,281,282,283,284,285,286,287,289,294,295,296,297,299,302,303,310,311,314,315,318,325,328,329,330,332,335,337,340,342,343,362,363,366,367,369,370,371,372,378,399,400,407,408],nonzero:[96,408],nor:[8,10,11,13,16,328,400,407],normal:[1,4,5,6,7,8,9,10,11,12,13,14,16,17,20,23,118,146,250,267,295,334,335,400,408],note:[3,10,11,14,16,17,96,250,267,295,400,407],now:[334,400],np:[134,299,407,409],num_channel:[11,400,409],number:[0,3,4,5,6,7,8,10,11,16,17,19,20,23,24,25,26,28,32,33,35,39,41,49,53,98,100,101,102,103,112,115,117,123,126,134,139,141,143,150,170,208,243,265,269,292,297,321,327,345,351,376,377,408,410,411],numer:[3,16,345,408,410],numpi:[13,16,24,95,96,99,100,105,117,134,143,148,165,172,243,248,249,261,268,269,274,275,287,296,297,299,302,306,318,319,330,331,373,374,376,377,378,382,384,390,391,392,394,395,396,397,398,401,402,403,404,405,406,409],numpy_dtyp:[382,387],numpyindexingspec:[95,96,99,105,143,148,165,172,243,248,261,268,269,274,287,296,297,302,306,318,319,330,331,378],o:[0,15,202,203,205,278,279,281,282,284,290,322,408,409],oauth2:14,obj:[148,408],object:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,16,18,19,20,21,22,23,24,87,92,106,107,112,115,117,124,129,134,135,150,151,196,210,214,239,241,242,253,299,334,335,345,362,369,371,382,383,389,408,409,410,411],object_:[398,401,406],observ:[335,407],obsolet:20,obtain:[10,13,96,117,253,297,324,408,409],occupi:411,occur:[16,106,202,203,205,408],odd:3,offer:3,offici:13,offset:[3,12,16,25,51,55,95,101,102,122,149,150,151,152,168,171,217,218,219,220,225,293,378,408,409,410],often:[19,334],oindex:[95,99,143,148,165,243,248,249,261,268,269,274,275,287,296,297,302,303,306,307,318,319,330,331,378],older:[8,9,10,11,13,211,357,359],omit:[12,400,408],onc:[16,24,121,216,334,335,344,362,407],one:[10,13,14,16,19,23,96,97,118,123,146,150,250,267,295,303,400,407,408,410],ones:10,onli:[0,3,7,8,9,10,11,12,13,14,16,17,18,20,41,51,53,55,96,97,106,123,150,216,250,267,278,279,281,282,284,290,295,316,322,334,335,362,400,407,408,409,410],onto:408,op1:408,open:[1,2,3,4,5,6,7,8,9,10,11,12,13,15,23,24,71,75,106,174,175,177,195,202,203,204,205,206,207,208,209,210,211,212,214,215,216,256,269,295,297,299,300,301,302,303,304,305,306,307,309,310,311,312,313,314,315,318,319,322,325,328,330,331,334,335,344,407,408,409,410,411],openssl:14,oper:[0,8,9,10,11,12,13,14,15,16,17,18,23,24,96,98,99,100,101,102,103,104,105,106,108,109,110,111,112,113,115,119,122,143,148,165,172,173,174,182,202,205,207,209,211,215,216,239,248,261,268,274,287,296,297,302,304,305,306,307,319,329,331,332,334,344,362,400,407],opn:408,opt:17,optim:[13,17],optimist:15,option:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,71,117,243,250,267,269,278,279,281,282,284,290,295,328,357,360,400,407,410,411],order:[10,11,16,17,19,23,24,25,41,46,47,53,96,104,143,144,174,175,177,181,208,243,244,269,270,278,290,297,298,302,303,318,322,328,330,334,400,408,410,411],org:17,org_aomedia_avif:17,org_blosc_cblosc:17,org_lz4:17,org_nghttp2:17,org_sourceware_bzip2:17,org_tukaani_xz:17,origin:[3,10,11,13,16,25,41,44,45,53,95,100,101,102,103,117,133,138,143,161,166,195,212,243,250,262,267,269,288,295,297,320,328,378,400,407,408,410],orthogon:[99,165,261,287,318,319,408],os:14,other:[3,10,11,13,16,17,25,26,27,28,39,40,51,55,66,71,73,74,87,92,96,117,118,123,129,135,143,175,176,197,198,202,203,205,243,245,269,271,303,345,346,400,407,408,410],otherwis:[1,2,3,4,5,6,7,8,10,11,12,13,16,17,19,20,23,75,76,77,107,118,123,146,150,342,410,411],out:[16,96,97,98,99,100,101,102,103,104,105,146,147,148,149,150,151,152,165,172,294,399,408],outer:[95,99,143,165,243,261,269,287,297,318,319,378],output:[12,17,24,95,96,97,98,99,100,101,102,103,104,105,119,122,143,145,146,147,148,149,150,151,152,165,167,168,171,172,217,218,219,220,227,229,230,231,249,250,267,274,275,287,293,294,295,296,302,303,307,318,330,378,399,400,407,408,409],output_rank:[122,143,145,168,249,275,303,304,307],output_user_root:17,outputindexmap:[16,24,122,143,149,150,151,167,168,171,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,249,275,303,307],outputindexmethod:[24,217,224,227,231,232,233,234,235,236,237,238],outsid:[335,408],over:[3,14,16,71,79,122,150,151,334,408,410],overlap:[9,12],overrid:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,17,18,19,20,21,22,23,295,328,400,411],overridden:[10,17,195,209,295,400],own:19,pack:13,page:7,pai:19,pair:[22,239,240,345,350],parallel:400,paramet:[10,11,13,19,20,21,24,28,39,41,53,56,64,65,67,68,75,76,77,78,87,92,98,100,101,102,103,104,107,112,115,119,120,121,122,123,124,129,135,145,150,151,177,195,202,203,205,207,208,209,211,212,216,246,249,250,267,272,275,295,300,303,304,306,307,319,322,328,331,334,372,400,407,410,411],parent:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,18,19,20,21,22,23,59,67,68,69,70,411],pars:[59,62,68,174,187,351,410],part:[17,25,41,243,250,256,378],partial:[8,10,11,13,16,400],particular:[0,15],particularli:[94,407],partit:[299,410],pass:[17,24,357,360],path:[4,5,6,7,8,9,10,11,13,14,15,17,18,19,20,21,22,23,174,187,188,189,190,191,192,193,194,195,196,202,203,204,205,206,207,209,210,211,212,214,216,285,315,335,400,409],pattern:106,pem:14,pend:0,pep:408,per:[10,11,13,16,23,26,28,32,33,39,410],percent:20,perfect:408,perfectli:[334,408],perform:[2,3,11,15,16,95,202,205,207,209,215,216,278,279,281,282,284,290,304,305,306,307,319,322,331,332,400,407,408,409,410],permiss:19,permit:[8,9,10,11,13,16,95,96,104,119,122,250,267,295,400,407,408],permut:[16,25,41,46,47,53,410],persist:[13,335],physic:[10,24,243,250,256,267,269,281,295,297,311,345,400,407,410],pick:11,pip:17,place:[11,14,96],plain:95,plane:4,platform:[13,17],plu:408,pm:16,png:[8,17,411],point:[24,334,335,345,373,390,391,392,410,411],pointer:9,polici:[297,324],pool:[0,23,212,328,400,407],portion:[351,410],posit:[3,12,16,250,267,295,297,314,400,408,409],posix:[17,18],possibl:[8,10,11,13,16,17,295,325,328,400,407],potenti:408,power:408,pre:17,prebuilt:17,preced:[14,41,53,250,267,295,400,407,410],precis:[24,41,53,334,345,390,391,392,398,401,406,410,411],precomput:[11,15,23,410],predecessor:408,prefer:[41,53,410],prefix:[19,21,22,23,174,187,193,210,408],prepar:14,presenc:9,present:[3,10,16],preserv:407,preset:10,preshift_bit:[11,23,400,409],prevent:17,previou:408,previous:[1,4,5,6,7,8,9,10,11,12,13,18,19,20,22,23,106,114,209,400,407],primarili:[65,71,119,122],print:[14,75,76,77,78,82,106,254,256,257,258,259,263,283,286,289,294,407],prior:[8,9,10,11,13,17,98,100,101,102,103,407,408],problem:[13,19,20],process:[9,15,18,299],produc:[24,106,112,115,239,408],product:[117,141],progress:17,project:[17,19],project_id:19,promis:[24,106,110,239,240,241,242],propag:[12,87,92,129,135],properti:[3,10,13,15,21,23,155,156,157,158,159,160,161,163,253,335,400,407,410,411],propos:408,protocol:[18,408],provid:[9,10,11,13,14,15,17,18,19,106,334,335,362,400,408],purpos:[22,119,407,408],py:[17,117,124,148],pybind11:17,python3:17,python:[1,13,15,24,71,81,306,307,398,401,406,408],qualiti:[4,5,11],quaniti:[345,410],quantiti:[24,250,256,267,295,311,345,349,400,407,410],quantiz:4,queri:[15,20,106,110,111],queued_for_writeback_bytes_limit:0,quit:3,r:[179,316],rais:[51,55,79,98,100,101,102,103,106,112,115,121,134,202,203,205,208,211,246,247,248,249,250,261,267,268,272,273,274,275,287,295,296,335,342,400,407],rang:[5,16,71,95,101,102,103,104,174,175,176,177,178,179,180,181,207,208,219,220,334,378,379,408],rank:[1,2,3,4,5,6,7,8,9,10,11,12,13,16,25,26,28,34,35,39,41,46,48,49,51,53,55,96,97,98,99,100,101,102,103,104,105,117,118,119,122,123,126,130,131,134,137,139,143,146,147,148,149,150,151,152,162,164,165,168,172,227,229,230,243,245,246,247,248,249,250,251,252,255,256,258,260,261,263,266,267,268,269,275,286,289,290,294,295,297,303,304,307,317,321,325,399,400,407,408,410,411],rare:[13,408],rate:410,rather:[41,46,47,53,96,408,410],ratio:[26,28,30,31,39,41,53,410],raw:[10,23,335],re:[17,23,174,195,212,295,297,328,400,407],reach:0,read:[2,3,4,5,6,7,8,9,10,12,13,15,16,20,23,24,25,26,41,50,51,53,174,182,183,203,209,211,215,216,295,297,299,302,303,304,305,306,307,308,316,319,322,323,328,329,331,332,334,335,357,358,359,362,372,375,407,408,410],read_chunk:[10,11,13,25,41,50,51,52,53,290,309,325,410],read_chunk_aspect_ratio:[41,53],read_chunk_aspect_ratio_soft_constraint:[41,53],read_chunk_el:[11,41,52,53],read_chunk_elements_soft_constraint:[41,53],read_chunk_shap:[11,41,51,53,407],read_chunk_shape_soft_constraint:[41,53],read_chunk_templ:[25,51,55],read_context:407,read_funct:407,read_futur:409,read_param:407,readabl:[297,323],reader:[18,335],readi:[112,115,207,334,343],readm:17,readresult:[174,182,183,184,185,186,209,211,216],real:[250,267,295,400,407,411],rebuild:17,receiv:[16,19,20,112,115],recent:[0,96,110,121,202,203,205,211,241,249,408],recheck:[8,9,10,11,13],recheck_cached_data:[8,9,10,11,13,409],recheck_cached_metadata:[8,10,11,13],recommend:[11,17,23,304,305,306,307,319,331,345,408,410],recomput:407,record:[202,205,207,216],rectangular:[3,11,16],recurs:410,reduc:[17,303],redund:[400,410],refer:[0,1,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,96,195,212,295,328,334,408,410,411],reflect:[211,302,312,322,334,362],regardless:[4,8,9,10,11,13,408],region:[3,11,16,408,409],regist:[13,106,108,114],regular:[20,25,26,334,335,408,410],rel:[11,20,104,207,408,410],relat:[17,19,20,401,406],relationship:16,reli:411,relianc:18,remain:[10,13,16,96,103,195,209,295,344,351,408,410],remot:[0,14,15],remov:97,remove_done_callback:[106,114,362,370],reorder:104,repeatedli:23,replac:[195,295,408],repo:17,repositori:17,repres:[10,11,13,16,22,24,71,116,143,217,239,322,334,345,408,410,411],represent:[4,16,18,19,20,21,22,24,25,26,29,38,42,52,56,57,58,59,60,61,62,63,64,67,81,82,125,127,142,152,153,171,189,190,194,196,204,214,245,251,252,266,271,276,277,293,345,348,356,382,408,410,411],request:[19,20,106,109,211,357,358,400,407],requestor:19,requir:[1,2,3,4,5,6,7,8,9,10,11,12,13,18,19,20,21,22,23,123,150,295,322,328,400,409,410,411],reserv:16,resiz:[10,11,13,16,71,88,89],resolut:[10,11,281,400,409,410],resolv:[107,116,208,211,216,297,324,408],resourc:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,24,59,60,61,65,66,195,209,212,271,277,295,328,400,407,411],respect:[3,11,28,39,71,97,100,334,408],respons:20,restrict:[20,208],result:[10,11,12,13,15,16,17,24,96,97,98,105,106,107,112,113,115,116,118,146,149,172,174,182,183,195,202,203,205,208,211,212,239,241,242,246,268,272,295,296,299,300,302,304,305,306,307,319,322,328,330,331,334,335,342,343,362,371,400,407,408,409,410],retain:[28,39,104,212,328,408,410],retain_context:[174,212,328],retri:[19,20],retriev:[19,59,65,409],revalid:[8,9,10,11,13,20],revers:[104,143,144,243,244,269,270,297,298],rewrit:11,rfc:[9,20],rgb:4,rgba:4,right:[16,19,20,118,146],rightarrow:16,roll:335,root:18,round:[3,11,16,408],row:[41,46,53,322,410],rs1:18,rtf:17,rule:[16,17],run:[19,107,112,115,407],runtim:[14,19,20],rw:316,s:[10,12,14,17,24,394,395,396,397,408,411],safe:[15,18,19,334,400],same:[0,8,9,10,11,12,13,16,17,20,22,66,98,100,101,102,103,195,212,295,310,315,325,328,334,335,362,400,407,408,409,410],satisfi:[11,322,408],satur:15,save:14,scalar:[96,100,101,102,103,304,306,307,319,331,334,373,382,383,408],scale:[11,256],scale_index:[11,400,409],scale_metadata:[11,23,400,409],scheama:12,schema:[1,2,3,4,5,6,7,8,9,15,16,24,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,290,295,297,325,400,407,411],scheme:[18,19,20,21,22],script:17,sdist:17,sdk:19,se_curl:[14,17],second:[8,16,112,115,197,201,211],section:[14,15,19,20],secur:[14,19,20],segment:[400,409,410],sel:408,select:[1,2,3,4,5,6,7,8,9,12,24,87,92,95,96,97,98,100,101,102,103,104,117,121,129,135,256,378,379,411],self:[27,38,39,40,51,52,53,55,58,61,64,65,72,73,74,79,80,81,82,84,85,87,90,91,92,94,96,98,99,100,101,102,103,104,105,108,109,110,111,112,113,114,115,118,119,120,121,122,126,127,129,135,142,144,145,146,147,148,149,153,165,166,169,170,171,172,176,178,188,190,191,192,194,195,198,202,203,204,205,206,207,208,211,212,215,216,228,229,231,233,241,242,244,245,246,247,248,249,252,255,261,262,264,265,266,267,268,270,271,272,273,274,275,277,280,287,288,291,292,293,295,296,298,299,300,301,302,303,304,305,306,307,308,314,318,319,320,321,322,324,326,327,328,330,331,332,334,337,340,342,346,352,353,356,363,364,365,368,369,370,371,383,388],semant:[18,95,96,99,105,143,148,165,172,243,248,261,268,269,274,287,296,297,302,306,318,319,330,331,378,408],send:20,sensit:20,separ:[0,8,9,10,13,14,17,19,188,202,203,205,211,216,299,334,408,411],sequenc:[12,28,39,41,53,95,96,98,100,101,102,103,118,121,123,124,143,145,146,150,151,250,267,295,378,379,400,407,408],serial:16,serv:[11,118,146,256,407,410],server:[14,19,20],servic:19,set:[3,4,11,12,14,17,19,20,22,24,41,53,95,98,100,174,211,250,267,295,328,378,400,407,408],set_except:[239,241],set_result:[239,242],setup:[15,17],sever:[17,106],sha256:17,shape:[16,25,26,28,30,31,36,37,39,41,51,53,55,117,123,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,150,163,169,243,246,247,248,249,250,257,261,264,267,268,269,282,290,291,295,297,299,300,301,302,303,304,305,306,307,309,310,311,312,313,314,315,318,319,322,325,326,328,330,331,334,400,407,408,410],shape_soft_constraint:[26,28,37,39,41,52,53,410],shard:[23,400,409,410],shard_bit:[11,23,400,409],shard_data_encod:11,shardingspec:[11,23],share:[0,14,15,18,19,20,24,59,66,195,209,212,295,328,400,407],shift:[95,101,102,378,408],shlex:17,shortcut:408,shorthand:[306,307],should:[8,9,10,11,13,14,17,19,20,21,22,23,107,334,360,361,407,410],show:17,shuffl:[10,13,297,300,301,302,303,310,318,325,328,330,400,410],sign:[16,24,394,395,396,397,411],signal:239,signific:[23,334],silent:408,similar:[16,99,100,105,165,172,261,268,287,296,318,319,330,331,408],simpler:3,simplest:17,simpli:[97,107,141,362,407,408],simultan:[17,400],sinc:[8,16,96,112,115,134,197,201,211,407,408,409],singl:[9,10,11,13,14,16,24,96,104,117,120,174,202,203,205,208,211,216,217,220,250,256,267,277,295,311,345,391,400,407,408,409,410,411],single_input_dimens:[16,231,237],singleton:[24,97,399],size:[0,10,11,13,16,17,28,39,71,77,80,81,83,87,92,94,117,123,141,143,150,170,243,265,269,292,297,327,334,400,407,409,410],skip:[8,10,11,13,17,295,328,357,358,408],slice:[96,100,117,118,134,143,146,408,409],slightli:20,slower:[10,13],slowest:[10,13],small:[1,11],smallest:[3,11,13],snappi:[10,13,17],so:[17,409],soft:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,25,26,28,31,33,37,39,41,45,46,47,51,53,55,410,411],sole:96,some:[10,16,335,345,400,410],sourc:[16,17,297,304,305,306,307,319,331,334,362,372],sp:20,space:[17,24,25,49,96,97,98,99,100,101,102,103,104,105,117,139,143,146,147,148,149,150,151,152,162,164,165,168,172,250,267,294,295,399,400,407,408,410],spec:[8,10,11,13,15,20,59,62,63,64,66,67,68,70,96,173,174,187,188,189,190,191,192,193,194,195,196,209,210,212,245,246,258,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,310,328,380,400],special:[0,11,16,17,19,20,24,84,85,90,91,96,177,180,393,408,410],specif:[0,1,2,3,4,5,6,7,8,9,10,12,13,17,18,19,20,21,22,24,56,59,62,63,174,187,195,196,197,200,212,214,269,278,279,281,282,284,290,295,328,345,400,410,411],specifi:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,28,39,41,46,47,51,53,55,56,71,75,76,77,95,96,100,101,102,103,104,105,107,112,115,117,118,120,121,123,134,146,150,151,172,174,175,177,182,195,197,202,205,207,208,209,211,212,216,239,241,242,243,250,253,254,256,259,267,268,278,279,281,282,284,285,290,295,296,297,308,322,328,330,331,334,345,349,352,353,357,359,360,361,375,378,399,400,407,408,410,411],speed:4,split:17,squar:408,ssl:[14,17,19,20],sslkeylogfil:14,stack:[8,17,411],stage:[24,335],staic:12,stale:20,staleness_bound:[211,357,359],stamp:[174,182,183,184,209,211,216],standard:[13,17],start:[3,17,24,96,104,106,120,208,335,341,344,378,407,408],startup:17,state:[174,182,183,185,209,211,216],stderr:14,step:[16,96,334,408],still:[9,11,13,16,119,122,335,344,407,408],stop:[96,408],storag:[4,5,6,7,9,10,11,13,15,19,24,25,41,46,47,53,174,197,198,199,216,269,285,295,297,315,325,334,335,362,400,410],store2:400,store:[8,9,10,11,13,14,16,21,24,174,187,188,191,192,193,196,197,200,202,203,205,206,207,208,209,210,211,212,213,214,215,216,256,269,285,295,297,308,309,310,311,314,315,325,328,334,335,345,375,400,407,409,410],str:[24,59,65,71,75,76,77,78,81,82,93,95,98,117,120,123,127,136,143,150,153,160,174,175,177,180,181,183,187,188,190,191,193,196,197,199,202,203,204,205,210,211,214,216,231,233,236,243,250,252,267,269,277,295,297,316,345,347,350,351,354,378,382,385,386,388,400,406,407,408],strictli:[118,146],stride:[3,16,95,100,150,152,171,217,219,220,226,378],string:[0,3,8,9,10,11,13,15,16,18,19,20,21,22,23,24,81,82,93,127,153,175,177,180,181,190,200,204,252,277,308,345,351,401,406,410,411],strip:[208,351,410],strip_context:[195,295,328],strip_prefix:17,strip_prefix_length:208,strong:15,strongli:23,studio:17,style:[19,21,22,23,95,96,99,100,105,134,143,148,165,172,243,248,249,261,268,269,274,275,287,296,297,302,306,318,319,330,331,378],sub:[9,17,409],subarrai:13,subdivid:410,subject:[297,324,362],subscript:[304,305,306,307,319,331,408,409],subsequ:[12,96,334,362,400,407,408],subset:[7,16,17,106,117,121,408],subtyp:[8,10,13,21,410,411],succe:16,success:[115,203,340,342],successfulli:[112,239,242,334,343,362],suffic:16,suffici:408,suffix:[187,188],suitabl:[1,2,3,4,5,6,7,8,9,10,11,12,13,17,400,410,411],sum:408,suppli:409,support:[0,2,3,4,7,8,9,10,11,12,15,16,17,18,19,20,21,22,23,95,106,134,173,174,202,205,207,216,256,297,306,323,333,335,373,408,409,410,411],surviv:334,synchron:[106,202,203,205,297,299,304,305,306,307,319,322,331,334,335,342,407,409],syntax:[0,9,18,19,20,22,304,305,306,307,319,331,345,408,410],system:[14,17,19,20,21,334],t:[17,116,143,144,195,209,243,244,269,270,295,297,298,407],tabl:[16,22],take:[11,14,15,41,53,250,267,295,400,407,408,410],taken:[11,12,51,55,74,410],target:[16,17,26,28,32,33,39,41,53,95,104,378,408,410],temporari:[11,17],tensoprstor:14,tensorflow:[13,373],tensorstor:[0,1,2,3,4,5,6,7,8,9,14,16,17,19,20,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,401,402,403,404,405,406,407,408,409,410,411],tensorstore_bazel_build_opt:17,tensorstore_bazel_compilation_mod:17,tensorstore_bazel_startup_opt:17,tensorstore_bazelisk:17,tensorstore_ca_bundl:14,tensorstore_ca_path:14,tensorstore_curl_verbos:14,tensorstore_gcs_http_url:[14,19],tensorstore_gcs_request_concurr:[14,19],tensorstore_prebuilt_dir:17,tensorstore_system_lib:[14,17],term:[96,99,105,165,172,261,268,287,296,306,318,319,330,331,408],termin:[401,406],test:[22,106],th:[96,118,146,408],than:[0,8,9,10,11,13,16,17,41,46,47,53,96,121,211,357,359,407,408,410],thei:[10,12,22,64,119,122,401,406,407,408],them:[4,334],therefor:[11,14],thi:[0,1,3,7,8,9,10,11,13,14,16,17,18,19,21,41,53,59,65,66,69,70,94,99,105,106,113,117,118,122,134,141,143,144,146,147,149,165,166,169,170,172,174,202,203,205,207,208,211,213,215,216,244,250,253,261,262,264,265,267,268,270,275,278,279,281,282,284,287,288,290,291,292,295,296,297,298,299,302,303,306,307,310,315,318,319,320,321,325,326,327,328,330,331,332,334,335,345,349,352,353,354,362,382,383,400,407,408,409,410],third:410,those:[106,303],though:[119,122,407],thread:[0,106,107,112,115,202,203,205,299,322,407],three:[11,16,118,146,410],through:[15,16,19,21,143],throughput:15,tie:3,tiff:[8,17,411],time:[8,9,10,11,13,16,197,199,201,211,407,410],timedelta:13,timeout:[106,112,115,362,369,371],timeouterror:[112,115],timestamp:[174,182,184,197,198,407],timestampedstoragegener:[174,182,183,184,197,198,199,200,201,209,211,216,407],tl:17,tmp:[17,18,188,189,190,191,192,193,194,204,206,335,409],to_json:[25,26,38,52,56,58,60,61,62,64,69,117,142,143,171,187,194,243,266,269,293,345,356,382,388],togeth:13,tool:17,top:[2,23,409,410],total:[0,117,141,143,170,243,265,269,292,297,327],total_bytes_limit:[0,8,10,11,13,23,61,65,67,69,70,407,409],toward:408,traceback:[96,110,121,202,203,205,211,241,249,408],track:334,traffic:14,trail:[351,410],transact:[15,22,23,24,202,205,207,208,209,211,213,215,216,304,305,306,307,315,319,322,329,331,332,335,336,337,338,339,340,341,342,343,344,362,400],transform:[1,2,3,4,5,6,7,8,9,10,11,12,13,15,24,96,97,98,99,100,101,102,103,104,105,106,117,119,122,143,145,146,147,148,149,150,151,152,154,155,156,157,158,159,160,161,162,163,164,165,168,171,172,217,218,219,220,227,243,246,247,248,249,250,261,267,268,269,272,273,274,275,287,293,294,295,296,297,300,301,302,303,304,305,307,308,312,318,328,330,375,399,400,407,409,411],translat:[3,10,13,16,95,101,102,103,378,408],translate_backward_bi:[95,101,378],translate_bi:[95,96,98,102,119,145,147,293,294,378],translate_to:[95,103,378],transpos:[95,97,104,143,144,243,244,269,270,297,298,378],treat:[20,107,211,408,410],treatment:20,tree:17,trip:16,truncat:408,trust:14,ts:[10,11,12,13,48,49,51,52,55,61,65,66,67,69,70,71,72,73,74,75,76,77,78,79,81,82,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,110,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,144,145,146,147,148,149,150,151,152,154,155,156,157,158,159,160,161,162,163,164,165,168,171,172,174,179,188,189,190,191,192,193,194,195,196,202,203,204,205,206,207,208,209,210,211,212,214,215,216,218,219,220,239,241,242,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,263,266,267,268,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,289,290,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,317,318,319,321,322,325,328,330,331,334,335,346,347,348,349,350,351,352,353,354,355,356,375,379,393,399,400,407,408,409],tupl:[25,26,30,31,36,37,44,45,46,47,117,128,130,131,132,133,134,136,138,140,143,145,155,156,157,158,159,160,161,163,166,169,239,240,243,250,256,262,264,267,269,281,288,291,295,297,311,320,326,345,350,400,407,408],turbo:17,tutori:15,two:[9,16,24,25,26,27,40,197,198,334,335,345,346,362,394,395,396,397,408,410,411],txn:[174,215,306,334,335],type:[0,1,2,3,8,9,12,15,23,65,106,116,143,173,243,250,258,267,269,283,295,300,301,304,306,307,308,313,314,319,331,334,335,345,372,373,374,375,382,383,384,389,390,391,392,394,395,396,397,398,400,401,404,406,407,408,409,410,411],u1:13,u2:[13,282,290],u4:[297,302,303,318,328,330],u8:13,u:[354,355],udunits2:[345,410],uint16:[10,11,13,24,280,290,335,402,411],uint32:[10,11,13,24,106,297,299,300,301,302,303,304,305,306,307,308,310,311,312,313,314,315,318,319,322,325,328,330,331,334,375,403,407,409,411],uint64:[10,11,13,23,24,400,404,409,411],uint8:[4,5,6,7,10,11,13,24,250,251,252,255,258,263,266,267,280,283,405,411],um:281,unbind_context:[187,195,212,295,328],unbound:[12,16,24,51,55,71,78,84,85,90,91,94,123,150,195,295,393],unchang:[100,101,102,103,195,209,295,408],unchunk:11,uncommit:[322,334,335],uncondition:[105,172,268,296,330,331,408],unconstrain:[256,400],under:[2,8,13,18,408],underli:[4,5,6,7,8,9,10,11,12,13,15,16,21,23,143,269,285,295,297,315,334,335,362,400,410],unequ:408,unicod:[24,406,411],uniform:[3,15,410],uniqu:[16,66,407],unit:[12,24,243,250,256,267,269,281,295,297,311,345,346,347,348,349,350,351,352,353,354,355,356,400,407],universal2:17,unix:[8,19,21,22,23,112,115,197,201,211],unknown:[16,250,256,267,295,310,311,314,400,407,410],unlabel:[10,16,71,93,123,150,410],unless:[11,19,23,345,408,410],unlik:[20,96,106,408],unmatch:16,unmodifi:407,unpickl:407,unregist:[106,114],unset:12,unshar:[400,407],unshard:410,unsign:[24,402,403,404,405,411],unspecifi:[3,8,10,11,13,16,26,35,41,51,53,55,182,183,185,200,208,211,243,257,258,263,269,283,289,294,295,328,400,407,408,410],unsuccessfulli:[109,115,239,241],until:[106,112,115,202,203,205,207,216,335,344,362,407,408],unus:[4,5,6],unverifi:400,up:[11,17,19,410],updat:[11,25,26,39,53,187,195,243,245,253,254,255,256,257,259,263,267,269,271,277,280,295,297,324,328,400],upon:[106,108,408],upper:[10,13,16,71,75,76,77,78,84,89,90,97,117,123,128,131,132,134,143,150,156,157,158,175,177,180,408],url:[15,17,18,19,20,21,22,174,187,189,196,209,214],us:[0,1,3,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,43,65,66,71,95,96,100,101,102,103,106,107,113,116,117,119,122,134,143,174,188,195,209,211,212,215,239,243,246,247,248,249,261,268,269,272,273,274,275,285,287,295,296,297,300,301,302,303,304,305,306,307,310,315,318,319,322,325,328,329,330,331,332,334,335,340,344,345,351,357,360,362,372,378,398,399,401,406,407,408,409,410],usag:335,user:18,usezlib:[10,410],ustr:[24,406,411],usual:[177,181,408],utf:411,util:17,v1:[16,400,409],v2:16,v3:16,v4:16,valid:[0,10,16,20,41,53,96,100,197,201,211,408,410],valu:[0,1,3,4,8,9,12,14,15,16,24,41,53,64,71,74,84,85,90,91,94,96,100,106,116,121,174,182,183,184,185,186,187,188,191,192,193,195,196,197,200,202,203,205,206,207,208,209,210,211,212,213,214,215,216,231,232,238,243,250,256,259,267,269,284,285,295,297,311,314,315,328,334,345,349,398,400,407,408,409,410,411],valueerror:[51,55,79,121,134,208,246,247,248,249,261,268,272,273,274,275,287,296],vari:4,variabl:[17,19,20,24,401,406],varieti:21,varlength:10,vector:[16,95,96,105,117,123,143,145,150,172,243,268,269,296,297,330,331,378],verbos:[14,408],veri:[7,11,23,119,122],verifi:[19,20],version:[3,14,17,197,200,400,407,408],via:[1,3,10,11,12,13,15,46,47,408],view:[2,3,15,143,144,174,215,227,243,244,269,270,297,298,300,301,302,303,308,318,330,332,375,380,381,407,408,409],vindex:[95,96,105,143,148,172,243,248,249,261,268,269,274,275,287,296,297,302,303,306,307,318,319,330,331,378],virtual:[2,3,15,17,143,297,300,301,302,303,318,330,380,381,407],virtual_chunk:[24,357,360,407],virtualchunkedreadparamet:[24,357,358,359,407],virtualchunkedwriteparamet:[24,360,361,407],visibl:335,visual:17,volum:[4,5,6,7,11,23],voxel:[11,410],voxel_offset:[11,400,409],vv:17,w:[16,316],wa:[8,14,59,70,112,115,209,211,253,340,400,407,409],wai:[0,10,11,13,15,17,407,410],wait:[106,334,407,409],warn:[8,10,11,13],web:20,well:[11,12,13,96,373,400],were:408,what:8,wheel:17,when:[0,1,2,3,4,5,6,7,8,9,12,16,17,20,23,96,107,113,207,211,256,295,304,305,306,307,319,322,328,331,334,343,362,407,408,410,411],where:[0,3,11,12,14,16,24,96,99,105,116,118,134,146,148,150,152,165,172,250,267,295,400,407,408,410,411],wherebi:408,whether:[64,75,76,77,78,96,106,110,111,117,123,130,131,143,150,155,156,328,335,338,339,341,344,408],which:[0,2,3,8,9,10,11,12,13,14,15,16,17,19,20,22,23,51,55,59,67,68,69,70,71,100,101,102,103,107,117,143,197,201,211,253,303,334,340,345,354,362,372,378,407,408,409,410],whitespac:[351,410],wide:18,width:[4,5,6,7],window:[14,17,18],wireshark:14,wise:[2,10,13,24,407],wish:407,with_transact:[174,209,215,297,306,332,334,335,400,407],within:[0,3,8,9,10,11,13,16,19,21,22,23,25,41,46,53,112,115,174,187,193,208,210,211,297,322,407,408,410],without:[10,16,19,20,95,101,102,103,188,202,203,205,209,211,216,334,335,378,400,407,408,409,410],won:[195,209,295],work:[17,19,20],workspac:17,worst:[10,11],would:[98,134],writabl:[297,333],write:[2,8,9,10,12,13,15,16,19,23,24,25,26,41,53,54,55,174,202,205,207,209,211,215,216,297,303,304,305,306,307,308,316,319,322,329,331,332,333,334,335,360,362,372,375,407,408,410],write_chunk:[10,11,13,25,41,52,53,54,55,290,309,325,410],write_chunk_aspect_ratio:[41,53],write_chunk_aspect_ratio_soft_constraint:[41,53],write_chunk_el:[11,41,53],write_chunk_elements_soft_constraint:[41,53],write_chunk_shap:[11,41,53,55],write_chunk_shape_soft_constraint:[41,52,53],write_chunk_templ:[25,51,55],write_context:407,write_funct:407,write_futur:409,writeback:[0,15,334,360,361],writefutur:[24,106,297,334,362,363,364,365,366,367,368,369,370,371],writer:[8,10,11,13,295,328,400],written:[13,17,24,250,267,295,297,314,334,400,407,409],x86_64:17,x:[4,5,6,7,10,11,13,16,17,71,75,76,77,78,81,82,87,92,93,96,97,98,99,100,101,102,103,104,105,107,118,119,120,121,125,129,135,136,146,147,149,152,154,160,162,164,168,171,179,209,246,247,248,249,257,261,268,272,273,294,300,301,304,305,312,379,400,408,409],xcode:17,xre:11,xxxxx:20,xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:17,xyz:11,xz:[10,17],y:[4,5,6,7,10,11,13,16,96,97,98,99,100,101,102,103,104,105,118,119,120,121,124,125,129,135,136,146,147,152,154,160,162,164,168,171,179,209,246,247,248,249,257,261,268,272,273,294,300,301,304,305,312,400,408,409],yet:[297,314,322],you:[8,10,11,13,14,17,19,20,66,334,400,407,409],your:17,yre:11,yuv:4,yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyi:17,z:[10,11,16,96,98,99,100,101,102,103,104,105,118,119,120,121,125,136,146,152,154,160,162,164,168,171,246,247,248,249,257,261,268,272,273,300,301,304,305,400,408,409],zarr:[2,3,8,15,254,272,273,274,275,278,279,282,284,287,290,296,297,299,302,303,306,307,309,310,313,314,318,319,322,325,328,330,331,334,400,408,410],zarr_format:[13,297,302,303,318,328,330,400],zarrai:[13,400],zero:[8,10,11,13,16,23,71,83,96,97,123,150,250,267,295,400,407,408,410],zlib:[10,13,17],zre:11,zstd:[10,13,17]},titles:["Context framework","<code class=\"docutils literal notranslate\"><span class=\"pre\">array</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">cast</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">downsample</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">avif</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">jpeg</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">png</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">tiff</span></code> Driver","Drivers","<code class=\"docutils literal notranslate\"><span class=\"pre\">json</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">n5</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">neuroglancer_precomputed</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">stack</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">zarr</span></code> Driver","Environment variables","TensorStore","Index space","Building and Installing","<code class=\"docutils literal notranslate\"><span class=\"pre\">file</span></code> Key-Value Store driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">gcs</span></code> Key-Value Store driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">http</span></code> Key-Value Store driver","Key-Value Storage Layer","<code class=\"docutils literal notranslate\"><span class=\"pre\">memory</span></code> Key-Value Store driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">neuroglancer_uint64_sharded</span></code> Key-Value Store driver","API reference","tensorstore.ChunkLayout","tensorstore.ChunkLayout.Grid","tensorstore.ChunkLayout.Grid.__eq__","tensorstore.ChunkLayout.Grid.__init__(components)","tensorstore.ChunkLayout.Grid.__init__(json)","tensorstore.ChunkLayout.Grid.aspect_ratio","tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint","tensorstore.ChunkLayout.Grid.elements","tensorstore.ChunkLayout.Grid.elements_soft_constraint","tensorstore.ChunkLayout.Grid.ndim","tensorstore.ChunkLayout.Grid.rank","tensorstore.ChunkLayout.Grid.shape","tensorstore.ChunkLayout.Grid.shape_soft_constraint","tensorstore.ChunkLayout.Grid.to_json","tensorstore.ChunkLayout.Grid.update","tensorstore.ChunkLayout.__eq__","tensorstore.ChunkLayout.__init__(components)","tensorstore.ChunkLayout.__init__(json)","tensorstore.ChunkLayout.codec_chunk","tensorstore.ChunkLayout.grid_origin","tensorstore.ChunkLayout.grid_origin_soft_constraint","tensorstore.ChunkLayout.inner_order","tensorstore.ChunkLayout.inner_order_soft_constraint","tensorstore.ChunkLayout.ndim","tensorstore.ChunkLayout.rank","tensorstore.ChunkLayout.read_chunk","tensorstore.ChunkLayout.read_chunk_template","tensorstore.ChunkLayout.to_json","tensorstore.ChunkLayout.update","tensorstore.ChunkLayout.write_chunk","tensorstore.ChunkLayout.write_chunk_template","tensorstore.CodecSpec","tensorstore.CodecSpec.__init__","tensorstore.CodecSpec.to_json","tensorstore.Context","tensorstore.Context.Resource","tensorstore.Context.Resource.to_json","tensorstore.Context.Spec","tensorstore.Context.Spec.__init__","tensorstore.Context.Spec.to_json","tensorstore.Context.__getitem__","tensorstore.Context.__init__(default)","tensorstore.Context.__init__(json)","tensorstore.Context.__init__(spec)","tensorstore.Context.parent","tensorstore.Context.spec","tensorstore.Dim","tensorstore.Dim.__contains__(dim)","tensorstore.Dim.__contains__(index)","tensorstore.Dim.__eq__","tensorstore.Dim.__init__(exclusive_max)","tensorstore.Dim.__init__(inclusive_max)","tensorstore.Dim.__init__(size)","tensorstore.Dim.__init__(unbounded)","tensorstore.Dim.__iter__","tensorstore.Dim.__len__","tensorstore.Dim.__repr__","tensorstore.Dim.__str__","tensorstore.Dim.empty","tensorstore.Dim.exclusive_max","tensorstore.Dim.exclusive_min","tensorstore.Dim.finite","tensorstore.Dim.hull","tensorstore.Dim.implicit_lower","tensorstore.Dim.implicit_upper","tensorstore.Dim.inclusive_max","tensorstore.Dim.inclusive_min","tensorstore.Dim.intersect","tensorstore.Dim.label","tensorstore.Dim.size","tensorstore.DimExpression","tensorstore.DimExpression.__getitem__","tensorstore.DimExpression.diagonal","tensorstore.DimExpression.label","tensorstore.DimExpression.oindex","tensorstore.DimExpression.stride","tensorstore.DimExpression.translate_backward_by","tensorstore.DimExpression.translate_by","tensorstore.DimExpression.translate_to","tensorstore.DimExpression.transpose","tensorstore.DimExpression.vindex","tensorstore.Future","tensorstore.Future.__new__","tensorstore.Future.add_done_callback","tensorstore.Future.cancel","tensorstore.Future.cancelled","tensorstore.Future.done","tensorstore.Future.exception","tensorstore.Future.force","tensorstore.Future.remove_done_callback","tensorstore.Future.result","tensorstore.FutureLike","tensorstore.IndexDomain","tensorstore.IndexDomain.__getitem__(domain)","tensorstore.IndexDomain.__getitem__(expr)","tensorstore.IndexDomain.__getitem__(identifier)","tensorstore.IndexDomain.__getitem__(selection)","tensorstore.IndexDomain.__getitem__(transform)","tensorstore.IndexDomain.__init__(components)","tensorstore.IndexDomain.__init__(dimensions)","tensorstore.IndexDomain.__init__(json)","tensorstore.IndexDomain.__len__","tensorstore.IndexDomain.__repr__","tensorstore.IndexDomain.exclusive_max","tensorstore.IndexDomain.hull","tensorstore.IndexDomain.implicit_lower_bounds","tensorstore.IndexDomain.implicit_upper_bounds","tensorstore.IndexDomain.inclusive_max","tensorstore.IndexDomain.inclusive_min","tensorstore.IndexDomain.index_exp","tensorstore.IndexDomain.intersect","tensorstore.IndexDomain.labels","tensorstore.IndexDomain.ndim","tensorstore.IndexDomain.origin","tensorstore.IndexDomain.rank","tensorstore.IndexDomain.shape","tensorstore.IndexDomain.size","tensorstore.IndexDomain.to_json","tensorstore.IndexTransform","tensorstore.IndexTransform.T","tensorstore.IndexTransform.__call__","tensorstore.IndexTransform.__getitem__(domain)","tensorstore.IndexTransform.__getitem__(expr)","tensorstore.IndexTransform.__getitem__(indices)","tensorstore.IndexTransform.__getitem__(transform)","tensorstore.IndexTransform.__init__(components)","tensorstore.IndexTransform.__init__(domain)","tensorstore.IndexTransform.__init__(json)","tensorstore.IndexTransform.__repr__","tensorstore.IndexTransform.domain","tensorstore.IndexTransform.implicit_lower_bounds","tensorstore.IndexTransform.implicit_upper_bounds","tensorstore.IndexTransform.input_exclusive_max","tensorstore.IndexTransform.input_inclusive_max","tensorstore.IndexTransform.input_inclusive_min","tensorstore.IndexTransform.input_labels","tensorstore.IndexTransform.input_origin","tensorstore.IndexTransform.input_rank","tensorstore.IndexTransform.input_shape","tensorstore.IndexTransform.ndim","tensorstore.IndexTransform.oindex","tensorstore.IndexTransform.origin","tensorstore.IndexTransform.output","tensorstore.IndexTransform.output_rank","tensorstore.IndexTransform.shape","tensorstore.IndexTransform.size","tensorstore.IndexTransform.to_json","tensorstore.IndexTransform.vindex","tensorstore.Indexable","tensorstore.KvStore","tensorstore.KvStore.KeyRange","tensorstore.KvStore.KeyRange.__eq__","tensorstore.KvStore.KeyRange.__init__","tensorstore.KvStore.KeyRange.copy","tensorstore.KvStore.KeyRange.empty","tensorstore.KvStore.KeyRange.exclusive_max","tensorstore.KvStore.KeyRange.inclusive_min","tensorstore.KvStore.ReadResult","tensorstore.KvStore.ReadResult.__init__","tensorstore.KvStore.ReadResult.stamp","tensorstore.KvStore.ReadResult.state","tensorstore.KvStore.ReadResult.value","tensorstore.KvStore.Spec","tensorstore.KvStore.Spec.__add__","tensorstore.KvStore.Spec.__new__","tensorstore.KvStore.Spec.__repr__","tensorstore.KvStore.Spec.__truediv__","tensorstore.KvStore.Spec.copy","tensorstore.KvStore.Spec.path","tensorstore.KvStore.Spec.to_json","tensorstore.KvStore.Spec.update","tensorstore.KvStore.Spec.url","tensorstore.KvStore.TimestampedStorageGeneration","tensorstore.KvStore.TimestampedStorageGeneration.__eq__","tensorstore.KvStore.TimestampedStorageGeneration.__init__","tensorstore.KvStore.TimestampedStorageGeneration.generation","tensorstore.KvStore.TimestampedStorageGeneration.time","tensorstore.KvStore.__delitem__","tensorstore.KvStore.__getitem__","tensorstore.KvStore.__repr__","tensorstore.KvStore.__setitem__","tensorstore.KvStore.copy","tensorstore.KvStore.delete_range","tensorstore.KvStore.list","tensorstore.KvStore.open","tensorstore.KvStore.path","tensorstore.KvStore.read","tensorstore.KvStore.spec","tensorstore.KvStore.transaction","tensorstore.KvStore.url","tensorstore.KvStore.with_transaction","tensorstore.KvStore.write","tensorstore.OutputIndexMap","tensorstore.OutputIndexMap.__init__(constant)","tensorstore.OutputIndexMap.__init__(index_array)","tensorstore.OutputIndexMap.__init__(input_dimension)","tensorstore.OutputIndexMap.index_array","tensorstore.OutputIndexMap.index_range","tensorstore.OutputIndexMap.input_dimension","tensorstore.OutputIndexMap.method","tensorstore.OutputIndexMap.offset","tensorstore.OutputIndexMap.stride","tensorstore.OutputIndexMaps","tensorstore.OutputIndexMaps.__getitem__","tensorstore.OutputIndexMaps.__len__","tensorstore.OutputIndexMaps.rank","tensorstore.OutputIndexMethod","tensorstore.OutputIndexMethod.__init__","tensorstore.OutputIndexMethod.__str__","tensorstore.OutputIndexMethod.array","tensorstore.OutputIndexMethod.constant","tensorstore.OutputIndexMethod.name","tensorstore.OutputIndexMethod.single_input_dimension","tensorstore.OutputIndexMethod.value","tensorstore.Promise","tensorstore.Promise.new","tensorstore.Promise.set_exception","tensorstore.Promise.set_result","tensorstore.Schema","tensorstore.Schema.T","tensorstore.Schema.__eq__","tensorstore.Schema.__getitem__(domain)","tensorstore.Schema.__getitem__(expr)","tensorstore.Schema.__getitem__(indices)","tensorstore.Schema.__getitem__(transform)","tensorstore.Schema.__init__(components)","tensorstore.Schema.__init__(json)","tensorstore.Schema.__repr__","tensorstore.Schema.chunk_layout","tensorstore.Schema.codec","tensorstore.Schema.copy","tensorstore.Schema.dimension_units","tensorstore.Schema.domain","tensorstore.Schema.dtype","tensorstore.Schema.fill_value","tensorstore.Schema.ndim","tensorstore.Schema.oindex","tensorstore.Schema.origin","tensorstore.Schema.rank","tensorstore.Schema.shape","tensorstore.Schema.size","tensorstore.Schema.to_json","tensorstore.Schema.update","tensorstore.Schema.vindex","tensorstore.Spec","tensorstore.Spec.T","tensorstore.Spec.__eq__","tensorstore.Spec.__getitem__(domain)","tensorstore.Spec.__getitem__(expr)","tensorstore.Spec.__getitem__(indices)","tensorstore.Spec.__getitem__(transform)","tensorstore.Spec.__new__","tensorstore.Spec.__repr__","tensorstore.Spec.chunk_layout","tensorstore.Spec.codec","tensorstore.Spec.copy","tensorstore.Spec.dimension_units","tensorstore.Spec.domain","tensorstore.Spec.dtype","tensorstore.Spec.fill_value","tensorstore.Spec.kvstore","tensorstore.Spec.ndim","tensorstore.Spec.oindex","tensorstore.Spec.origin","tensorstore.Spec.rank","tensorstore.Spec.schema","tensorstore.Spec.shape","tensorstore.Spec.size","tensorstore.Spec.to_json","tensorstore.Spec.transform","tensorstore.Spec.update","tensorstore.Spec.vindex","tensorstore.TensorStore","tensorstore.TensorStore.T","tensorstore.TensorStore.__array__","tensorstore.TensorStore.__getitem__(domain)","tensorstore.TensorStore.__getitem__(expr)","tensorstore.TensorStore.__getitem__(indices)","tensorstore.TensorStore.__getitem__(transform)","tensorstore.TensorStore.__setitem__(domain)","tensorstore.TensorStore.__setitem__(expr)","tensorstore.TensorStore.__setitem__(indices)","tensorstore.TensorStore.__setitem__(transform)","tensorstore.TensorStore.astype","tensorstore.TensorStore.chunk_layout","tensorstore.TensorStore.codec","tensorstore.TensorStore.dimension_units","tensorstore.TensorStore.domain","tensorstore.TensorStore.dtype","tensorstore.TensorStore.fill_value","tensorstore.TensorStore.kvstore","tensorstore.TensorStore.mode","tensorstore.TensorStore.ndim","tensorstore.TensorStore.oindex","tensorstore.TensorStore.oindex.__setitem__","tensorstore.TensorStore.origin","tensorstore.TensorStore.rank","tensorstore.TensorStore.read","tensorstore.TensorStore.readable","tensorstore.TensorStore.resolve","tensorstore.TensorStore.schema","tensorstore.TensorStore.shape","tensorstore.TensorStore.size","tensorstore.TensorStore.spec","tensorstore.TensorStore.transaction","tensorstore.TensorStore.vindex","tensorstore.TensorStore.vindex.__setitem__","tensorstore.TensorStore.with_transaction","tensorstore.TensorStore.writable","tensorstore.TensorStore.write","tensorstore.Transaction","tensorstore.Transaction.__init__","tensorstore.Transaction.abort","tensorstore.Transaction.aborted","tensorstore.Transaction.atomic","tensorstore.Transaction.commit_async","tensorstore.Transaction.commit_started","tensorstore.Transaction.commit_sync","tensorstore.Transaction.future","tensorstore.Transaction.open","tensorstore.Unit","tensorstore.Unit.__eq__","tensorstore.Unit.__init__(components)","tensorstore.Unit.__init__(json)","tensorstore.Unit.__init__(multiplier)","tensorstore.Unit.__init__(pair)","tensorstore.Unit.__init__(unit)","tensorstore.Unit.__mul__","tensorstore.Unit.__truediv__","tensorstore.Unit.base_unit","tensorstore.Unit.multiplier","tensorstore.Unit.to_json","tensorstore.VirtualChunkedReadParameters","tensorstore.VirtualChunkedReadParameters.if_not_equal","tensorstore.VirtualChunkedReadParameters.staleness_bound","tensorstore.VirtualChunkedWriteParameters","tensorstore.VirtualChunkedWriteParameters.if_equal","tensorstore.WriteFutures","tensorstore.WriteFutures.add_done_callback","tensorstore.WriteFutures.cancel","tensorstore.WriteFutures.cancelled","tensorstore.WriteFutures.commit","tensorstore.WriteFutures.copy","tensorstore.WriteFutures.done","tensorstore.WriteFutures.exception","tensorstore.WriteFutures.remove_done_callback","tensorstore.WriteFutures.result","tensorstore.array","tensorstore.bfloat16","tensorstore.bool","tensorstore.cast","tensorstore.complex128","tensorstore.complex64","tensorstore.d","tensorstore.d.__class_getitem__","tensorstore.downsample(spec)","tensorstore.downsample(store)","tensorstore.dtype","tensorstore.dtype.__call__","tensorstore.dtype.__init__(dtype)","tensorstore.dtype.__init__(name)","tensorstore.dtype.name","tensorstore.dtype.numpy_dtype","tensorstore.dtype.to_json","tensorstore.dtype.type","tensorstore.float16","tensorstore.float32","tensorstore.float64","tensorstore.inf","tensorstore.int16","tensorstore.int32","tensorstore.int64","tensorstore.int8","tensorstore.json","tensorstore.newaxis","tensorstore.open","tensorstore.string","tensorstore.uint16","tensorstore.uint32","tensorstore.uint64","tensorstore.uint8","tensorstore.ustring","tensorstore.virtual_chunked","Indexing","Tutorial","Schema","JSON Spec"],titleterms:{"boolean":[96,408],"class":[25,59,174,410],"new":[10,11,13,400],"public":[26,56,71,106,182,217,227,231,239,357,360,362,382],accessor:[25,59,60,62,71,106,117,143,174,175,187,197,243,269,297,335,345],ad:[96,408],align:16,all:[118,146],an:400,api:[17,24],arithmet:345,arrai:[1,10,11,13,96,400,408],aspect:[10,13],assume_metadata:400,asynchron:24,authent:19,avif:4,behavior:20,block:106,broadcast:16,build:17,c:[13,17],ca:[14,19,20],cach:[20,407],callback:106,cast:2,certif:[14,19,20],checkout:17,chunk:[8,10,11,13,25,410],cloud:14,codec:[10,11,13,410],compar:408,comparison:[25,26,175,197,243,269,345],compos:408,compress:[10,11],compressor:13,concept:15,concurr:400,configur:14,constraint:[10,11,13],construct:408,constructor:[25,26,56,59,62,71,106,117,143,174,175,182,187,197,217,231,239,243,269,335,345,378,382],context:0,core:24,creat:[10,11,13,400],credenti:14,data:[10,11,13,24,297],dataset:409,debug:14,depend:17,develop:17,diagon:408,differ:408,dimens:[10,11,96,118,146,408,410],document:17,domain:[10,11,13,16],downsampl:3,driver:[1,2,3,4,5,6,7,8,9,10,11,12,13,18,19,20,21,22,23],effici:400,element:[10,13],ellipsi:[96,408],encod:11,environ:14,error:96,exampl:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,16,18,19,20,22,23,48,49,51,52,55,61,65,66,67,69,70,71,72,73,75,76,77,78,79,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,105,107,110,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,145,146,147,148,149,150,151,152,154,155,156,157,158,159,160,161,162,163,164,165,168,171,172,174,179,188,190,191,192,193,194,195,196,202,203,204,205,206,207,208,210,211,212,214,215,216,218,219,220,241,242,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,263,266,267,268,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,289,290,293,294,295,296,297,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,317,321,322,325,328,334,346,347,348,349,350,351,352,353,354,355,356,375,379,393,399,400,408,410],exist:400,explicit:[10,11,13],express:408,file:[8,18],fill:[10,11,13],flyem:409,fortran:13,framework:0,from:17,fulli:[118,146],gc:19,geometr:117,get:15,googl:14,hemibrain:409,highlight:15,http:[14,20],i:[174,297],improv:400,index:[16,24,96,117,143,243,269,297,408],instal:17,integ:[96,408],interfac:106,interv:[96,408],ipython:17,janelia:409,jpeg:5,json:[9,11,23,411],kei:[18,19,20,21,22,23],label:[118,146,408],layer:[12,21],layout:[10,11,13,410],librari:17,limit:[10,11,13,18,23],local:[17,409],map:[10,11,13],member:[26,56,71,106,182,217,227,231,239,357,360,362,382],memori:22,metadata:400,method:16,mix:[118,146],mode:408,mutat:[187,243,269],n5:[10,409],neuroglancer_precomput:11,neuroglancer_uint64_shard:23,non:334,numpi:408,o:[174,297],oindex:408,open:400,oper:[25,26,71,95,117,175,187,197,243,269,335,345,378,408],order:13,outer:408,output:16,packag:17,parti:17,pickl:407,png:6,proxi:14,publish:17,pypi:17,python:17,ratio:[10,13],raw:11,read:[11,400,409],refer:24,represent:[71,117,143,174,187,231,243,269],request:14,requir:17,run:17,scalar:13,schema:[10,11,12,13,410],segment:11,select:[10,11,13,408],semant:334,separ:11,sequenc:117,setter:25,shape:[10,11,13],shard:11,shell:17,singl:8,singleton:[96,408],skip:400,space:16,spec:[24,411],specif:[11,23],stack:12,start:15,storag:[8,14,21],store:[18,19,20,22,23],stride:408,string:[71,117,143,174,187,231,243,269],structur:13,style:408,support:[13,24,407],synchron:174,templat:25,tensorstor:[10,11,12,13,15,400],test:[17,19],third:17,tiff:7,tl:[14,19,20],transact:[174,297,334,407],transform:[16,408],translate_backward_bi:408,translate_bi:408,translate_to:408,transpos:408,tutori:409,type:[10,11,13,24,297],unconstrain:[10,11,13],unit:[10,11,410],unlabel:[118,146],unshard:11,us:400,valu:[10,11,13,18,19,20,21,22,23],variabl:14,vector:408,view:24,vindex:408,virtual:24,when:[10,11,13,400],without:17,write:[11,400,409],zarr:13}})